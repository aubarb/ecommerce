{"ast":null,"code":"module.exports = BinaryReader;\n\nfunction BinaryReader(buffer, isBigEndian) {\n  this.buffer = buffer;\n  this.position = 0;\n  this.isBigEndian = isBigEndian || false;\n}\n\nfunction _read(readLE, readBE, size) {\n  return function () {\n    var value;\n    if (this.isBigEndian) value = readBE.call(this.buffer, this.position);else value = readLE.call(this.buffer, this.position);\n    this.position += size;\n    return value;\n  };\n}\n\nBinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);\nBinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);\nBinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);\nBinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);\nBinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);\nBinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);\nBinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);\nBinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);\n\nBinaryReader.prototype.readVarInt = function () {\n  var nextByte,\n      result = 0,\n      bytesRead = 0;\n\n  do {\n    nextByte = this.buffer[this.position + bytesRead];\n    result += (nextByte & 0x7F) << 7 * bytesRead;\n    bytesRead++;\n  } while (nextByte >= 0x80);\n\n  this.position += bytesRead;\n  return result;\n};","map":{"version":3,"names":["module","exports","BinaryReader","buffer","isBigEndian","position","_read","readLE","readBE","size","value","call","prototype","readUInt8","Buffer","readUInt16","readUInt16LE","readUInt16BE","readUInt32","readUInt32LE","readUInt32BE","readInt8","readInt16","readInt16LE","readInt16BE","readInt32","readInt32LE","readInt32BE","readFloat","readFloatLE","readFloatBE","readDouble","readDoubleLE","readDoubleBE","readVarInt","nextByte","result","bytesRead"],"sources":["/Users/aurele/node_modules/wkx/lib/binaryreader.js"],"sourcesContent":["module.exports = BinaryReader;\r\n\r\nfunction BinaryReader(buffer, isBigEndian) {\r\n    this.buffer = buffer;\r\n    this.position = 0;\r\n    this.isBigEndian = isBigEndian || false;\r\n}\r\n\r\nfunction _read(readLE, readBE, size) {\r\n    return function () {\r\n        var value;\r\n\r\n        if (this.isBigEndian)\r\n            value = readBE.call(this.buffer, this.position);\r\n        else\r\n            value = readLE.call(this.buffer, this.position);\r\n\r\n        this.position += size;\r\n\r\n        return value;\r\n    };\r\n}\r\n\r\nBinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);\r\nBinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);\r\nBinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);\r\nBinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);\r\nBinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);\r\nBinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);\r\nBinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);\r\nBinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);\r\n\r\nBinaryReader.prototype.readVarInt = function () {\r\n    var nextByte,\r\n        result = 0,\r\n        bytesRead = 0;\r\n\r\n    do {\r\n        nextByte = this.buffer[this.position + bytesRead];\r\n        result += (nextByte & 0x7F) << (7 * bytesRead);\r\n        bytesRead++;\r\n    } while (nextByte >= 0x80);\r\n\r\n    this.position += bytesRead;\r\n\r\n    return result;\r\n};\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,WAA9B,EAA2C;EACvC,KAAKD,MAAL,GAAcA,MAAd;EACA,KAAKE,QAAL,GAAgB,CAAhB;EACA,KAAKD,WAAL,GAAmBA,WAAW,IAAI,KAAlC;AACH;;AAED,SAASE,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;EACjC,OAAO,YAAY;IACf,IAAIC,KAAJ;IAEA,IAAI,KAAKN,WAAT,EACIM,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,KAAKR,MAAjB,EAAyB,KAAKE,QAA9B,CAAR,CADJ,KAGIK,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAY,KAAKR,MAAjB,EAAyB,KAAKE,QAA9B,CAAR;IAEJ,KAAKA,QAAL,IAAiBI,IAAjB;IAEA,OAAOC,KAAP;EACH,CAXD;AAYH;;AAEDR,YAAY,CAACU,SAAb,CAAuBC,SAAvB,GAAmCP,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBC,SAAlB,EAA6BC,MAAM,CAACF,SAAP,CAAiBC,SAA9C,EAAyD,CAAzD,CAAxC;AACAX,YAAY,CAACU,SAAb,CAAuBG,UAAvB,GAAoCT,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBI,YAAlB,EAAgCF,MAAM,CAACF,SAAP,CAAiBK,YAAjD,EAA+D,CAA/D,CAAzC;AACAf,YAAY,CAACU,SAAb,CAAuBM,UAAvB,GAAoCZ,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBO,YAAlB,EAAgCL,MAAM,CAACF,SAAP,CAAiBQ,YAAjD,EAA+D,CAA/D,CAAzC;AACAlB,YAAY,CAACU,SAAb,CAAuBS,QAAvB,GAAkCf,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBS,QAAlB,EAA4BP,MAAM,CAACF,SAAP,CAAiBS,QAA7C,EAAuD,CAAvD,CAAvC;AACAnB,YAAY,CAACU,SAAb,CAAuBU,SAAvB,GAAmChB,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBW,WAAlB,EAA+BT,MAAM,CAACF,SAAP,CAAiBY,WAAhD,EAA6D,CAA7D,CAAxC;AACAtB,YAAY,CAACU,SAAb,CAAuBa,SAAvB,GAAmCnB,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBc,WAAlB,EAA+BZ,MAAM,CAACF,SAAP,CAAiBe,WAAhD,EAA6D,CAA7D,CAAxC;AACAzB,YAAY,CAACU,SAAb,CAAuBgB,SAAvB,GAAmCtB,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBiB,WAAlB,EAA+Bf,MAAM,CAACF,SAAP,CAAiBkB,WAAhD,EAA6D,CAA7D,CAAxC;AACA5B,YAAY,CAACU,SAAb,CAAuBmB,UAAvB,GAAoCzB,KAAK,CAACQ,MAAM,CAACF,SAAP,CAAiBoB,YAAlB,EAAgClB,MAAM,CAACF,SAAP,CAAiBqB,YAAjD,EAA+D,CAA/D,CAAzC;;AAEA/B,YAAY,CAACU,SAAb,CAAuBsB,UAAvB,GAAoC,YAAY;EAC5C,IAAIC,QAAJ;EAAA,IACIC,MAAM,GAAG,CADb;EAAA,IAEIC,SAAS,GAAG,CAFhB;;EAIA,GAAG;IACCF,QAAQ,GAAG,KAAKhC,MAAL,CAAY,KAAKE,QAAL,GAAgBgC,SAA5B,CAAX;IACAD,MAAM,IAAI,CAACD,QAAQ,GAAG,IAAZ,KAAsB,IAAIE,SAApC;IACAA,SAAS;EACZ,CAJD,QAISF,QAAQ,IAAI,IAJrB;;EAMA,KAAK9B,QAAL,IAAiBgC,SAAjB;EAEA,OAAOD,MAAP;AACH,CAdD"},"metadata":{},"sourceType":"script"}