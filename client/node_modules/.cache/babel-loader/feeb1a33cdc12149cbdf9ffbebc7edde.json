{"ast":null,"code":"\"use strict\";\n\nconst util = require(\"node:util\");\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"db2\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst moment = require(\"moment\");\n\nconst debug = logger.debugContext(\"sql:db2\");\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return {\n        ParamType: \"INPUT\",\n        DataType: \"BLOB\",\n        Data: value\n      };\n    }\n\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err2 => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? util.inspect(parameters, {\n              compact: true,\n              breakLength: Infinity\n            }) : \"\"}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? util.inspect(parameters, {\n                compact: true,\n                breakLength: Infinity\n              }) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n\n                result.closeSync();\n              }\n\n              stmt.closeSync();\n              const datalen = data.length;\n\n              if (datalen > 0) {\n                const coltypes = {};\n\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                }\n\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") != -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") != -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n\n    if (err && err.length === 0) {\n      err = null;\n    }\n\n    return err;\n  }\n\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err[\"message\"] = \"No error message found.\";\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(\" \"), column => {\n          let columnName = column.trim();\n\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["util","require","AbstractQuery","sequelizeErrors","parserStore","_","logger","moment","debug","debugContext","getInsertIdField","getSQLTypeFromJsType","value","Buffer","isBuffer","ParamType","DataType","Data","toString","connection","sql","parameters","benchmark","sequelize","options","queryBegin","Date","now","log","uuid","errStack","Error","stack","Promise","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","commitTransaction","rollbackTransaction","err2","transaction","name","params","forOwn","key","param","push","SQL","toUpperCase","newSql","isSelectQuery","indexOf","charAt","length","slice","prepare","stmt","execute","result","outparams","inspect","compact","breakLength","Infinity","message","filterSQLError","closeSync","data","metadata","affectedRows","getAffectedRowsSync","fetchAllSync","getColumnMetadataSync","datalen","coltypes","i","SQL_DESC_NAME","SQL_DESC_TYPE_NAME","column","parse","get","utc","from","unshift","_run","values","dialect","bindParam","replacementFunc","match","values2","formatBindParameters","Array","isArray","search","isDropSchemaQuery","querySync","table","mtarray","split","dropTable","substring","rowCount","conn","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","type","Type","allowNull","IsNull","defaultValue","primaryKey","KeySeq","autoIncrement","IsIdentity","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","handleSelectQuery","isUpsertQuery","query","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","VERSION","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","handleShowTablesQuery","results","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","remove","constraint","constraintName","uniqueIndexName","uniqueKey","fields","model","uniqueKeys","where","dataValues","msg","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","currItem","forEach","item","Key_name","primary","keyType","unique","COLNAMES","x","columnName","trim","attribute","order","collate","metaData","autoIncrementAttribute","id","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","module","exports","Query","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/db2/query.js"],"sourcesContent":["'use strict';\n\nconst util = require('node:util');\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}