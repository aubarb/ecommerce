{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").sqlite;\n\nconst {\n  SQLiteQueryInterface\n} = require(\"./query-interface\");\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: false,\n  \"DEFAULT VALUES\": true,\n  \"UNION ALL\": false,\n  \"RIGHT JOIN\": false,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;;AACA,MAAME,oBAAoBF,QAAQ,sBAAR,CAA1B;;AACA,MAAMG,QAAQH,QAAQ,SAAR,CAAd;;AACA,MAAMI,iBAAiBJ,QAAQ,mBAAR,CAAvB;;AACA,MAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,MAA9C;;AACA,MAAM;EAAEC;AAAF,IAA2BP,QAAQ,mBAAR,CAAjC;;AAEA,4BAA4BC,eAA5B,CAA4C;EAC1CO,YAAYC,SAAZ,EAAuB;IACrB;IACA,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;IACA,KAAKE,cAAL,GAAsB,IAAIP,cAAJ,CAAmB;MACvCQ,UAAU,IAD6B;MAEvCH;IAFuC,CAAnB,CAAtB;IAKA,KAAKI,cAAL,GAAsB,IAAIN,oBAAJ,CACpBE,SADoB,EAEpB,KAAKE,cAFe,CAAtB;EAEO;;AAZiC;;AAiB5CG,cAAcC,SAAd,CAAwBC,QAAxB,GAAmCjB,EAAEkB,KAAF,CACjClB,EAAEmB,SAAF,CAAYjB,gBAAgBc,SAAhB,CAA0BC,QAAtC,CADiC,EAEjC;EACEG,SAAS,KADX;EAEE,kBAAkB,IAFpB;EAGE,aAAa,KAHf;EAIE,cAAc,KAJhB;EAKEC,SAAS;IACPC,kBAAkB,YADX;IAEPC,mBAAmB,4BAFZ;IAGPC,gBAAgB;EAHT,CALX;EAUEC,OAAO;IACLC,OAAO,KADF;IAELC,OAAO,IAFF;IAGLC,eAAe;EAHV,CAVT;EAeEC,oBAAoB;IAClBC,MAAM;EADY,CAftB;EAkBEC,aAAa;IACXC,eAAe,KADJ;IAEXC,gBAAgB;EAFL,CAlBf;EAsBEC,cAAc,KAtBhB;EAuBEC,MAAM;AAvBR,CAFiC,CAAnC;AA6BApB,cAAcC,SAAd,CAAwBoB,cAAxB,GAAyC,OAAzC;AACArB,cAAcC,SAAd,CAAwBZ,KAAxB,GAAgCA,KAAhC;AACAW,cAAcC,SAAd,CAAwBV,SAAxB,GAAoCA,SAApC;AACAS,cAAcC,SAAd,CAAwBqB,IAAxB,GAA+B,QAA/B;AACAtB,cAAcC,SAAd,CAAwBsB,SAAxB,GAAoC,GAApC;AACAvB,cAAcC,SAAd,CAAwBuB,cAAxB,GAAyCxB,cAAcC,SAAd,CAAwBsB,SAAjE;AACAvB,cAAcC,SAAd,CAAwBwB,eAAxB,GAA0CzB,cAAcC,SAAd,CAAwBsB,SAAlE;AAEAG,OAAOC,OAAP,GAAiB3B,aAAjB;AACA0B,OAAOC,OAAP,CAAe3B,aAAf,GAA+BA,aAA/B;AACA0B,OAAOC,OAAP,CAAeC,OAAf,GAAyB5B,aAAzB","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SQLiteQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","SqliteDialect","prototype","supports","merge","cloneDeep","DEFAULT","inserts","ignoreDuplicates","updateOnDuplicate","conflictFields","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/sqlite/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script"}