{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  AsyncQueueError: () => AsyncQueueError,\n  default: () => async_queue_default\n});\n\nvar import_base_error = __toModule(require(\"../../errors/base-error\"));\n\nvar import_connection_error = __toModule(require(\"../../errors/connection-error\"));\n\nclass AsyncQueueError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeAsyncQueueError\";\n  }\n\n}\n\nclass AsyncQueue {\n  constructor() {\n    __publicField(this, \"previous\");\n\n    __publicField(this, \"closed\");\n\n    __publicField(this, \"rejectCurrent\");\n\n    this.previous = Promise.resolve();\n    this.closed = false;\n\n    this.rejectCurrent = () => {};\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could finish executing\")));\n  }\n\n  enqueue(asyncFunction) {\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n\n        if (this.closed) {\n          return reject(new import_connection_error.default(new AsyncQueueError(\"the connection was closed before this query could be executed\")));\n        }\n\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n\n}\n\nvar async_queue_default = AsyncQueue;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;EAAAC;AAAA;;AAAA,wBAAsBC,8CAAtB;;AACA,8BAA4BA,oDAA5B;;AAKO,8BAA8BC,yBAA9B,CAAwC;EAC7CC,YAAYC,OAAZ,EAA6B;IAC3B,MAAMA,OAAN;IACA,KAAKC,IAAL,GAAY,0BAAZ;EAAY;;AAH+B;;AAO/C,iBAAiB;EAKfF,cAAc;IAJdG;;IACAA;;IACAA;;IAGE,KAAKC,QAAL,GAAgBC,QAAQC,OAAR,EAAhB;IACA,KAAKC,MAAL,GAAc,KAAd;;IACA,KAAKC,aAAL,GAAqB,MAAM,EAA3B;EAA2B;;EAK7BC,QAAQ;IACN,KAAKF,MAAL,GAAc,IAAd;IACA,KAAKC,aAAL,CACE,IAAIE,+BAAJ,CACE,IAAId,eAAJ,CACE,oEADF,CADF,CADF;EAGM;;EAMRe,QAAQC,aAAR,EAA6D;IAI3D,OAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUO,MAAV,KAAqB;MACtC,KAAKT,QAAL,GAAgB,KAAKA,QAAL,CAAcU,IAAd,CAAmB,MAAM;QACvC,KAAKN,aAAL,GAAqBK,MAArB;;QACA,IAAI,KAAKN,MAAT,EAAiB;UACf,OAAOM,OACL,IAAIH,+BAAJ,CACE,IAAId,eAAJ,CACE,+DADF,CADF,CADK,CAAP;QAGM;;QAKR,OAAOgB,gBAAgBE,IAAhB,CAAqBR,OAArB,EAA8BO,MAA9B,CAAP;MAAqC,CAXvB,CAAhB;IAWuC,CAZlC,CAAP;EAYyC;;AAxC5B;;AA8CjB,IAAOE,sBAAQC,UAAf","names":["__export","AsyncQueueError","default","__toModule","import_base_error","constructor","message","name","__publicField","previous","Promise","resolve","closed","rejectCurrent","close","import_connection_error","enqueue","asyncFunction","reject","then","async_queue_default","AsyncQueue"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mssql/async-queue.ts"],"sourcesContent":["import BaseError from '../../errors/base-error';\nimport ConnectionError from '../../errors/connection-error';\n\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\nexport class AsyncQueueError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeAsyncQueueError';\n  }\n}\n\nclass AsyncQueue {\n  previous: Promise<unknown>;\n  closed: boolean;\n  rejectCurrent: (reason?: any) => void;\n\n  constructor() {\n    this.previous = Promise.resolve();\n    this.closed = false;\n    this.rejectCurrent = () => {\n      /** do nothing */\n    };\n  }\n\n  close() {\n    this.closed = true;\n    this.rejectCurrent(\n      new ConnectionError(\n        new AsyncQueueError(\n          'the connection was closed before this query could finish executing'\n        )\n      )\n    );\n  }\n\n  enqueue(asyncFunction: (...args: any[]) => Promise<unknown>) {\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\n    // always keep going, while still communicating rejection from asyncFunction to the user.\n    return new Promise((resolve, reject) => {\n      this.previous = this.previous.then(() => {\n        this.rejectCurrent = reject;\n        if (this.closed) {\n          return reject(\n            new ConnectionError(\n              new AsyncQueueError(\n                'the connection was closed before this query could be executed'\n              )\n            )\n          );\n        }\n        return asyncFunction().then(resolve, reject);\n      });\n    });\n  }\n}\n\nexport default AsyncQueue;\n"]},"metadata":{},"sourceType":"script"}