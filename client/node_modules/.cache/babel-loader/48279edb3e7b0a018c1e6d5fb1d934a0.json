{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\n__export(exports, {\n  default: () => query_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nclass QueryError extends import_base_error.default {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeQueryError\";\n  }\n\n}\n\nvar query_error_default = QueryError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;AAAA;;AAAA,wBAAsBC,mCAAtB;;AAKA,yBAAyBC,yBAAzB,CAAmC;EACjCC,YAAYC,OAAZ,EAA6B;IAC3B,MAAMA,OAAN;IACA,KAAKC,IAAL,GAAY,qBAAZ;EAAY;;AAHmB;;AAOnC,IAAOC,sBAAQC,UAAf","names":["__export","default","__toModule","import_base_error","constructor","message","name","query_error_default","QueryError"],"sources":["/Users/aurele/node_modules/sequelize/src/errors/query-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * Thrown when a query is passed invalid options (see message for details)\n */\nclass QueryError extends BaseError {\n  constructor(message: string) {\n    super(message);\n    this.name = 'SequelizeQueryError';\n  }\n}\n\nexport default QueryError;\n"]},"metadata":{},"sourceType":"script"}