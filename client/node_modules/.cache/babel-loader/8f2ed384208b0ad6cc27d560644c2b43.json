{"ast":null,"code":"import { baseUrl } from \"./baseUrl\";\nexport const getUser = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/account`, {\n      method: \"GET\",\n      headers: {\n        token: localStorage.token\n      } //we send the token in the header, back-end middleware receives req.header(\"token\")\n\n    });\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const updateUser = async (first_name, last_name, id) => {\n  try {\n    const body = {\n      first_name,\n      last_name\n    };\n    const result = await fetch(`${baseUrl}/users/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const res = await result.json();\n    return res;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const updateUserPassword = async (password, id) => {\n  try {\n    const body = {\n      currentPassword: password.currentPassword,\n      newPassword: password.newPassword\n    };\n    const response = await fetch(`${baseUrl}/auth/edit/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {}\n};\n\nconst submitPassword = async e => {\n  e.preventDefault();\n  const {\n    currentPassword,\n    newPassword,\n    confirmPassword\n  } = passwords;\n\n  if (!currentPassword || !newPassword || !confirmPassword) {\n    toast.error(\"Missing fields\");\n  } else if (newPassword !== confirmPassword) {\n    toast.error(\"Passwords don't match\");\n  } else try {\n    const body = {\n      currentPassword: currentPassword,\n      newPassword: newPassword\n    };\n    const response = await fetch(`${baseUrl}/auth/edit/${user.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await response.json();\n\n    if (response.status === 401 && data === \"Incorrect password\") {\n      toast.error(\"Incorrect Password\");\n    } else if (response.status === 200) {\n      toast.success(\"Password changed successfully!\");\n      setPasswords({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n      });\n    }\n  } catch (err) {\n    console.error(err.message);\n  }\n};","map":{"version":3,"names":["baseUrl","getUser","response","fetch","method","headers","token","localStorage","data","json","err","console","error","message","updateUser","first_name","last_name","id","body","result","JSON","stringify","res","updateUserPassword","password","currentPassword","newPassword","submitPassword","e","preventDefault","confirmPassword","passwords","toast","user","status","success","setPasswords"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/src/api/user.js"],"sourcesContent":["import { baseUrl } from \"./baseUrl\";\n\nexport const getUser = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/account`, {\n      method: \"GET\",\n      headers: { token: localStorage.token }, //we send the token in the header, back-end middleware receives req.header(\"token\")\n    });\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\nexport const updateUser = async (first_name, last_name, id) => {\n  try {\n    const body = { first_name, last_name };\n    const result = await fetch(`${baseUrl}/users/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    }); \n    const res = await result.json();\n    return res;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\nexport const updateUserPassword = async (password, id) => {\n  try {\n    const body = {\n      currentPassword: password.currentPassword,\n      newPassword: password.newPassword,\n    };\n    const response = await fetch(`${baseUrl}/auth/edit/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    \n  }\n}\n\nconst submitPassword = async (e) => {\n  e.preventDefault();\n  const { currentPassword, newPassword, confirmPassword } = passwords;\n  if (!currentPassword || !newPassword || !confirmPassword) {\n    toast.error(\"Missing fields\");\n  } else if (newPassword !== confirmPassword) {\n    toast.error(\"Passwords don't match\");\n  } else\n    try {\n      const body = {\n        currentPassword: currentPassword,\n        newPassword: newPassword,\n      };\n      const response = await fetch(`${baseUrl}/auth/edit/${user.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      });\n      const data = await response.json();\n\n      if (response.status === 401 && data === \"Incorrect password\") {\n        toast.error(\"Incorrect Password\");\n      } else if (response.status === 200) {\n        toast.success(\"Password changed successfully!\");\n        setPasswords({\n          currentPassword: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\",\n        });\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}