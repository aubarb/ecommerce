{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mysql\");\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection.query({\n            sql\n          }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n\n        options.transaction.finished = \"rollback\";\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2].split(\".\").pop() : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,gBAAgBC,QAAQ,mBAAR,CAAtB;;AACA,MAAMC,kBAAkBD,QAAQ,cAAR,CAAxB;;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;;AACA,MAAM;EAAEG;AAAF,IAAaH,QAAQ,oBAAR,CAAnB;;AAEA,MAAMI,eAAe,IAArB;AACA,MAAMC,cAAc,IAApB;AACA,MAAMC,uBAAuB,IAA7B;AACA,MAAMC,uBAAuB,IAA7B;AAEA,MAAMC,QAAQL,OAAOM,YAAP,CAAoB,WAApB,CAAd;;AAEA,oBAAoBV,aAApB,CAAkC;EAChCW,YAAYC,UAAZ,EAAwBC,SAAxB,EAAmCC,OAAnC,EAA4C;IAC1C,MAAMF,UAAN,EAAkBC,SAAlB,EAA6BE;MAAEC,cAAc;IAAhB,GAA0BF,OAA1B,CAA7B;EAAuD;;EAGlD,4BAAqBG,GAArB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;IAChD,MAAMC,YAAY,EAAlB;;IACA,MAAMC,kBAAkB,CAACC,KAAD,EAAQC,GAAR,EAAaC,OAAb,KAAyB;MAC/C,IAAIA,QAAQD,GAAR,MAAiB,MAArB,EAAgC;QAC9BH,UAAUK,IAAV,CAAeD,QAAQD,GAAR,CAAf;QACA,OAAO,GAAP;MAAO;;MAET,OAAO,MAAP;IAAO,CALT;;IAOAN,MAAMjB,cAAc0B,oBAAd,CAAmCT,GAAnC,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyDE,eAAzD,EAA0E,CAA1E,CAAN;IACA,OAAO,CAACJ,GAAD,EAAMG,UAAUO,MAAV,GAAmB,CAAnB,GAAuBP,SAAvB,GAAmC,MAAzC,CAAP;EAAgD;;EAG5C,UAAIH,GAAJ,EAASW,UAAT,EAAqB;IACzB,KAAKX,GAAL,GAAWA,GAAX;IACA,MAAM;MAAEL,UAAF;MAAcE;IAAd,IAA0B,IAAhC;IAEA,MAAME,eAAe,KAAKH,SAAL,CAAeC,OAAf,CAAuBE,YAAvB,IAAuCF,QAAQE,YAApE;;IAEA,MAAMa,WAAW,KAAKC,SAAL,CAAeb,GAAf,EAAoBR,KAApB,EAA2BmB,UAA3B,CAAjB;;IAEA,IAAIA,UAAJ,EAAgB;MACdnB,MAAM,gBAAN,EAAwBmB,UAAxB;IAAwB;;IAG1B,IAAIG,OAAJ;IACA,MAAMC,cAAc,IAAIC,KAAJ,EAApB;;IAEA,IAAI;MACF,IAAIL,cAAcA,WAAWD,MAA7B,EAAqC;QACnCI,UAAU,MAAM,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UAC/CxB,WACGyB,OADH,CACWpB,GADX,EACgBW,UADhB,EAC4B,CAACU,KAAD,EAAQC,MAAR,KAAmBD,QAAQF,OAAOE,KAAP,CAAR,GAAwBH,QAAQI,MAAR,CADvE,EAEGC,eAFH,CAEmB,GAFnB;QAEmB,CAHL,CAAhB;MAGqB,CAJvB,MAMO;QACLT,UAAU,MAAM,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UAC/CxB,WACG6B,KADH,CACS;YAAExB;UAAF,CADT,EACkB,CAACqB,KAAD,EAAQC,MAAR,KAAmBD,QAAQF,OAAOE,KAAP,CAAR,GAAwBH,QAAQI,MAAR,CAD7D,EAEGC,eAFH,CAEmB,GAFnB;QAEmB,CAHL,CAAhB;MAGqB;IAAA,CAXzB,CAWyB,OAGhBF,KAHgB,EAGvB;MACA,IAAIxB,QAAQ4B,WAAR,IAAuBJ,MAAMK,KAAN,KAAgBrC,WAA3C,EAAwD;QAGtD,IAAI;UACF,MAAMQ,QAAQ4B,WAAR,CAAoBE,QAApB,EAAN;QAA0B,CAD5B,CAC4B,OACnBC,MADmB,EAC1B;;QAKF/B,QAAQ4B,WAAR,CAAoBI,QAApB,GAA+B,UAA/B;MAA+B;;MAGjCR,MAAMrB,GAAN,GAAYA,GAAZ;MACAqB,MAAMV,UAAN,GAAmBA,UAAnB;MACA,MAAM,KAAKmB,WAAL,CAAiBT,KAAjB,EAAwBN,YAAYgB,KAApC,CAAN;IAA0C,CA9B5C,SA+BE;MACAnB;IAAA;;IAGF,IAAIb,gBAAgBe,OAAhB,IAA2BA,QAAQkB,aAAR,GAAwB,CAAvD,EAA0D;MACxD,MAAM,KAAKC,WAAL,CAAiBnB,OAAjB,CAAN;IAAuB;;IAEzB,OAAO,KAAKoB,aAAL,CAAmBpB,OAAnB,CAAP;EAA0B;;EAoB5BoB,cAAcC,IAAd,EAAoB;IAClB,IAAIb,SAAS,KAAKc,QAAlB;;IAEA,IAAI,KAAKC,aAAL,CAAmBF,IAAnB,CAAJ,EAA8B;MAC5B,KAAKG,iBAAL,CAAuBH,IAAvB;;MAEA,IAAI,CAAC,KAAKC,QAAV,EAAoB;QAElB,IACED,KAAKzC,WAAL,CAAiB6C,IAAjB,KAA0B,iBAA1B,IACG,KAAKC,KADR,IAEG,KAAKA,KAAL,CAAWC,sBAFd,IAGG,KAAKD,KAAL,CAAWC,sBAAX,KAAsC,KAAKD,KAAL,CAAWE,mBAHpD,IAIG,KAAKF,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWE,mBAApC,CALL,EAME;UACA,MAAME,UAAUT,KAAK,KAAKU,gBAAL,EAAL,CAAhB;UACAvB,SAAS,EAAT;;UACA,SAASwB,IAAIF,OAAb,EAAsBE,IAAIF,UAAUT,KAAKY,YAAzC,EAAuDD,GAAvD,EAA4D;YAC1DxB,OAAOd,IAAP,CAAY;cAAA,CAAG,KAAKgC,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWE,mBAApC,EAAyDM,KAA5D,GAAoEF;YAApE,CAAZ;UAAgF;QAAA,CAVpF,MAYO;UACLxB,SAASa,KAAK,KAAKU,gBAAL,EAAL,CAAT;QAAmB;MAAA;IAAA;;IAKzB,IAAI,KAAKI,aAAL,EAAJ,EAA0B;MACxB,OAAO,KAAKC,iBAAL,CAAuBf,IAAvB,CAAP;IAA8B;;IAEhC,IAAI,KAAKgB,iBAAL,EAAJ,EAA8B;MAC5B,OAAO,KAAKC,qBAAL,CAA2BjB,IAA3B,CAAP;IAAkC;;IAEpC,IAAI,KAAKkB,eAAL,EAAJ,EAA4B;MAC1B/B,SAAS,EAAT;;MAEA,WAAWgC,OAAX,IAAsBnB,IAAtB,EAA4B;QAC1B,MAAMoB,YAAY,QAAlB;QACAjC,OAAOgC,QAAQE,KAAf,IAAwB;UACtBC,MAAMF,UAAUG,IAAV,CAAeJ,QAAQK,IAAvB,IAA+BL,QAAQK,IAAR,CAAaC,OAAb,CAAqBL,SAArB,EAAgC,MAAhC,CAA/B,GAAyED,QAAQK,IAAR,CAAaE,WAAb,EADzD;UAEtBC,WAAWR,QAAQS,IAAR,KAAiB,KAFN;UAGtBC,cAAcV,QAAQW,OAHA;UAItBC,YAAYZ,QAAQa,GAAR,KAAgB,KAJN;UAKtBC,eAAeC,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqClB,OAArC,EAA8C,OAA9C,KACVA,QAAQmB,KAAR,CAAcC,WAAd,OAAgC,gBANf;UAOtBC,SAASrB,QAAQsB,OAAR,GAAkBtB,QAAQsB,OAA1B,GAAoC;QAPvB,CAAxB;MAO+C;;MAGjD,OAAOtD,MAAP;IAAO;;IAET,IAAI,KAAKuD,kBAAL,EAAJ,EAA+B;MAC7B,OAAO,KAAKC,sBAAL,CAA4B3C,IAA5B,CAAP;IAAmC;;IAErC,IAAI,KAAK4C,WAAL,EAAJ,EAAwB;MACtB,OAAO5C,KAAK,CAAL,CAAP;IAAY;;IAEd,IAAI,KAAK6C,iBAAL,MAA4B,KAAKC,iBAAL,EAAhC,EAA0D;MACxD,OAAO9C,KAAKY,YAAZ;IAAY;;IAEd,IAAI,KAAKmC,cAAL,EAAJ,EAA2B;MACzB,OAAO/C,KAAK,CAAL,EAAQgD,OAAf;IAAe;;IAEjB,IAAI,KAAKC,kBAAL,EAAJ,EAA+B;MAC7B,OAAOjD,IAAP;IAAO;;IAET,IAAI,KAAKkD,aAAL,EAAJ,EAA0B;MACxB,OAAO,CAAC/D,MAAD,EAASa,KAAKY,YAAL,KAAsB,CAA/B,CAAP;IAAsC;;IAExC,IAAI,KAAKV,aAAL,MAAwB,KAAKiD,aAAL,EAA5B,EAAkD;MAChD,OAAO,CAAChE,MAAD,EAASa,KAAKY,YAAd,CAAP;IAAqB;;IAEvB,IAAI,KAAKwC,sBAAL,EAAJ,EAAmC;MACjC,OAAOpD,IAAP;IAAO;;IAET,IAAI,KAAKqD,UAAL,EAAJ,EAAuB;MAErB,OAAO,CAACrD,IAAD,EAAOA,IAAP,CAAP;IAAc;;IAGhB,OAAOb,MAAP;EAAO;;EAGH,kBAAYR,OAAZ,EAAqB;IACzB,MAAM2E,iBAAiB,MAAM,KAAKC,GAAL,CAAS,eAAT,CAA7B;IACA,MAAMC,iBAAiB,mBAAmB,KAAKhG,UAAL,CAAgBiG,IAAhB,IAAwB,cAAlE;IACA,MAAMC,WAAW,EAAjB;;IACA,WAAWC,WAAX,IAA0BL,cAA1B,EAA0C;MACxC,IAAIK,gBAAgB,MAAhB,IAA6B,OAAOA,YAAYC,OAAOC,QAAnB,CAAP,KAAwC,UAAzE,EAAqF;QACnF;MAAA;;MAEF,WAAWC,cAAX,IAA6BH,WAA7B,EAA0C;QACxC,IAAIzB,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCyB,cAArC,EAAqD,SAArD,CAAJ,EAAqE;UACnEJ,SAASrF,IAAT,CAAcyF,eAAeC,OAA7B;QAA6B,CAD/B,MAEO;UACL,WAAWC,UAAX,IAAyBF,eAAeG,IAAf,EAAzB,EAAgD;YAC9CP,SAASrF,IAAT,CAAc,CAAC2F,UAAD,EAAaF,eAAeE,UAAf,CAAb,EAAyCE,IAAzC,CAA8C,IAA9C,CAAd;UAA4D;QAAA;MAAA;IAAA;;IAMpE,KAAKzG,SAAL,CAAe0G,GAAf,CAAmBX,iBAAiBE,SAASQ,IAAT,CAAc,IAAd,CAApC,EAAyD,KAAKxG,OAA9D;IAEA,OAAOiB,OAAP;EAAO;;EAGTgB,YAAYyE,GAAZ,EAAiBC,QAAjB,EAA2B;IACzB,MAAMC,UAAUF,IAAI7E,KAAJ,IAAa6E,IAAIG,IAAjC;;IAEA,QAAQD,OAAR;MAAQ,KACDrH,YADC;QACa;UACjB,MAAMiB,QAAQkG,IAAII,OAAJ,CAAYtG,KAAZ,CAAkB,qDAAlB,CAAd;UACA,IAAIuG,SAAS,EAAb;UACA,IAAID,UAAU,kBAAd;UACA,MAAM1G,SAASI,QAAQA,MAAM,CAAN,EAASwG,KAAT,CAAe,GAAf,CAAR,GAA8B,MAA7C;UACA,MAAMC,WAAWzG,QAAQA,MAAM,CAAN,EAASwG,KAAT,CAAe,GAAf,EAAoBE,GAApB,EAAR,GAAoC,MAArD;UACA,MAAMC,WAAW3G,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAApC;UACA,MAAM4G,YAAY,KAAKzE,KAAL,IAAc,KAAKA,KAAL,CAAW0E,UAAX,CAAsBJ,QAAtB,CAAhC;;UAEA,IAAIG,SAAJ,EAAe;YACb,IAAIA,UAAUE,GAAd,EAAmBR,UAAUM,UAAUE,GAApB;YACnBP,SAAS1H,EAAEkI,SAAF,CAAYH,UAAUL,MAAtB,EAA8B3G,MAA9B,CAAT;UAAuC,CAFzC,MAGO;YACL2G,OAAOE,QAAP,IAAmBE,QAAnB;UAAmB;;UAGrB,MAAMK,SAAS,EAAf;;UACAnI,EAAEoI,MAAF,CAASV,MAAT,EAAiB,CAACW,KAAD,EAAQvE,KAAR,KAAkB;YACjCqE,OAAO7G,IAAP,CAAY,IAAIvB,gBAAgBuI,mBAApB,CACV,KAAKC,+BAAL,CAAqCzE,KAArC,CADU,EAEV,kBAFU,EAGVA,KAHU,EAIVuE,KAJU,EAKV,KAAKnF,QALK,EAMV,YANU,CAAZ;UAME,CAPJ;;UAWA,OAAO,IAAInD,gBAAgByI,qBAApB,CAA0C;YAAEf,OAAF;YAAWU,MAAX;YAAmBM,QAAQpB,GAA3B;YAAgCK,MAAhC;YAAwC7E,OAAOyE;UAA/C,CAA1C,CAAP;QAAgG;;MAAA,KAG7FlH,oBAH6F;MAG7F,KACAC,oBADA;QACsB;UAEzB,MAAMc,QAAQkG,IAAII,OAAJ,CAAYtG,KAAZ,CACZ,mFADY,CAAd;UAGA,MAAMuH,YAAYvH,QAAQA,MAAM,CAAN,CAAR,GAAmB,GAArC;UACA,MAAMuG,SAASvG,QAAQA,MAAM,CAAN,EAASwG,KAAT,CAAe,IAAIgB,MAAJ,CAAW,GAAGD,eAAeA,WAA7B,CAAf,CAAR,GAAoE,MAAnF;UAEA,OAAO,IAAI3I,gBAAgB6I,yBAApB,CAA8C;YACnDC,SAASC,OAAOvB,OAAP,MAAoBuB,OAAO1I,oBAAP,CAApB,GAAmD,QAAnD,GAA8D,OADpB;YAEnD2I,OAAO5H,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAFyB;YAGnDuG,MAHmD;YAInDW,OAAOX,UAAUA,OAAOlG,MAAjB,IAA2B,KAAK0B,QAAhC,IAA4C,KAAKA,QAAL,CAAcwE,OAAO,CAAP,CAAd,CAA5C,IAAwE,MAJ5B;YAKnDsB,OAAO7H,QAAQA,MAAM,CAAN,CAAR,GAAmB,MALyB;YAMnDsH,QAAQpB,GAN2C;YAOnDxE,OAAOyE;UAP4C,CAA9C,CAAP;QAOS;;MAAA;QAKT,OAAO,IAAIvH,gBAAgBkJ,aAApB,CAAkC5B,GAAlC,EAAuC;UAAExE,OAAOyE;QAAT,CAAvC,CAAP;IArDJ;EAqD2D;;EAI7D1B,uBAAuB3C,IAAvB,EAA6B;IAE3BA,OAAOA,KAAKiG,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,KAAe;MAChC,IAAI,EAAEA,KAAKC,QAAL,IAAiBF,GAAnB,CAAJ,EAA6B;QAC3BA,IAAIC,KAAKC,QAAT,IAAqBD,IAArB;QACAA,KAAK1B,MAAL,GAAc,EAAd;MAAc;;MAGhByB,IAAIC,KAAKC,QAAT,EAAmB3B,MAAnB,CAA0B0B,KAAKE,YAAL,GAAoB,CAA9C,IAAmD;QACjDC,WAAWH,KAAKI,WADiC;QAEjDhI,QAAQ4H,KAAKK,QAAL,IAAiB,MAFwB;QAGjDC,OAAON,KAAKO,SAAL,KAAmB,GAAnB,GAAyB,KAAzB,GAAiC;MAHS,CAAnD;MAKA,OAAOP,KAAKQ,WAAZ;MAEA,OAAOT,GAAP;IAAO,CAbF,EAcJ,EAdI,CAAP;IAgBA,OAAOnJ,EAAE6J,GAAF,CAAM5G,IAAN,EAAYmG,SAAS;MAC1BU,SAASV,KAAKC,QAAL,KAAkB,SADD;MAE1B3B,QAAQ0B,KAAK1B,MAFa;MAG1BrE,MAAM+F,KAAKC,QAHe;MAI1BU,WAAWX,KAAKY,KAJU;MAK1BC,QAAQb,KAAKc,UAAL,KAAoB,CALF;MAM1B3F,MAAM6E,KAAKe;IANe,CAAT,CAAZ,CAAP;EAMa;;AAxRiB;;AA6RlCC,OAAOC,OAAP,GAAiBC,KAAjB;AACAF,OAAOC,OAAP,CAAeC,KAAf,GAAuBA,KAAvB;AACAF,OAAOC,OAAP,CAAeE,OAAf,GAAyBD,KAAzB","names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","constructor","connection","sequelize","options","__spreadValues","showWarnings","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","formatBindParameters","length","parameters","complete","_logQuery","results","errForStack","Error","Promise","resolve","reject","execute","error","result","setMaxListeners","query","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","instance","isInsertQuery","handleInsertQuery","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","run","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","err","errStack","errCode","code","message","fields","split","fieldKey","pop","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","Query","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mysql/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}