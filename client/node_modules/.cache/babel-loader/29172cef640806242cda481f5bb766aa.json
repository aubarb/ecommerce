{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  default: () => optimistic_lock_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nclass OptimisticLockError extends import_base_error.default {\n  constructor(options) {\n    options = options || {};\n    options.message = options.message || `Attempting to update a stale model instance: ${options.modelName}`;\n    super(options.message);\n\n    __publicField(this, \"modelName\");\n\n    __publicField(this, \"values\");\n\n    __publicField(this, \"where\");\n\n    this.name = \"SequelizeOptimisticLockError\";\n    this.modelName = options.modelName;\n    this.values = options.values;\n    this.where = options.where;\n  }\n\n}\n\nvar optimistic_lock_error_default = OptimisticLockError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;AAAA;;AAAA,wBAAsBC,mCAAtB;;AAgBA,kCAAkCC,yBAAlC,CAA4C;EAK1CC,YAAYC,OAAZ,EAAiD;IAC/CA,UAAUA,WAAW,EAArB;IACAA,QAAQC,OAAR,GACED,QAAQC,OAAR,IACA,gDAAgDD,QAAQE,WAF1D;IAIA,MAAMF,QAAQC,OAAd;;IAVFE;;IACAA;;IACAA;;IASE,KAAKC,IAAL,GAAY,8BAAZ;IACA,KAAKF,SAAL,GAAiBF,QAAQE,SAAzB;IACA,KAAKG,MAAL,GAAcL,QAAQK,MAAtB;IACA,KAAKC,KAAL,GAAaN,QAAQM,KAArB;EAAqB;;AAfmB;;AAmB5C,IAAOC,gCAAQC,mBAAf","names":["__export","default","__toModule","import_base_error","constructor","options","message","modelName","__publicField","name","values","where","optimistic_lock_error_default","OptimisticLockError"],"sources":["/Users/aurele/node_modules/sequelize/src/errors/optimistic-lock-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\ninterface OptimisticLockErrorOptions {\n  message?: string;\n\n  /** The name of the model on which the update was attempted */\n  modelName?: string;\n\n  /** The values of the attempted update */\n  values?: Record<string, unknown>;\n  where?: Record<string, unknown>;\n}\n\n/**\n * Thrown when attempting to update a stale model instance\n */\nclass OptimisticLockError extends BaseError {\n  modelName: string | undefined;\n  values: Record<string, unknown> | undefined;\n  where: Record<string, unknown> | undefined;\n\n  constructor(options: OptimisticLockErrorOptions) {\n    options = options || {};\n    options.message =\n      options.message ||\n      `Attempting to update a stale model instance: ${options.modelName}`;\n\n    super(options.message);\n    this.name = 'SequelizeOptimisticLockError';\n    this.modelName = options.modelName;\n    this.values = options.values;\n    this.where = options.where;\n  }\n}\n\nexport default OptimisticLockError;\n"]},"metadata":{},"sourceType":"script"}