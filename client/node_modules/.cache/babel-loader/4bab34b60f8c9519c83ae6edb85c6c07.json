{"ast":null,"code":"\"use strict\";\n\nclass AbstractDialect {\n  canBackslashEscape() {\n    return false;\n  }\n\n}\n\nAbstractDialect.prototype.supports = {\n  \"DEFAULT\": true,\n  \"DEFAULT VALUES\": false,\n  \"VALUES ()\": false,\n  \"LIMIT ON UPDATE\": false,\n  \"ON DUPLICATE KEY\": true,\n  \"ORDER NULLS\": false,\n  \"UNION\": true,\n  \"UNION ALL\": true,\n  \"RIGHT JOIN\": true,\n  returnValues: false,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: true,\n    update: true\n  },\n  bulkDefault: false,\n  schemas: false,\n  transactions: true,\n  settingIsolationLevelDuringTransaction: true,\n  transactionOptions: {\n    type: false\n  },\n  migrations: true,\n  upserts: true,\n  inserts: {\n    ignoreDuplicates: \"\",\n    updateOnDuplicate: false,\n    onConflictDoNothing: \"\",\n    conflictFields: false\n  },\n  constraints: {\n    restrict: true,\n    addConstraint: true,\n    dropConstraint: true,\n    unique: true,\n    default: false,\n    check: true,\n    foreignKey: true,\n    primaryKey: true\n  },\n  index: {\n    collate: true,\n    length: false,\n    parser: false,\n    concurrently: false,\n    type: false,\n    using: true,\n    functionBased: false,\n    operator: false\n  },\n  groupedLimit: true,\n  indexViaAlter: false,\n  JSON: false,\n  deferrableConstraints: false,\n  escapeStringConstants: false\n};\nmodule.exports = AbstractDialect;\nmodule.exports.AbstractDialect = AbstractDialect;\nmodule.exports.default = AbstractDialect;","map":{"version":3,"mappings":";;AAEA,sBAAsB;EAMpBA,qBAAqB;IACnB,OAAO,KAAP;EAAO;;AAPW;;AAWtBC,gBAAgBC,SAAhB,CAA0BC,QAA1B,GAAqC;EACnC,WAAW,IADwB;EAEnC,kBAAkB,KAFiB;EAGnC,aAAa,KAHsB;EAInC,mBAAmB,KAJgB;EAKnC,oBAAoB,IALe;EAMnC,eAAe,KANoB;EAOnC,SAAS,IAP0B;EAQnC,aAAa,IARsB;EASnC,cAAc,IATqB;EAYnCC,cAAc,KAZqB;EAenCC,eAAe;IAEbC,gBAAgB,KAFH;IAKbC,cAAc,IALD;IAQbC,QAAQ;EARK,CAfoB;EA0BnCC,aAAa,KA1BsB;EA2BnCC,SAAS,KA3B0B;EA4BnCC,cAAc,IA5BqB;EA6BnCC,wCAAwC,IA7BL;EA8BnCC,oBAAoB;IAClBC,MAAM;EADY,CA9Be;EAiCnCC,YAAY,IAjCuB;EAkCnCC,SAAS,IAlC0B;EAmCnCC,SAAS;IACPC,kBAAkB,EADX;IAEPC,mBAAmB,KAFZ;IAGPC,qBAAqB,EAHd;IAIPC,gBAAgB;EAJT,CAnC0B;EAyCnCC,aAAa;IACXC,UAAU,IADC;IAEXC,eAAe,IAFJ;IAGXC,gBAAgB,IAHL;IAIXC,QAAQ,IAJG;IAKXC,SAAS,KALE;IAMXC,OAAO,IANI;IAOXC,YAAY,IAPD;IAQXC,YAAY;EARD,CAzCsB;EAmDnCC,OAAO;IACLC,SAAS,IADJ;IAELC,QAAQ,KAFH;IAGLC,QAAQ,KAHH;IAILC,cAAc,KAJT;IAKLrB,MAAM,KALD;IAMLsB,OAAO,IANF;IAOLC,eAAe,KAPV;IAQLC,UAAU;EARL,CAnD4B;EA6DnCC,cAAc,IA7DqB;EA8DnCC,eAAe,KA9DoB;EA+DnCC,MAAM,KA/D6B;EAoEnCC,uBAAuB,KApEY;EAqEnCC,uBAAuB;AArEY,CAArC;AAwEAC,OAAOC,OAAP,GAAiB5C,eAAjB;AACA2C,OAAOC,OAAP,CAAe5C,eAAf,GAAiCA,eAAjC;AACA2C,OAAOC,OAAP,CAAelB,OAAf,GAAyB1B,eAAzB","names":["canBackslashEscape","AbstractDialect","prototype","supports","returnValues","autoIncrement","identityInsert","defaultValue","update","bulkDefault","schemas","transactions","settingIsolationLevelDuringTransaction","transactionOptions","type","migrations","upserts","inserts","ignoreDuplicates","updateOnDuplicate","onConflictDoNothing","conflictFields","constraints","restrict","addConstraint","dropConstraint","unique","default","check","foreignKey","primaryKey","index","collate","length","parser","concurrently","using","functionBased","operator","groupedLimit","indexViaAlter","JSON","deferrableConstraints","escapeStringConstants","module","exports"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/abstract/index.js"],"sourcesContent":["'use strict';\n\nclass AbstractDialect {\n  /**\n   * Whether this dialect can use \\ in strings to escape string delimiters.\n   *\n   * @returns {boolean}\n   */\n  canBackslashEscape() {\n    return false;\n  }\n}\n\nAbstractDialect.prototype.supports = {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ON DUPLICATE KEY': true,\n  'ORDER NULLS': false,\n  'UNION': true,\n  'UNION ALL': true,\n  'RIGHT JOIN': true,\n\n  /* does the dialect support returning values for inserted/updated fields */\n  returnValues: false,\n\n  /* features specific to autoIncrement values */\n  autoIncrement: {\n    /* does the dialect require modification of insert queries when inserting auto increment fields */\n    identityInsert: false,\n\n    /* does the dialect support inserting default/null values for autoincrement fields */\n    defaultValue: true,\n\n    /* does the dialect support updating autoincrement fields */\n    update: true\n  },\n  /* Do we need to say DEFAULT for bulk insert */\n  bulkDefault: false,\n  schemas: false,\n  transactions: true,\n  settingIsolationLevelDuringTransaction: true,\n  transactionOptions: {\n    type: false\n  },\n  migrations: true,\n  upserts: true,\n  inserts: {\n    ignoreDuplicates: '', /* dialect specific words for INSERT IGNORE or DO NOTHING */\n    updateOnDuplicate: false, /* whether dialect supports ON DUPLICATE KEY UPDATE */\n    onConflictDoNothing: '', /* dialect specific words for ON CONFLICT DO NOTHING */\n    conflictFields: false /* whether the dialect supports specifying conflict fields or not */\n  },\n  constraints: {\n    restrict: true,\n    addConstraint: true,\n    dropConstraint: true,\n    unique: true,\n    default: false,\n    check: true,\n    foreignKey: true,\n    primaryKey: true\n  },\n  index: {\n    collate: true,\n    length: false,\n    parser: false,\n    concurrently: false,\n    type: false,\n    using: true,\n    functionBased: false,\n    operator: false\n  },\n  groupedLimit: true,\n  indexViaAlter: false,\n  JSON: false,\n  /**\n   * This dialect supports marking a column's constraints as deferrable.\n   * e.g. 'DEFERRABLE' and 'INITIALLY DEFERRED'\n   */\n  deferrableConstraints: false,\n  escapeStringConstants: false\n};\n\nmodule.exports = AbstractDialect;\nmodule.exports.AbstractDialect = AbstractDialect;\nmodule.exports.default = AbstractDialect;\n"]},"metadata":{},"sourceType":"script"}