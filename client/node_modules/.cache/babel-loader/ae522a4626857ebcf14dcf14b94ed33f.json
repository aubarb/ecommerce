{"ast":null,"code":"'use strict'; // A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\nclass PackJob {\n  constructor(path, absolute) {\n    this.path = path || './';\n    this.absolute = absolute;\n    this.entry = null;\n    this.stat = null;\n    this.readdir = null;\n    this.pending = false;\n    this.ignore = false;\n    this.piped = false;\n  }\n\n}\n\nconst MiniPass = require('minipass');\n\nconst zlib = require('minizlib');\n\nconst ReadEntry = require('./read-entry.js');\n\nconst WriteEntry = require('./write-entry.js');\n\nconst WriteEntrySync = WriteEntry.Sync;\nconst WriteEntryTar = WriteEntry.Tar;\n\nconst Yallist = require('yallist');\n\nconst EOF = Buffer.alloc(1024);\nconst ONSTAT = Symbol('onStat');\nconst ENDED = Symbol('ended');\nconst QUEUE = Symbol('queue');\nconst CURRENT = Symbol('current');\nconst PROCESS = Symbol('process');\nconst PROCESSING = Symbol('processing');\nconst PROCESSJOB = Symbol('processJob');\nconst JOBS = Symbol('jobs');\nconst JOBDONE = Symbol('jobDone');\nconst ADDFSENTRY = Symbol('addFSEntry');\nconst ADDTARENTRY = Symbol('addTarEntry');\nconst STAT = Symbol('stat');\nconst READDIR = Symbol('readdir');\nconst ONREADDIR = Symbol('onreaddir');\nconst PIPE = Symbol('pipe');\nconst ENTRY = Symbol('entry');\nconst ENTRYOPT = Symbol('entryOpt');\nconst WRITEENTRYCLASS = Symbol('writeEntryClass');\nconst WRITE = Symbol('write');\nconst ONDRAIN = Symbol('ondrain');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst warner = require('./warn-mixin.js');\n\nconst normPath = require('./normalize-windows-path.js');\n\nconst Pack = warner(class Pack extends MiniPass {\n  constructor(opt) {\n    super(opt);\n    opt = opt || Object.create(null);\n    this.opt = opt;\n    this.file = opt.file || '';\n    this.cwd = opt.cwd || process.cwd();\n    this.maxReadSize = opt.maxReadSize;\n    this.preservePaths = !!opt.preservePaths;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.prefix = normPath(opt.prefix || '');\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.readdirCache = opt.readdirCache || new Map();\n    this[WRITEENTRYCLASS] = WriteEntry;\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn);\n    }\n\n    this.portable = !!opt.portable;\n    this.zip = null;\n\n    if (opt.gzip) {\n      if (typeof opt.gzip !== 'object') {\n        opt.gzip = {};\n      }\n\n      if (this.portable) {\n        opt.gzip.portable = true;\n      }\n\n      this.zip = new zlib.Gzip(opt.gzip);\n      this.zip.on('data', chunk => super.write(chunk));\n      this.zip.on('end', _ => super.end());\n      this.zip.on('drain', _ => this[ONDRAIN]());\n      this.on('resume', _ => this.zip.resume());\n    } else {\n      this.on('drain', this[ONDRAIN]);\n    }\n\n    this.noDirRecurse = !!opt.noDirRecurse;\n    this.follow = !!opt.follow;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true;\n    this[QUEUE] = new Yallist();\n    this[JOBS] = 0;\n    this.jobs = +opt.jobs || 4;\n    this[PROCESSING] = false;\n    this[ENDED] = false;\n  }\n\n  [WRITE](chunk) {\n    return super.write(chunk);\n  }\n\n  add(path) {\n    this.write(path);\n    return this;\n  }\n\n  end(path) {\n    if (path) {\n      this.write(path);\n    }\n\n    this[ENDED] = true;\n    this[PROCESS]();\n    return this;\n  }\n\n  write(path) {\n    if (this[ENDED]) {\n      throw new Error('write after end');\n    }\n\n    if (path instanceof ReadEntry) {\n      this[ADDTARENTRY](path);\n    } else {\n      this[ADDFSENTRY](path);\n    }\n\n    return this.flowing;\n  }\n\n  [ADDTARENTRY](p) {\n    const absolute = normPath(path.resolve(this.cwd, p.path)); // in this case, we don't have to wait for the stat\n\n    if (!this.filter(p.path, p)) {\n      p.resume();\n    } else {\n      const job = new PackJob(p.path, absolute, false);\n      job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));\n      job.entry.on('end', _ => this[JOBDONE](job));\n      this[JOBS] += 1;\n      this[QUEUE].push(job);\n    }\n\n    this[PROCESS]();\n  }\n\n  [ADDFSENTRY](p) {\n    const absolute = normPath(path.resolve(this.cwd, p));\n    this[QUEUE].push(new PackJob(p, absolute));\n    this[PROCESS]();\n  }\n\n  [STAT](job) {\n    job.pending = true;\n    this[JOBS] += 1;\n    const stat = this.follow ? 'stat' : 'lstat';\n    fs[stat](job.absolute, (er, stat) => {\n      job.pending = false;\n      this[JOBS] -= 1;\n\n      if (er) {\n        this.emit('error', er);\n      } else {\n        this[ONSTAT](job, stat);\n      }\n    });\n  }\n\n  [ONSTAT](job, stat) {\n    this.statCache.set(job.absolute, stat);\n    job.stat = stat; // now we have the stat, we can filter it.\n\n    if (!this.filter(job.path, stat)) {\n      job.ignore = true;\n    }\n\n    this[PROCESS]();\n  }\n\n  [READDIR](job) {\n    job.pending = true;\n    this[JOBS] += 1;\n    fs.readdir(job.absolute, (er, entries) => {\n      job.pending = false;\n      this[JOBS] -= 1;\n\n      if (er) {\n        return this.emit('error', er);\n      }\n\n      this[ONREADDIR](job, entries);\n    });\n  }\n\n  [ONREADDIR](job, entries) {\n    this.readdirCache.set(job.absolute, entries);\n    job.readdir = entries;\n    this[PROCESS]();\n  }\n\n  [PROCESS]() {\n    if (this[PROCESSING]) {\n      return;\n    }\n\n    this[PROCESSING] = true;\n\n    for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {\n      this[PROCESSJOB](w.value);\n\n      if (w.value.ignore) {\n        const p = w.next;\n        this[QUEUE].removeNode(w);\n        w.next = p;\n      }\n    }\n\n    this[PROCESSING] = false;\n\n    if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n      if (this.zip) {\n        this.zip.end(EOF);\n      } else {\n        super.write(EOF);\n        super.end();\n      }\n    }\n  }\n\n  get [CURRENT]() {\n    return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;\n  }\n\n  [JOBDONE](job) {\n    this[QUEUE].shift();\n    this[JOBS] -= 1;\n    this[PROCESS]();\n  }\n\n  [PROCESSJOB](job) {\n    if (job.pending) {\n      return;\n    }\n\n    if (job.entry) {\n      if (job === this[CURRENT] && !job.piped) {\n        this[PIPE](job);\n      }\n\n      return;\n    }\n\n    if (!job.stat) {\n      if (this.statCache.has(job.absolute)) {\n        this[ONSTAT](job, this.statCache.get(job.absolute));\n      } else {\n        this[STAT](job);\n      }\n    }\n\n    if (!job.stat) {\n      return;\n    } // filtered out!\n\n\n    if (job.ignore) {\n      return;\n    }\n\n    if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n      if (this.readdirCache.has(job.absolute)) {\n        this[ONREADDIR](job, this.readdirCache.get(job.absolute));\n      } else {\n        this[READDIR](job);\n      }\n\n      if (!job.readdir) {\n        return;\n      }\n    } // we know it doesn't have an entry, because that got checked above\n\n\n    job.entry = this[ENTRY](job);\n\n    if (!job.entry) {\n      job.ignore = true;\n      return;\n    }\n\n    if (job === this[CURRENT] && !job.piped) {\n      this[PIPE](job);\n    }\n  }\n\n  [ENTRYOPT](job) {\n    return {\n      onwarn: (code, msg, data) => this.warn(code, msg, data),\n      noPax: this.noPax,\n      cwd: this.cwd,\n      absolute: job.absolute,\n      preservePaths: this.preservePaths,\n      maxReadSize: this.maxReadSize,\n      strict: this.strict,\n      portable: this.portable,\n      linkCache: this.linkCache,\n      statCache: this.statCache,\n      noMtime: this.noMtime,\n      mtime: this.mtime,\n      prefix: this.prefix\n    };\n  }\n\n  [ENTRY](job) {\n    this[JOBS] += 1;\n\n    try {\n      return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on('end', () => this[JOBDONE](job)).on('error', er => this.emit('error', er));\n    } catch (er) {\n      this.emit('error', er);\n    }\n  }\n\n  [ONDRAIN]() {\n    if (this[CURRENT] && this[CURRENT].entry) {\n      this[CURRENT].entry.resume();\n    }\n  } // like .pipe() but using super, because our write() is special\n\n\n  [PIPE](job) {\n    job.piped = true;\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path;\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/');\n        this[ADDFSENTRY](base + entry);\n      });\n    }\n\n    const source = job.entry;\n    const zip = this.zip;\n\n    if (zip) {\n      source.on('data', chunk => {\n        if (!zip.write(chunk)) {\n          source.pause();\n        }\n      });\n    } else {\n      source.on('data', chunk => {\n        if (!super.write(chunk)) {\n          source.pause();\n        }\n      });\n    }\n  }\n\n  pause() {\n    if (this.zip) {\n      this.zip.pause();\n    }\n\n    return super.pause();\n  }\n\n});\n\nclass PackSync extends Pack {\n  constructor(opt) {\n    super(opt);\n    this[WRITEENTRYCLASS] = WriteEntrySync;\n  } // pause/resume are no-ops in sync streams.\n\n\n  pause() {}\n\n  resume() {}\n\n  [STAT](job) {\n    const stat = this.follow ? 'statSync' : 'lstatSync';\n    this[ONSTAT](job, fs[stat](job.absolute));\n  }\n\n  [READDIR](job, stat) {\n    this[ONREADDIR](job, fs.readdirSync(job.absolute));\n  } // gotta get it all in this tick\n\n\n  [PIPE](job) {\n    const source = job.entry;\n    const zip = this.zip;\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path;\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/');\n        this[ADDFSENTRY](base + entry);\n      });\n    }\n\n    if (zip) {\n      source.on('data', chunk => {\n        zip.write(chunk);\n      });\n    } else {\n      source.on('data', chunk => {\n        super[WRITE](chunk);\n      });\n    }\n  }\n\n}\n\nPack.Sync = PackSync;\nmodule.exports = Pack;","map":{"version":3,"names":["PackJob","constructor","path","absolute","entry","stat","readdir","pending","ignore","piped","MiniPass","require","zlib","ReadEntry","WriteEntry","WriteEntrySync","Sync","WriteEntryTar","Tar","Yallist","EOF","Buffer","alloc","ONSTAT","Symbol","ENDED","QUEUE","CURRENT","PROCESS","PROCESSING","PROCESSJOB","JOBS","JOBDONE","ADDFSENTRY","ADDTARENTRY","STAT","READDIR","ONREADDIR","PIPE","ENTRY","ENTRYOPT","WRITEENTRYCLASS","WRITE","ONDRAIN","fs","warner","normPath","Pack","opt","Object","create","file","cwd","process","maxReadSize","preservePaths","strict","noPax","prefix","linkCache","Map","statCache","readdirCache","onwarn","on","portable","zip","gzip","Gzip","chunk","write","_","end","resume","noDirRecurse","follow","noMtime","mtime","filter","jobs","add","Error","flowing","p","resolve","job","push","er","emit","set","entries","w","head","next","value","removeNode","length","shift","has","get","isDirectory","code","msg","data","warn","forEach","base","replace","source","pause","PackSync","readdirSync","module","exports"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/node_modules/tar/lib/pack.js"],"sourcesContent":["'use strict'\n\n// A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\nclass PackJob {\n  constructor (path, absolute) {\n    this.path = path || './'\n    this.absolute = absolute\n    this.entry = null\n    this.stat = null\n    this.readdir = null\n    this.pending = false\n    this.ignore = false\n    this.piped = false\n  }\n}\n\nconst MiniPass = require('minipass')\nconst zlib = require('minizlib')\nconst ReadEntry = require('./read-entry.js')\nconst WriteEntry = require('./write-entry.js')\nconst WriteEntrySync = WriteEntry.Sync\nconst WriteEntryTar = WriteEntry.Tar\nconst Yallist = require('yallist')\nconst EOF = Buffer.alloc(1024)\nconst ONSTAT = Symbol('onStat')\nconst ENDED = Symbol('ended')\nconst QUEUE = Symbol('queue')\nconst CURRENT = Symbol('current')\nconst PROCESS = Symbol('process')\nconst PROCESSING = Symbol('processing')\nconst PROCESSJOB = Symbol('processJob')\nconst JOBS = Symbol('jobs')\nconst JOBDONE = Symbol('jobDone')\nconst ADDFSENTRY = Symbol('addFSEntry')\nconst ADDTARENTRY = Symbol('addTarEntry')\nconst STAT = Symbol('stat')\nconst READDIR = Symbol('readdir')\nconst ONREADDIR = Symbol('onreaddir')\nconst PIPE = Symbol('pipe')\nconst ENTRY = Symbol('entry')\nconst ENTRYOPT = Symbol('entryOpt')\nconst WRITEENTRYCLASS = Symbol('writeEntryClass')\nconst WRITE = Symbol('write')\nconst ONDRAIN = Symbol('ondrain')\n\nconst fs = require('fs')\nconst path = require('path')\nconst warner = require('./warn-mixin.js')\nconst normPath = require('./normalize-windows-path.js')\n\nconst Pack = warner(class Pack extends MiniPass {\n  constructor (opt) {\n    super(opt)\n    opt = opt || Object.create(null)\n    this.opt = opt\n    this.file = opt.file || ''\n    this.cwd = opt.cwd || process.cwd()\n    this.maxReadSize = opt.maxReadSize\n    this.preservePaths = !!opt.preservePaths\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.prefix = normPath(opt.prefix || '')\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.readdirCache = opt.readdirCache || new Map()\n\n    this[WRITEENTRYCLASS] = WriteEntry\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n\n    this.portable = !!opt.portable\n    this.zip = null\n    if (opt.gzip) {\n      if (typeof opt.gzip !== 'object') {\n        opt.gzip = {}\n      }\n      if (this.portable) {\n        opt.gzip.portable = true\n      }\n      this.zip = new zlib.Gzip(opt.gzip)\n      this.zip.on('data', chunk => super.write(chunk))\n      this.zip.on('end', _ => super.end())\n      this.zip.on('drain', _ => this[ONDRAIN]())\n      this.on('resume', _ => this.zip.resume())\n    } else {\n      this.on('drain', this[ONDRAIN])\n    }\n\n    this.noDirRecurse = !!opt.noDirRecurse\n    this.follow = !!opt.follow\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n\n    this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true\n\n    this[QUEUE] = new Yallist()\n    this[JOBS] = 0\n    this.jobs = +opt.jobs || 4\n    this[PROCESSING] = false\n    this[ENDED] = false\n  }\n\n  [WRITE] (chunk) {\n    return super.write(chunk)\n  }\n\n  add (path) {\n    this.write(path)\n    return this\n  }\n\n  end (path) {\n    if (path) {\n      this.write(path)\n    }\n    this[ENDED] = true\n    this[PROCESS]()\n    return this\n  }\n\n  write (path) {\n    if (this[ENDED]) {\n      throw new Error('write after end')\n    }\n\n    if (path instanceof ReadEntry) {\n      this[ADDTARENTRY](path)\n    } else {\n      this[ADDFSENTRY](path)\n    }\n    return this.flowing\n  }\n\n  [ADDTARENTRY] (p) {\n    const absolute = normPath(path.resolve(this.cwd, p.path))\n    // in this case, we don't have to wait for the stat\n    if (!this.filter(p.path, p)) {\n      p.resume()\n    } else {\n      const job = new PackJob(p.path, absolute, false)\n      job.entry = new WriteEntryTar(p, this[ENTRYOPT](job))\n      job.entry.on('end', _ => this[JOBDONE](job))\n      this[JOBS] += 1\n      this[QUEUE].push(job)\n    }\n\n    this[PROCESS]()\n  }\n\n  [ADDFSENTRY] (p) {\n    const absolute = normPath(path.resolve(this.cwd, p))\n    this[QUEUE].push(new PackJob(p, absolute))\n    this[PROCESS]()\n  }\n\n  [STAT] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    const stat = this.follow ? 'stat' : 'lstat'\n    fs[stat](job.absolute, (er, stat) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er) {\n        this.emit('error', er)\n      } else {\n        this[ONSTAT](job, stat)\n      }\n    })\n  }\n\n  [ONSTAT] (job, stat) {\n    this.statCache.set(job.absolute, stat)\n    job.stat = stat\n\n    // now we have the stat, we can filter it.\n    if (!this.filter(job.path, stat)) {\n      job.ignore = true\n    }\n\n    this[PROCESS]()\n  }\n\n  [READDIR] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    fs.readdir(job.absolute, (er, entries) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er) {\n        return this.emit('error', er)\n      }\n      this[ONREADDIR](job, entries)\n    })\n  }\n\n  [ONREADDIR] (job, entries) {\n    this.readdirCache.set(job.absolute, entries)\n    job.readdir = entries\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    if (this[PROCESSING]) {\n      return\n    }\n\n    this[PROCESSING] = true\n    for (let w = this[QUEUE].head;\n      w !== null && this[JOBS] < this.jobs;\n      w = w.next) {\n      this[PROCESSJOB](w.value)\n      if (w.value.ignore) {\n        const p = w.next\n        this[QUEUE].removeNode(w)\n        w.next = p\n      }\n    }\n\n    this[PROCESSING] = false\n\n    if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n      if (this.zip) {\n        this.zip.end(EOF)\n      } else {\n        super.write(EOF)\n        super.end()\n      }\n    }\n  }\n\n  get [CURRENT] () {\n    return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value\n  }\n\n  [JOBDONE] (job) {\n    this[QUEUE].shift()\n    this[JOBS] -= 1\n    this[PROCESS]()\n  }\n\n  [PROCESSJOB] (job) {\n    if (job.pending) {\n      return\n    }\n\n    if (job.entry) {\n      if (job === this[CURRENT] && !job.piped) {\n        this[PIPE](job)\n      }\n      return\n    }\n\n    if (!job.stat) {\n      if (this.statCache.has(job.absolute)) {\n        this[ONSTAT](job, this.statCache.get(job.absolute))\n      } else {\n        this[STAT](job)\n      }\n    }\n    if (!job.stat) {\n      return\n    }\n\n    // filtered out!\n    if (job.ignore) {\n      return\n    }\n\n    if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n      if (this.readdirCache.has(job.absolute)) {\n        this[ONREADDIR](job, this.readdirCache.get(job.absolute))\n      } else {\n        this[READDIR](job)\n      }\n      if (!job.readdir) {\n        return\n      }\n    }\n\n    // we know it doesn't have an entry, because that got checked above\n    job.entry = this[ENTRY](job)\n    if (!job.entry) {\n      job.ignore = true\n      return\n    }\n\n    if (job === this[CURRENT] && !job.piped) {\n      this[PIPE](job)\n    }\n  }\n\n  [ENTRYOPT] (job) {\n    return {\n      onwarn: (code, msg, data) => this.warn(code, msg, data),\n      noPax: this.noPax,\n      cwd: this.cwd,\n      absolute: job.absolute,\n      preservePaths: this.preservePaths,\n      maxReadSize: this.maxReadSize,\n      strict: this.strict,\n      portable: this.portable,\n      linkCache: this.linkCache,\n      statCache: this.statCache,\n      noMtime: this.noMtime,\n      mtime: this.mtime,\n      prefix: this.prefix,\n    }\n  }\n\n  [ENTRY] (job) {\n    this[JOBS] += 1\n    try {\n      return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job))\n        .on('end', () => this[JOBDONE](job))\n        .on('error', er => this.emit('error', er))\n    } catch (er) {\n      this.emit('error', er)\n    }\n  }\n\n  [ONDRAIN] () {\n    if (this[CURRENT] && this[CURRENT].entry) {\n      this[CURRENT].entry.resume()\n    }\n  }\n\n  // like .pipe() but using super, because our write() is special\n  [PIPE] (job) {\n    job.piped = true\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n    }\n\n    const source = job.entry\n    const zip = this.zip\n\n    if (zip) {\n      source.on('data', chunk => {\n        if (!zip.write(chunk)) {\n          source.pause()\n        }\n      })\n    } else {\n      source.on('data', chunk => {\n        if (!super.write(chunk)) {\n          source.pause()\n        }\n      })\n    }\n  }\n\n  pause () {\n    if (this.zip) {\n      this.zip.pause()\n    }\n    return super.pause()\n  }\n})\n\nclass PackSync extends Pack {\n  constructor (opt) {\n    super(opt)\n    this[WRITEENTRYCLASS] = WriteEntrySync\n  }\n\n  // pause/resume are no-ops in sync streams.\n  pause () {}\n  resume () {}\n\n  [STAT] (job) {\n    const stat = this.follow ? 'statSync' : 'lstatSync'\n    this[ONSTAT](job, fs[stat](job.absolute))\n  }\n\n  [READDIR] (job, stat) {\n    this[ONREADDIR](job, fs.readdirSync(job.absolute))\n  }\n\n  // gotta get it all in this tick\n  [PIPE] (job) {\n    const source = job.entry\n    const zip = this.zip\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n    }\n\n    if (zip) {\n      source.on('data', chunk => {\n        zip.write(chunk)\n      })\n    } else {\n      source.on('data', chunk => {\n        super[WRITE](chunk)\n      })\n    }\n  }\n}\n\nPack.Sync = PackSync\n\nmodule.exports = Pack\n"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAN,CAAc;EACZC,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkB;IAC3B,KAAKD,IAAL,GAAYA,IAAI,IAAI,IAApB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKC,MAAL,GAAc,KAAd;IACA,KAAKC,KAAL,GAAa,KAAb;EACD;;AAVW;;AAad,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAMI,cAAc,GAAGD,UAAU,CAACE,IAAlC;AACA,MAAMC,aAAa,GAAGH,UAAU,CAACI,GAAjC;;AACA,MAAMC,OAAO,GAAGR,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMS,GAAG,GAAGC,MAAM,CAACC,KAAP,CAAa,IAAb,CAAZ;AACA,MAAMC,MAAM,GAAGC,MAAM,CAAC,QAAD,CAArB;AACA,MAAMC,KAAK,GAAGD,MAAM,CAAC,OAAD,CAApB;AACA,MAAME,KAAK,GAAGF,MAAM,CAAC,OAAD,CAApB;AACA,MAAMG,OAAO,GAAGH,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMI,OAAO,GAAGJ,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMK,UAAU,GAAGL,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMM,UAAU,GAAGN,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMO,IAAI,GAAGP,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMQ,OAAO,GAAGR,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMS,UAAU,GAAGT,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMU,WAAW,GAAGV,MAAM,CAAC,aAAD,CAA1B;AACA,MAAMW,IAAI,GAAGX,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMY,OAAO,GAAGZ,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMa,SAAS,GAAGb,MAAM,CAAC,WAAD,CAAxB;AACA,MAAMc,IAAI,GAAGd,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMe,KAAK,GAAGf,MAAM,CAAC,OAAD,CAApB;AACA,MAAMgB,QAAQ,GAAGhB,MAAM,CAAC,UAAD,CAAvB;AACA,MAAMiB,eAAe,GAAGjB,MAAM,CAAC,iBAAD,CAA9B;AACA,MAAMkB,KAAK,GAAGlB,MAAM,CAAC,OAAD,CAApB;AACA,MAAMmB,OAAO,GAAGnB,MAAM,CAAC,SAAD,CAAtB;;AAEA,MAAMoB,EAAE,GAAGjC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMT,IAAI,GAAGS,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMkC,MAAM,GAAGlC,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMmC,QAAQ,GAAGnC,OAAO,CAAC,6BAAD,CAAxB;;AAEA,MAAMoC,IAAI,GAAGF,MAAM,CAAC,MAAME,IAAN,SAAmBrC,QAAnB,CAA4B;EAC9CT,WAAW,CAAE+C,GAAF,EAAO;IAChB,MAAMA,GAAN;IACAA,GAAG,GAAGA,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;IACA,KAAKF,GAAL,GAAWA,GAAX;IACA,KAAKG,IAAL,GAAYH,GAAG,CAACG,IAAJ,IAAY,EAAxB;IACA,KAAKC,GAAL,GAAWJ,GAAG,CAACI,GAAJ,IAAWC,OAAO,CAACD,GAAR,EAAtB;IACA,KAAKE,WAAL,GAAmBN,GAAG,CAACM,WAAvB;IACA,KAAKC,aAAL,GAAqB,CAAC,CAACP,GAAG,CAACO,aAA3B;IACA,KAAKC,MAAL,GAAc,CAAC,CAACR,GAAG,CAACQ,MAApB;IACA,KAAKC,KAAL,GAAa,CAAC,CAACT,GAAG,CAACS,KAAnB;IACA,KAAKC,MAAL,GAAcZ,QAAQ,CAACE,GAAG,CAACU,MAAJ,IAAc,EAAf,CAAtB;IACA,KAAKC,SAAL,GAAiBX,GAAG,CAACW,SAAJ,IAAiB,IAAIC,GAAJ,EAAlC;IACA,KAAKC,SAAL,GAAiBb,GAAG,CAACa,SAAJ,IAAiB,IAAID,GAAJ,EAAlC;IACA,KAAKE,YAAL,GAAoBd,GAAG,CAACc,YAAJ,IAAoB,IAAIF,GAAJ,EAAxC;IAEA,KAAKnB,eAAL,IAAwB3B,UAAxB;;IACA,IAAI,OAAOkC,GAAG,CAACe,MAAX,KAAsB,UAA1B,EAAsC;MACpC,KAAKC,EAAL,CAAQ,MAAR,EAAgBhB,GAAG,CAACe,MAApB;IACD;;IAED,KAAKE,QAAL,GAAgB,CAAC,CAACjB,GAAG,CAACiB,QAAtB;IACA,KAAKC,GAAL,GAAW,IAAX;;IACA,IAAIlB,GAAG,CAACmB,IAAR,EAAc;MACZ,IAAI,OAAOnB,GAAG,CAACmB,IAAX,KAAoB,QAAxB,EAAkC;QAChCnB,GAAG,CAACmB,IAAJ,GAAW,EAAX;MACD;;MACD,IAAI,KAAKF,QAAT,EAAmB;QACjBjB,GAAG,CAACmB,IAAJ,CAASF,QAAT,GAAoB,IAApB;MACD;;MACD,KAAKC,GAAL,GAAW,IAAItD,IAAI,CAACwD,IAAT,CAAcpB,GAAG,CAACmB,IAAlB,CAAX;MACA,KAAKD,GAAL,CAASF,EAAT,CAAY,MAAZ,EAAoBK,KAAK,IAAI,MAAMC,KAAN,CAAYD,KAAZ,CAA7B;MACA,KAAKH,GAAL,CAASF,EAAT,CAAY,KAAZ,EAAmBO,CAAC,IAAI,MAAMC,GAAN,EAAxB;MACA,KAAKN,GAAL,CAASF,EAAT,CAAY,OAAZ,EAAqBO,CAAC,IAAI,KAAK5B,OAAL,GAA1B;MACA,KAAKqB,EAAL,CAAQ,QAAR,EAAkBO,CAAC,IAAI,KAAKL,GAAL,CAASO,MAAT,EAAvB;IACD,CAZD,MAYO;MACL,KAAKT,EAAL,CAAQ,OAAR,EAAiB,KAAKrB,OAAL,CAAjB;IACD;;IAED,KAAK+B,YAAL,GAAoB,CAAC,CAAC1B,GAAG,CAAC0B,YAA1B;IACA,KAAKC,MAAL,GAAc,CAAC,CAAC3B,GAAG,CAAC2B,MAApB;IACA,KAAKC,OAAL,GAAe,CAAC,CAAC5B,GAAG,CAAC4B,OAArB;IACA,KAAKC,KAAL,GAAa7B,GAAG,CAAC6B,KAAJ,IAAa,IAA1B;IAEA,KAAKC,MAAL,GAAc,OAAO9B,GAAG,CAAC8B,MAAX,KAAsB,UAAtB,GAAmC9B,GAAG,CAAC8B,MAAvC,GAAgDP,CAAC,IAAI,IAAnE;IAEA,KAAK7C,KAAL,IAAc,IAAIP,OAAJ,EAAd;IACA,KAAKY,IAAL,IAAa,CAAb;IACA,KAAKgD,IAAL,GAAY,CAAC/B,GAAG,CAAC+B,IAAL,IAAa,CAAzB;IACA,KAAKlD,UAAL,IAAmB,KAAnB;IACA,KAAKJ,KAAL,IAAc,KAAd;EACD;;EAEK,CAALiB,KAAK,EAAG2B,KAAH,EAAU;IACd,OAAO,MAAMC,KAAN,CAAYD,KAAZ,CAAP;EACD;;EAEDW,GAAG,CAAE9E,IAAF,EAAQ;IACT,KAAKoE,KAAL,CAAWpE,IAAX;IACA,OAAO,IAAP;EACD;;EAEDsE,GAAG,CAAEtE,IAAF,EAAQ;IACT,IAAIA,IAAJ,EAAU;MACR,KAAKoE,KAAL,CAAWpE,IAAX;IACD;;IACD,KAAKuB,KAAL,IAAc,IAAd;IACA,KAAKG,OAAL;IACA,OAAO,IAAP;EACD;;EAED0C,KAAK,CAAEpE,IAAF,EAAQ;IACX,IAAI,KAAKuB,KAAL,CAAJ,EAAiB;MACf,MAAM,IAAIwD,KAAJ,CAAU,iBAAV,CAAN;IACD;;IAED,IAAI/E,IAAI,YAAYW,SAApB,EAA+B;MAC7B,KAAKqB,WAAL,EAAkBhC,IAAlB;IACD,CAFD,MAEO;MACL,KAAK+B,UAAL,EAAiB/B,IAAjB;IACD;;IACD,OAAO,KAAKgF,OAAZ;EACD;;EAEW,CAAXhD,WAAW,EAAGiD,CAAH,EAAM;IAChB,MAAMhF,QAAQ,GAAG2C,QAAQ,CAAC5C,IAAI,CAACkF,OAAL,CAAa,KAAKhC,GAAlB,EAAuB+B,CAAC,CAACjF,IAAzB,CAAD,CAAzB,CADgB,CAEhB;;IACA,IAAI,CAAC,KAAK4E,MAAL,CAAYK,CAAC,CAACjF,IAAd,EAAoBiF,CAApB,CAAL,EAA6B;MAC3BA,CAAC,CAACV,MAAF;IACD,CAFD,MAEO;MACL,MAAMY,GAAG,GAAG,IAAIrF,OAAJ,CAAYmF,CAAC,CAACjF,IAAd,EAAoBC,QAApB,EAA8B,KAA9B,CAAZ;MACAkF,GAAG,CAACjF,KAAJ,GAAY,IAAIa,aAAJ,CAAkBkE,CAAlB,EAAqB,KAAK3C,QAAL,EAAe6C,GAAf,CAArB,CAAZ;MACAA,GAAG,CAACjF,KAAJ,CAAU4D,EAAV,CAAa,KAAb,EAAoBO,CAAC,IAAI,KAAKvC,OAAL,EAAcqD,GAAd,CAAzB;MACA,KAAKtD,IAAL,KAAc,CAAd;MACA,KAAKL,KAAL,EAAY4D,IAAZ,CAAiBD,GAAjB;IACD;;IAED,KAAKzD,OAAL;EACD;;EAEU,CAAVK,UAAU,EAAGkD,CAAH,EAAM;IACf,MAAMhF,QAAQ,GAAG2C,QAAQ,CAAC5C,IAAI,CAACkF,OAAL,CAAa,KAAKhC,GAAlB,EAAuB+B,CAAvB,CAAD,CAAzB;IACA,KAAKzD,KAAL,EAAY4D,IAAZ,CAAiB,IAAItF,OAAJ,CAAYmF,CAAZ,EAAehF,QAAf,CAAjB;IACA,KAAKyB,OAAL;EACD;;EAEI,CAAJO,IAAI,EAAGkD,GAAH,EAAQ;IACXA,GAAG,CAAC9E,OAAJ,GAAc,IAAd;IACA,KAAKwB,IAAL,KAAc,CAAd;IACA,MAAM1B,IAAI,GAAG,KAAKsE,MAAL,GAAc,MAAd,GAAuB,OAApC;IACA/B,EAAE,CAACvC,IAAD,CAAF,CAASgF,GAAG,CAAClF,QAAb,EAAuB,CAACoF,EAAD,EAAKlF,IAAL,KAAc;MACnCgF,GAAG,CAAC9E,OAAJ,GAAc,KAAd;MACA,KAAKwB,IAAL,KAAc,CAAd;;MACA,IAAIwD,EAAJ,EAAQ;QACN,KAAKC,IAAL,CAAU,OAAV,EAAmBD,EAAnB;MACD,CAFD,MAEO;QACL,KAAKhE,MAAL,EAAa8D,GAAb,EAAkBhF,IAAlB;MACD;IACF,CARD;EASD;;EAEM,CAANkB,MAAM,EAAG8D,GAAH,EAAQhF,IAAR,EAAc;IACnB,KAAKwD,SAAL,CAAe4B,GAAf,CAAmBJ,GAAG,CAAClF,QAAvB,EAAiCE,IAAjC;IACAgF,GAAG,CAAChF,IAAJ,GAAWA,IAAX,CAFmB,CAInB;;IACA,IAAI,CAAC,KAAKyE,MAAL,CAAYO,GAAG,CAACnF,IAAhB,EAAsBG,IAAtB,CAAL,EAAkC;MAChCgF,GAAG,CAAC7E,MAAJ,GAAa,IAAb;IACD;;IAED,KAAKoB,OAAL;EACD;;EAEO,CAAPQ,OAAO,EAAGiD,GAAH,EAAQ;IACdA,GAAG,CAAC9E,OAAJ,GAAc,IAAd;IACA,KAAKwB,IAAL,KAAc,CAAd;IACAa,EAAE,CAACtC,OAAH,CAAW+E,GAAG,CAAClF,QAAf,EAAyB,CAACoF,EAAD,EAAKG,OAAL,KAAiB;MACxCL,GAAG,CAAC9E,OAAJ,GAAc,KAAd;MACA,KAAKwB,IAAL,KAAc,CAAd;;MACA,IAAIwD,EAAJ,EAAQ;QACN,OAAO,KAAKC,IAAL,CAAU,OAAV,EAAmBD,EAAnB,CAAP;MACD;;MACD,KAAKlD,SAAL,EAAgBgD,GAAhB,EAAqBK,OAArB;IACD,CAPD;EAQD;;EAES,CAATrD,SAAS,EAAGgD,GAAH,EAAQK,OAAR,EAAiB;IACzB,KAAK5B,YAAL,CAAkB2B,GAAlB,CAAsBJ,GAAG,CAAClF,QAA1B,EAAoCuF,OAApC;IACAL,GAAG,CAAC/E,OAAJ,GAAcoF,OAAd;IACA,KAAK9D,OAAL;EACD;;EAEO,CAAPA,OAAO,IAAK;IACX,IAAI,KAAKC,UAAL,CAAJ,EAAsB;MACpB;IACD;;IAED,KAAKA,UAAL,IAAmB,IAAnB;;IACA,KAAK,IAAI8D,CAAC,GAAG,KAAKjE,KAAL,EAAYkE,IAAzB,EACED,CAAC,KAAK,IAAN,IAAc,KAAK5D,IAAL,IAAa,KAAKgD,IADlC,EAEEY,CAAC,GAAGA,CAAC,CAACE,IAFR,EAEc;MACZ,KAAK/D,UAAL,EAAiB6D,CAAC,CAACG,KAAnB;;MACA,IAAIH,CAAC,CAACG,KAAF,CAAQtF,MAAZ,EAAoB;QAClB,MAAM2E,CAAC,GAAGQ,CAAC,CAACE,IAAZ;QACA,KAAKnE,KAAL,EAAYqE,UAAZ,CAAuBJ,CAAvB;QACAA,CAAC,CAACE,IAAF,GAASV,CAAT;MACD;IACF;;IAED,KAAKtD,UAAL,IAAmB,KAAnB;;IAEA,IAAI,KAAKJ,KAAL,KAAe,CAAC,KAAKC,KAAL,EAAYsE,MAA5B,IAAsC,KAAKjE,IAAL,MAAe,CAAzD,EAA4D;MAC1D,IAAI,KAAKmC,GAAT,EAAc;QACZ,KAAKA,GAAL,CAASM,GAAT,CAAapD,GAAb;MACD,CAFD,MAEO;QACL,MAAMkD,KAAN,CAAYlD,GAAZ;QACA,MAAMoD,GAAN;MACD;IACF;EACF;;EAEW,KAAP7C,OAAO,IAAK;IACf,OAAO,KAAKD,KAAL,KAAe,KAAKA,KAAL,EAAYkE,IAA3B,IAAmC,KAAKlE,KAAL,EAAYkE,IAAZ,CAAiBE,KAA3D;EACD;;EAEO,CAAP9D,OAAO,EAAGqD,GAAH,EAAQ;IACd,KAAK3D,KAAL,EAAYuE,KAAZ;IACA,KAAKlE,IAAL,KAAc,CAAd;IACA,KAAKH,OAAL;EACD;;EAEU,CAAVE,UAAU,EAAGuD,GAAH,EAAQ;IACjB,IAAIA,GAAG,CAAC9E,OAAR,EAAiB;MACf;IACD;;IAED,IAAI8E,GAAG,CAACjF,KAAR,EAAe;MACb,IAAIiF,GAAG,KAAK,KAAK1D,OAAL,CAAR,IAAyB,CAAC0D,GAAG,CAAC5E,KAAlC,EAAyC;QACvC,KAAK6B,IAAL,EAAW+C,GAAX;MACD;;MACD;IACD;;IAED,IAAI,CAACA,GAAG,CAAChF,IAAT,EAAe;MACb,IAAI,KAAKwD,SAAL,CAAeqC,GAAf,CAAmBb,GAAG,CAAClF,QAAvB,CAAJ,EAAsC;QACpC,KAAKoB,MAAL,EAAa8D,GAAb,EAAkB,KAAKxB,SAAL,CAAesC,GAAf,CAAmBd,GAAG,CAAClF,QAAvB,CAAlB;MACD,CAFD,MAEO;QACL,KAAKgC,IAAL,EAAWkD,GAAX;MACD;IACF;;IACD,IAAI,CAACA,GAAG,CAAChF,IAAT,EAAe;MACb;IACD,CArBgB,CAuBjB;;;IACA,IAAIgF,GAAG,CAAC7E,MAAR,EAAgB;MACd;IACD;;IAED,IAAI,CAAC,KAAKkE,YAAN,IAAsBW,GAAG,CAAChF,IAAJ,CAAS+F,WAAT,EAAtB,IAAgD,CAACf,GAAG,CAAC/E,OAAzD,EAAkE;MAChE,IAAI,KAAKwD,YAAL,CAAkBoC,GAAlB,CAAsBb,GAAG,CAAClF,QAA1B,CAAJ,EAAyC;QACvC,KAAKkC,SAAL,EAAgBgD,GAAhB,EAAqB,KAAKvB,YAAL,CAAkBqC,GAAlB,CAAsBd,GAAG,CAAClF,QAA1B,CAArB;MACD,CAFD,MAEO;QACL,KAAKiC,OAAL,EAAciD,GAAd;MACD;;MACD,IAAI,CAACA,GAAG,CAAC/E,OAAT,EAAkB;QAChB;MACD;IACF,CArCgB,CAuCjB;;;IACA+E,GAAG,CAACjF,KAAJ,GAAY,KAAKmC,KAAL,EAAY8C,GAAZ,CAAZ;;IACA,IAAI,CAACA,GAAG,CAACjF,KAAT,EAAgB;MACdiF,GAAG,CAAC7E,MAAJ,GAAa,IAAb;MACA;IACD;;IAED,IAAI6E,GAAG,KAAK,KAAK1D,OAAL,CAAR,IAAyB,CAAC0D,GAAG,CAAC5E,KAAlC,EAAyC;MACvC,KAAK6B,IAAL,EAAW+C,GAAX;IACD;EACF;;EAEQ,CAAR7C,QAAQ,EAAG6C,GAAH,EAAQ;IACf,OAAO;MACLtB,MAAM,EAAE,CAACsC,IAAD,EAAOC,GAAP,EAAYC,IAAZ,KAAqB,KAAKC,IAAL,CAAUH,IAAV,EAAgBC,GAAhB,EAAqBC,IAArB,CADxB;MAEL9C,KAAK,EAAE,KAAKA,KAFP;MAGLL,GAAG,EAAE,KAAKA,GAHL;MAILjD,QAAQ,EAAEkF,GAAG,CAAClF,QAJT;MAKLoD,aAAa,EAAE,KAAKA,aALf;MAMLD,WAAW,EAAE,KAAKA,WANb;MAOLE,MAAM,EAAE,KAAKA,MAPR;MAQLS,QAAQ,EAAE,KAAKA,QARV;MASLN,SAAS,EAAE,KAAKA,SATX;MAULE,SAAS,EAAE,KAAKA,SAVX;MAWLe,OAAO,EAAE,KAAKA,OAXT;MAYLC,KAAK,EAAE,KAAKA,KAZP;MAaLnB,MAAM,EAAE,KAAKA;IAbR,CAAP;EAeD;;EAEK,CAALnB,KAAK,EAAG8C,GAAH,EAAQ;IACZ,KAAKtD,IAAL,KAAc,CAAd;;IACA,IAAI;MACF,OAAO,IAAI,KAAKU,eAAL,CAAJ,CAA0B4C,GAAG,CAACnF,IAA9B,EAAoC,KAAKsC,QAAL,EAAe6C,GAAf,CAApC,EACJrB,EADI,CACD,KADC,EACM,MAAM,KAAKhC,OAAL,EAAcqD,GAAd,CADZ,EAEJrB,EAFI,CAED,OAFC,EAEQuB,EAAE,IAAI,KAAKC,IAAL,CAAU,OAAV,EAAmBD,EAAnB,CAFd,CAAP;IAGD,CAJD,CAIE,OAAOA,EAAP,EAAW;MACX,KAAKC,IAAL,CAAU,OAAV,EAAmBD,EAAnB;IACD;EACF;;EAEO,CAAP5C,OAAO,IAAK;IACX,IAAI,KAAKhB,OAAL,KAAiB,KAAKA,OAAL,EAAcvB,KAAnC,EAA0C;MACxC,KAAKuB,OAAL,EAAcvB,KAAd,CAAoBqE,MAApB;IACD;EACF,CAnR6C,CAqR9C;;;EACK,CAAJnC,IAAI,EAAG+C,GAAH,EAAQ;IACXA,GAAG,CAAC5E,KAAJ,GAAY,IAAZ;;IAEA,IAAI4E,GAAG,CAAC/E,OAAR,EAAiB;MACf+E,GAAG,CAAC/E,OAAJ,CAAYmG,OAAZ,CAAoBrG,KAAK,IAAI;QAC3B,MAAM+E,CAAC,GAAGE,GAAG,CAACnF,IAAd;QACA,MAAMwG,IAAI,GAAGvB,CAAC,KAAK,IAAN,GAAa,EAAb,GAAkBA,CAAC,CAACwB,OAAF,CAAU,MAAV,EAAkB,GAAlB,CAA/B;QACA,KAAK1E,UAAL,EAAiByE,IAAI,GAAGtG,KAAxB;MACD,CAJD;IAKD;;IAED,MAAMwG,MAAM,GAAGvB,GAAG,CAACjF,KAAnB;IACA,MAAM8D,GAAG,GAAG,KAAKA,GAAjB;;IAEA,IAAIA,GAAJ,EAAS;MACP0C,MAAM,CAAC5C,EAAP,CAAU,MAAV,EAAkBK,KAAK,IAAI;QACzB,IAAI,CAACH,GAAG,CAACI,KAAJ,CAAUD,KAAV,CAAL,EAAuB;UACrBuC,MAAM,CAACC,KAAP;QACD;MACF,CAJD;IAKD,CAND,MAMO;MACLD,MAAM,CAAC5C,EAAP,CAAU,MAAV,EAAkBK,KAAK,IAAI;QACzB,IAAI,CAAC,MAAMC,KAAN,CAAYD,KAAZ,CAAL,EAAyB;UACvBuC,MAAM,CAACC,KAAP;QACD;MACF,CAJD;IAKD;EACF;;EAEDA,KAAK,GAAI;IACP,IAAI,KAAK3C,GAAT,EAAc;MACZ,KAAKA,GAAL,CAAS2C,KAAT;IACD;;IACD,OAAO,MAAMA,KAAN,EAAP;EACD;;AAxT6C,CAA7B,CAAnB;;AA2TA,MAAMC,QAAN,SAAuB/D,IAAvB,CAA4B;EAC1B9C,WAAW,CAAE+C,GAAF,EAAO;IAChB,MAAMA,GAAN;IACA,KAAKP,eAAL,IAAwB1B,cAAxB;EACD,CAJyB,CAM1B;;;EACA8F,KAAK,GAAI,CAAE;;EACXpC,MAAM,GAAI,CAAE;;EAEP,CAAJtC,IAAI,EAAGkD,GAAH,EAAQ;IACX,MAAMhF,IAAI,GAAG,KAAKsE,MAAL,GAAc,UAAd,GAA2B,WAAxC;IACA,KAAKpD,MAAL,EAAa8D,GAAb,EAAkBzC,EAAE,CAACvC,IAAD,CAAF,CAASgF,GAAG,CAAClF,QAAb,CAAlB;EACD;;EAEO,CAAPiC,OAAO,EAAGiD,GAAH,EAAQhF,IAAR,EAAc;IACpB,KAAKgC,SAAL,EAAgBgD,GAAhB,EAAqBzC,EAAE,CAACmE,WAAH,CAAe1B,GAAG,CAAClF,QAAnB,CAArB;EACD,CAjByB,CAmB1B;;;EACK,CAAJmC,IAAI,EAAG+C,GAAH,EAAQ;IACX,MAAMuB,MAAM,GAAGvB,GAAG,CAACjF,KAAnB;IACA,MAAM8D,GAAG,GAAG,KAAKA,GAAjB;;IAEA,IAAImB,GAAG,CAAC/E,OAAR,EAAiB;MACf+E,GAAG,CAAC/E,OAAJ,CAAYmG,OAAZ,CAAoBrG,KAAK,IAAI;QAC3B,MAAM+E,CAAC,GAAGE,GAAG,CAACnF,IAAd;QACA,MAAMwG,IAAI,GAAGvB,CAAC,KAAK,IAAN,GAAa,EAAb,GAAkBA,CAAC,CAACwB,OAAF,CAAU,MAAV,EAAkB,GAAlB,CAA/B;QACA,KAAK1E,UAAL,EAAiByE,IAAI,GAAGtG,KAAxB;MACD,CAJD;IAKD;;IAED,IAAI8D,GAAJ,EAAS;MACP0C,MAAM,CAAC5C,EAAP,CAAU,MAAV,EAAkBK,KAAK,IAAI;QACzBH,GAAG,CAACI,KAAJ,CAAUD,KAAV;MACD,CAFD;IAGD,CAJD,MAIO;MACLuC,MAAM,CAAC5C,EAAP,CAAU,MAAV,EAAkBK,KAAK,IAAI;QACzB,MAAM3B,KAAN,EAAa2B,KAAb;MACD,CAFD;IAGD;EACF;;AAzCyB;;AA4C5BtB,IAAI,CAAC/B,IAAL,GAAY8F,QAAZ;AAEAE,MAAM,CAACC,OAAP,GAAiBlE,IAAjB"},"metadata":{},"sourceType":"script"}