{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst validator = _.cloneDeep(require(\"validator\"));\n\nconst moment = require(\"moment\");\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n    return this;\n  },\n\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n\n  isUrl(str) {\n    return this.isURL(str);\n  },\n\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n\n  regex(str, pattern, modifiers) {\n    str += \"\";\n\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== \"RegExp\") {\n      pattern = new RegExp(pattern, modifiers);\n    }\n\n    return str.match(pattern);\n  },\n\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n\n  isDecimal(str) {\n    return str !== \"\" && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n\n};\nexports.extensions = extensions;\n\nvalidator.isImmutable = function (value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\n\nvalidator.notNull = function (val) {\n  return val !== null && val !== void 0;\n};\n\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\nvalidator.isNull = validator.isEmpty;\n\nvalidator.isDate = function (dateString) {\n  const parsed = Date.parse(dateString);\n\n  if (isNaN(parsed)) {\n    return false;\n  }\n\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAMC,YAAYF,EAAEG,SAAF,CAAYF,QAAQ,WAAR,CAAZ,CAAlB;;AACA,MAAMG,SAASH,QAAQ,QAAR,CAAf;;AAEA,MAAMI,aAAa;EACjBC,OAAOC,IAAP,EAAaC,EAAb,EAAiB;IACf,KAAKD,IAAL,IAAaC,EAAb;IAEA,OAAO,IAAP;EAAO,CAJQ;;EAMjBC,SAASC,GAAT,EAAc;IACZ,OAAO,CAACA,IAAIC,KAAJ,CAAU,eAAV,CAAR;EAAkB,CAPH;;EASjBC,IAAIF,GAAJ,EAASG,GAAT,EAAcC,GAAd,EAAmB;IACjB,OAAO,KAAKC,QAAL,CAAcL,GAAd,EAAmBG,GAAnB,EAAwBC,GAAxB,CAAP;EAA+B,CAVhB;;EAYjBE,MAAMN,GAAN,EAAW;IACT,OAAO,KAAKO,KAAL,CAAWP,GAAX,CAAP;EAAkB,CAbH;;EAejBQ,OAAOR,GAAP,EAAY;IACV,OAAO,KAAKS,IAAL,CAAUT,GAAV,EAAe,CAAf,CAAP;EAAsB,CAhBP;;EAkBjBU,OAAOV,GAAP,EAAY;IACV,OAAO,KAAKS,IAAL,CAAUT,GAAV,EAAe,CAAf,CAAP;EAAsB,CAnBP;;EAqBjBW,MAAMX,GAAN,EAAWY,MAAX,EAAmB;IACjB,OAAO,CAAC,KAAKC,IAAL,CAAUb,GAAV,EAAeY,MAAf,CAAR;EAAuB,CAtBR;;EAwBjBE,MAAMd,GAAN,EAAWe,OAAX,EAAoBC,SAApB,EAA+B;IAC7BhB,OAAO,EAAP;;IACA,IAAIiB,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,OAA/B,EAAwCM,KAAxC,CAA8C,CAA9C,EAAiD,EAAjD,MAAyD,QAA7D,EAAuE;MACrEN,UAAU,IAAIO,MAAJ,CAAWP,OAAX,EAAoBC,SAApB,CAAV;IAA8B;;IAEhC,OAAOhB,IAAIC,KAAJ,CAAUc,OAAV,CAAP;EAAiB,CA7BF;;EA+BjBQ,SAASvB,GAAT,EAAce,OAAd,EAAuBC,SAAvB,EAAkC;IAChC,OAAO,CAAC,KAAKF,KAAL,CAAWd,GAAX,EAAgBe,OAAhB,EAAyBC,SAAzB,CAAR;EAAiC,CAhClB;;EAkCjBQ,UAAUxB,GAAV,EAAe;IACb,OAAOA,QAAQ,EAAR,IAAc,CAAC,CAACA,IAAIC,KAAJ,CAAU,0DAAV,CAAvB;EAAiC,CAnClB;;EAqCjBE,IAAIH,GAAJ,EAASyB,GAAT,EAAc;IACZ,MAAMC,SAASC,WAAW3B,GAAX,CAAf;IACA,OAAO4B,MAAMF,MAAN,KAAiBA,UAAUD,GAAlC;EAAkC,CAvCnB;;EAyCjBrB,IAAIJ,GAAJ,EAASyB,GAAT,EAAc;IACZ,MAAMC,SAASC,WAAW3B,GAAX,CAAf;IACA,OAAO4B,MAAMF,MAAN,KAAiBA,UAAUD,GAAlC;EAAkC,CA3CnB;;EA6CjBI,IAAI7B,GAAJ,EAASe,OAAT,EAAkBC,SAAlB,EAA6B;IAC3B,OAAO,KAAKO,QAAL,CAAcvB,GAAd,EAAmBe,OAAnB,EAA4BC,SAA5B,CAAP;EAAmC,CA9CpB;;EAgDjBc,SAAS9B,GAAT,EAAc+B,IAAd,EAAoB;IAClB,OAAO,CAAC,CAACA,IAAF,IAAU/B,IAAIgC,QAAJ,CAAaD,IAAb,CAAjB;EAA8B,CAjDf;;EAmDjBE,YAAYjC,GAAZ,EAAiB+B,IAAjB,EAAuB;IACrB,OAAO,CAAC,KAAKD,QAAL,CAAc9B,GAAd,EAAmB+B,IAAnB,CAAR;EAA2B,CApDZ;;EAsDjBG,GAAGlC,GAAH,EAAQe,OAAR,EAAiBC,SAAjB,EAA4B;IAC1B,OAAO,KAAKF,KAAL,CAAWd,GAAX,EAAgBe,OAAhB,EAAyBC,SAAzB,CAAP;EAAgC;;AAvDjB,CAAnB;AA0DAmB,QAAQxC,UAAR,GAAqBA,UAArB;;AAGAH,UAAU4C,WAAV,GAAwB,UAASC,KAAT,EAAgBC,aAAhB,EAA+BC,KAA/B,EAAsCC,aAAtC,EAAqD;EAC3E,OAAOA,cAAcC,WAAd,IAA6BD,cAAcE,UAAd,CAAyBH,KAAzB,MAAoCC,cAAcG,mBAAd,CAAkCJ,KAAlC,CAAxE;AAA0G,CAD5G;;AAKA/C,UAAUoD,OAAV,GAAoB,UAASnB,GAAT,EAAc;EAChC,OAAOA,QAAQ,IAAR,IAAgBA,QAAQ,MAA/B;AAA+B,CADjC;;AAKAnC,EAAEuD,OAAF,CAAUlD,UAAV,EAAsB,CAACC,MAAD,EAASkD,GAAT,KAAiB;EACrCtD,UAAUsD,GAAV,IAAiBlD,MAAjB;AAAiB,CADnB;;AAMAJ,UAAUuD,MAAV,GAAmBvD,UAAUwD,OAA7B;;AAIAxD,UAAUyD,MAAV,GAAmB,UAASC,UAAT,EAAqB;EAGtC,MAAMC,SAASC,KAAKC,KAAL,CAAWH,UAAX,CAAf;;EACA,IAAItB,MAAMuB,MAAN,CAAJ,EAAmB;IAEjB,OAAO,KAAP;EAAO;;EAIT,MAAMG,OAAO,IAAIF,IAAJ,CAASD,MAAT,CAAb;EACA,OAAOzD,OAAO4D,KAAKC,WAAL,EAAP,EAA2BC,OAA3B,EAAP;AAAkC,CAXpC;;AAcArB,QAAQ3C,SAAR,GAAoBA,SAApB","names":["_","require","validator","cloneDeep","moment","extensions","extend","name","fn","notEmpty","str","match","len","min","max","isLength","isUrl","isURL","isIPv6","isIP","isIPv4","notIn","values","isIn","regex","pattern","modifiers","Object","prototype","toString","call","slice","RegExp","notRegex","isDecimal","val","number","parseFloat","isNaN","not","contains","elem","includes","notContains","is","exports","isImmutable","value","validatorArgs","field","modelInstance","isNewRecord","dataValues","_previousDataValues","notNull","forEach","key","isNull","isEmpty","isDate","dateString","parsed","Date","parse","date","toISOString","isValid"],"sources":["/Users/aurele/node_modules/sequelize/src/utils/validator-extras.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst validator = _.cloneDeep(require('validator'));\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n\n    return this;\n  },\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str += '';\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\n\n// instance based validators\nvalidator.isImmutable = function(value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\n\n// extra validators\nvalidator.notNull = function(val) {\n  return val !== null && val !== undefined;\n};\n\n// https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\n// map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\nvalidator.isNull = validator.isEmpty;\n\n// isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\nvalidator.isDate = function(dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  }\n  // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;\n"]},"metadata":{},"sourceType":"script"}