{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n\n        if (double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n\n        double = !double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n\n      if (double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n\n      double = !double;\n    }\n  }\n\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isISIN","_assertString","_interopRequireDefault","require","obj","__esModule","isin","str","test","double","sum","i","length","charCodeAt","lo","hi","Math","trunc","_i","_arr","digit","_digit","check","module"],"sources":["/Users/aurele/node_modules/validator/lib/isISIN.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n\n        if (double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n\n        double = !double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n\n      if (double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n\n      double = !double;\n    }\n  }\n\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}