{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Op = require(\"../../../operators\");\n\nconst Utils = require(\"../../../utils\");\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: \"=\",\n    [Op.ne]: \"!=\",\n    [Op.gte]: \">=\",\n    [Op.gt]: \">\",\n    [Op.lte]: \"<=\",\n    [Op.lt]: \"<\",\n    [Op.not]: \"IS NOT\",\n    [Op.is]: \"IS\",\n    [Op.in]: \"IN\",\n    [Op.notIn]: \"NOT IN\",\n    [Op.like]: \"LIKE\",\n    [Op.notLike]: \"NOT LIKE\",\n    [Op.iLike]: \"ILIKE\",\n    [Op.notILike]: \"NOT ILIKE\",\n    [Op.startsWith]: \"LIKE\",\n    [Op.endsWith]: \"LIKE\",\n    [Op.substring]: \"LIKE\",\n    [Op.regexp]: \"~\",\n    [Op.notRegexp]: \"!~\",\n    [Op.iRegexp]: \"~*\",\n    [Op.notIRegexp]: \"!~*\",\n    [Op.between]: \"BETWEEN\",\n    [Op.notBetween]: \"NOT BETWEEN\",\n    [Op.overlap]: \"&&\",\n    [Op.contains]: \"@>\",\n    [Op.contained]: \"<@\",\n    [Op.adjacent]: \"-|-\",\n    [Op.strictLeft]: \"<<\",\n    [Op.strictRight]: \">>\",\n    [Op.noExtendRight]: \"&<\",\n    [Op.noExtendLeft]: \"&>\",\n    [Op.any]: \"ANY\",\n    [Op.all]: \"ALL\",\n    [Op.and]: \" AND \",\n    [Op.or]: \" OR \",\n    [Op.col]: \"COL\",\n    [Op.placeholder]: \"$$PLACEHOLDER$$\",\n    [Op.match]: \"@@\"\n  },\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = __spreadValues({}, aliases);\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n\n      obj[prop] = item;\n    });\n\n    return obj;\n  }\n\n};\nmodule.exports = OperatorHelpers;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAMC,KAAKD,QAAQ,oBAAR,CAAX;;AACA,MAAME,QAAQF,QAAQ,gBAAR,CAAd;;AAEA,MAAMG,kBAAkB;EACtBC,aAAa;IAAA,CACVH,GAAGI,EADO,GACF,GADE;IACF,CACRJ,GAAGK,EADK,GACA,IAFE;IAEF,CACRL,GAAGM,GADK,GACC,IAHC;IAGD,CACTN,GAAGO,EADM,GACD,GAJE;IAIF,CACRP,GAAGQ,GADK,GACC,IALC;IAKD,CACTR,GAAGS,EADM,GACD,GANE;IAMF,CACRT,GAAGU,GADK,GACC,QAPC;IAOD,CACTV,GAAGW,EADM,GACD,IARE;IAQF,CACRX,GAAGY,EADK,GACA,IATE;IASF,CACRZ,GAAGa,KADK,GACG,QAVD;IAUC,CACXb,GAAGc,IADQ,GACD,MAXA;IAWA,CACVd,GAAGe,OADO,GACG,UAZH;IAYG,CACbf,GAAGgB,KADU,GACF,OAbD;IAaC,CACXhB,GAAGiB,QADQ,GACG,WAdJ;IAcI,CACdjB,GAAGkB,UADW,GACE,MAfN;IAeM,CAChBlB,GAAGmB,QADa,GACF,MAhBJ;IAgBI,CACdnB,GAAGoB,SADW,GACC,MAjBL;IAiBK,CACfpB,GAAGqB,MADY,GACH,GAlBF;IAkBE,CACZrB,GAAGsB,SADS,GACG,IAnBL;IAmBK,CACftB,GAAGuB,OADY,GACF,IApBH;IAoBG,CACbvB,GAAGwB,UADU,GACG,KArBN;IAqBM,CAChBxB,GAAGyB,OADa,GACH,SAtBH;IAsBG,CACbzB,GAAG0B,UADU,GACG,aAvBN;IAuBM,CAChB1B,GAAG2B,OADa,GACH,IAxBH;IAwBG,CACb3B,GAAG4B,QADU,GACC,IAzBJ;IAyBI,CACd5B,GAAG6B,SADW,GACC,IA1BL;IA0BK,CACf7B,GAAG8B,QADY,GACD,KA3BJ;IA2BI,CACd9B,GAAG+B,UADW,GACE,IA5BN;IA4BM,CAChB/B,GAAGgC,WADa,GACC,IA7BP;IA6BO,CACjBhC,GAAGiC,aADc,GACE,IA9BT;IA8BS,CACnBjC,GAAGkC,YADgB,GACD,IA/BR;IA+BQ,CAClBlC,GAAGmC,GADe,GACT,KAhCC;IAgCD,CACTnC,GAAGoC,GADM,GACA,KAjCC;IAiCD,CACTpC,GAAGqC,GADM,GACA,OAlCC;IAkCD,CACTrC,GAAGsC,EADM,GACD,MAnCE;IAmCF,CACRtC,GAAGuC,GADK,GACC,KApCC;IAoCD,CACTvC,GAAGwC,WADM,GACQ,iBArCP;IAqCO,CACjBxC,GAAGyC,KADc,GACN;EAtCD,CADS;EA0CtBC,mBAAmB,EA1CG;;EA4CtBC,oBAAoBC,OAApB,EAA6B;IAC3B,IAAI,CAACA,OAAD,IAAY9C,EAAE+C,OAAF,CAAUD,OAAV,CAAhB,EAAoC;MAClC,KAAKF,iBAAL,GAAyB,KAAzB;IAAyB,CAD3B,MAEO;MACL,KAAKA,iBAAL,GAAyBI,mBAAKF,OAAL,CAAzB;IAA8B;EAAA,CAhDZ;;EAoDtBG,gBAAgBC,IAAhB,EAAsB;IACpB,MAAMC,MAAM,EAAZ;;IACA,IAAI,CAAC,KAAKP,iBAAV,EAA6B;MAC3B,OAAOM,IAAP;IAAO;;IAGT/C,MAAMiD,YAAN,CAAmBF,IAAnB,EAAyBG,OAAzB,CAAiCC,MAAM;MACrC,MAAMC,OAAOL,KAAKI,EAAL,CAAb;;MACA,IAAItD,EAAEwD,aAAF,CAAgBD,IAAhB,CAAJ,EAA2B;QACzBJ,IAAIG,EAAJ,IAAU,KAAKL,eAAL,CAAqBM,IAArB,CAAV;MAA+B,CADjC,MAEO;QACLJ,IAAIG,EAAJ,IAAUC,IAAV;MAAU;IAAA,CALd;;IASAvD,EAAEyD,MAAF,CAASP,IAAT,EAAe,CAACK,IAAD,EAAOG,IAAP,KAAgB;MAC7BA,OAAO,KAAKd,iBAAL,CAAuBc,IAAvB,KAAgCA,IAAvC;;MACA,IAAI1D,EAAEwD,aAAF,CAAgBD,IAAhB,CAAJ,EAA2B;QACzBA,OAAO,KAAKN,eAAL,CAAqBM,IAArB,CAAP;MAA4B;;MAE9BJ,IAAIO,IAAJ,IAAYH,IAAZ;IAAY,CALd;;IAOA,OAAOJ,GAAP;EAAO;;AA1Ea,CAAxB;AA8EAQ,OAAOC,OAAP,GAAiBxD,eAAjB","names":["_","require","Op","Utils","OperatorHelpers","OperatorMap","eq","ne","gte","gt","lte","lt","not","is","in","notIn","like","notLike","iLike","notILike","startsWith","endsWith","substring","regexp","notRegexp","iRegexp","notIRegexp","between","notBetween","overlap","contains","contained","adjacent","strictLeft","strictRight","noExtendRight","noExtendLeft","any","all","and","or","col","placeholder","match","OperatorsAliasMap","setOperatorsAliases","aliases","isEmpty","__spreadValues","_replaceAliases","orig","obj","getOperators","forEach","op","item","isPlainObject","forOwn","prop","module","exports"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/abstract/query-generator/operators.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.match]: '@@'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = { ...aliases };\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"]},"metadata":{},"sourceType":"script"}