{"ast":null,"code":"import { baseUrl } from \"./baseUrl\";\nexport const verifyAuth = async token => {\n  try {\n    const response = await fetch(`${baseUrl}/auth/verify`, {\n      method: \"GET\",\n      headers: {\n        token: token\n      }\n    });\n    const parsRes = await response.json();\n    return parsRes;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const register = async () => {\n  try {} catch (error) {}\n};\n\nconst onSubmitForm = async e => {\n  e.preventDefault();\n\n  try {\n    const body = {\n      first_name,\n      last_name,\n      email,\n      password\n    };\n    const response = await fetch(`${baseUrl}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (response.status === 200) {\n      const parsRes = await response.json(); //We get the object containing jwToken here\n\n      localStorage.setItem(\"token\", parsRes.token); //We store the token in localStorage\n\n      setIsAuthenticated(true); //We change auth state to true\n\n      toast.success(\"Registered successfully\");\n    } else {\n      setIsAuthenticated(false); //We change auth state to false\n\n      toast.error(await response.json());\n    }\n  } catch (err) {\n    console.error(err.message);\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    const body = {\n      email,\n      password\n    };\n    const response = await fetch(`${baseUrl}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    throw new Error(`Failed to login: ${err.message}`);\n  }\n};","map":{"version":3,"names":["baseUrl","verifyAuth","token","response","fetch","method","headers","parsRes","json","err","console","error","message","register","onSubmitForm","e","preventDefault","body","first_name","last_name","email","password","JSON","stringify","status","localStorage","setItem","setIsAuthenticated","toast","success","login","data","Error"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/src/api/auth.js"],"sourcesContent":["import { baseUrl } from \"./baseUrl\";\n\nexport const verifyAuth = async (token) => {\n  try {\n    const response = await fetch(`${baseUrl}/auth/verify`, {\n      method: \"GET\",\n      headers: { token: token },\n    });\n    const parsRes = await response.json();\n    return parsRes;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\n\nexport const register = async ( ) => {\n  try {\n    \n  } catch (error) {\n    \n  }\n}\n\nconst onSubmitForm = async (e) => {\n  e.preventDefault();\n  try {\n    const body = { first_name, last_name, email, password };\n    const response = await fetch(`${baseUrl}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (response.status === 200) {\n      const parsRes = await response.json(); //We get the object containing jwToken here\n      localStorage.setItem(\"token\", parsRes.token); //We store the token in localStorage\n      setIsAuthenticated(true); //We change auth state to true\n      toast.success(\"Registered successfully\");\n    } else {\n      setIsAuthenticated(false); //We change auth state to false\n      toast.error(await response.json());\n    }\n  } catch (err) {\n    console.error(err.message);\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    const body = { email, password };\n    const response = await fetch(`${baseUrl}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    throw new Error(`Failed to login: ${err.message}`);\n  }\n}\n\n\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,cAAZ,EAA2B;MACrDK,MAAM,EAAE,KAD6C;MAErDC,OAAO,EAAE;QAAEJ,KAAK,EAAEA;MAAT;IAF4C,CAA3B,CAA5B;IAIA,MAAMK,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB;IACA,OAAOD,OAAP;EACD,CAPD,CAOE,OAAOE,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CAXM;AAaP,OAAO,MAAMC,QAAQ,GAAG,YAAa;EACnC,IAAI,CAEH,CAFD,CAEE,OAAOF,KAAP,EAAc,CAEf;AACF,CANM;;AAQP,MAAMG,YAAY,GAAG,MAAOC,CAAP,IAAa;EAChCA,CAAC,CAACC,cAAF;;EACA,IAAI;IACF,MAAMC,IAAI,GAAG;MAAEC,UAAF;MAAcC,SAAd;MAAyBC,KAAzB;MAAgCC;IAAhC,CAAb;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,gBAAZ,EAA6B;MACvDK,MAAM,EAAE,MAD+C;MAEvDC,OAAO,EAAE;QACP,gBAAgB;MADT,CAF8C;MAKvDW,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;IALiD,CAA7B,CAA5B;;IAQA,IAAId,QAAQ,CAACqB,MAAT,KAAoB,GAAxB,EAA6B;MAC3B,MAAMjB,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAtB,CAD2B,CACY;;MACvCiB,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BnB,OAAO,CAACL,KAAtC,EAF2B,CAEmB;;MAC9CyB,kBAAkB,CAAC,IAAD,CAAlB,CAH2B,CAGD;;MAC1BC,KAAK,CAACC,OAAN,CAAc,yBAAd;IACD,CALD,MAKO;MACLF,kBAAkB,CAAC,KAAD,CAAlB,CADK,CACsB;;MAC3BC,KAAK,CAACjB,KAAN,CAAY,MAAMR,QAAQ,CAACK,IAAT,EAAlB;IACD;EACF,CAnBD,CAmBE,OAAOC,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CAxBD;;AA0BA,OAAO,MAAMkB,KAAK,GAAG,OAAOV,KAAP,EAAcC,QAAd,KAA2B;EAC9C,IAAI;IACF,MAAMJ,IAAI,GAAG;MAAEG,KAAF;MAASC;IAAT,CAAb;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,aAAZ,EAA0B;MACpDK,MAAM,EAAE,MAD4C;MAEpDC,OAAO,EAAE;QACP,gBAAgB;MADT,CAF2C;MAKpDW,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;IAL8C,CAA1B,CAA5B;IAOA,MAAMc,IAAI,GAAG,MAAM5B,QAAQ,CAACK,IAAT,EAAnB;IACA,OAAOuB,IAAP;EACD,CAXD,CAWE,OAAOtB,GAAP,EAAY;IACZ,MAAM,IAAIuB,KAAJ,CAAW,oBAAmBvB,GAAG,CAACG,OAAQ,EAA1C,CAAN;EACD;AACF,CAfM"},"metadata":{},"sourceType":"module"}