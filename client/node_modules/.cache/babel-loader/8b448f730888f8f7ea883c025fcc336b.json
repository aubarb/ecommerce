{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  default: () => database_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nclass DatabaseError extends import_base_error.default {\n  constructor(parent) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(parent.message);\n\n    __publicField(this, \"parent\");\n\n    __publicField(this, \"original\");\n\n    __publicField(this, \"sql\");\n\n    __publicField(this, \"parameters\");\n\n    var _a;\n\n    this.name = \"SequelizeDatabaseError\";\n    this.parent = parent;\n    this.original = parent;\n    this.sql = parent.sql;\n    this.parameters = (_a = parent.parameters) != null ? _a : {};\n\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n}\n\nvar database_error_default = DatabaseError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;AAAA;;AAAA,wBAA+DC,mCAA/D;;AAiBA,4BACUC,yBADV,CAGA;EAUEC,YAAYC,MAAZ,EAAqE;IAAA,IAA5BC,OAA4B,uEAAJ,EAAI;IACnE,MAAMD,OAAOE,OAAb;;IAVFC;;IACAA;;IACAA;;IACAA;;IAxBF;;IAgCI,KAAKC,IAAL,GAAY,wBAAZ;IAEA,KAAKJ,MAAL,GAAcA,MAAd;IACA,KAAKK,QAAL,GAAgBL,MAAhB;IAEA,KAAKM,GAAL,GAAWN,OAAOM,GAAlB;IACA,KAAKC,UAAL,GAAkB,aAAOA,UAAP,iBAAqB,EAAvC;;IAEA,IAAIN,QAAQO,KAAZ,EAAmB;MACjB,KAAKA,KAAL,GAAaP,QAAQO,KAArB;IAAqB;EAAA;;AArB3B;;AA0BA,IAAOC,yBAAQC,aAAf","names":["__export","default","__toModule","import_base_error","constructor","parent","options","message","__publicField","name","original","sql","parameters","stack","database_error_default","DatabaseError"],"sources":["/Users/aurele/node_modules/sequelize/src/errors/database-error.ts"],"sourcesContent":["import BaseError, { CommonErrorProperties, ErrorOptions } from './base-error';\n\nexport interface DatabaseErrorParent\n  extends Error,\n    Pick<CommonErrorProperties, 'sql'> {\n  /** The parameters for the sql that triggered the error */\n  readonly parameters?: object;\n}\n\nexport interface DatabaseErrorSubclassOptions extends ErrorOptions {\n  parent?: DatabaseErrorParent;\n  message?: string;\n}\n\n/**\n * A base class for all database related errors.\n */\nclass DatabaseError\n  extends BaseError\n  implements DatabaseErrorParent, CommonErrorProperties\n{\n  parent: Error;\n  original: Error;\n  sql: string;\n  parameters: object;\n\n  /**\n   * @param parent The database specific error which triggered this one\n   * @param options\n   */\n  constructor(parent: DatabaseErrorParent, options: ErrorOptions = {}) {\n    super(parent.message);\n    this.name = 'SequelizeDatabaseError';\n\n    this.parent = parent;\n    this.original = parent;\n\n    this.sql = parent.sql;\n    this.parameters = parent.parameters ?? {};\n\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n}\n\nexport default DatabaseError;\n"]},"metadata":{},"sourceType":"script"}