{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst {\n  AbstractDialect\n} = require(\"../abstract\");\n\nconst {\n  OracleConnectionManager\n} = require(\"./connection-manager\");\n\nconst {\n  OracleQuery\n} = require(\"./query\");\n\nconst {\n  OracleQueryGenerator\n} = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").oracle;\n\nconst {\n  OracleQueryInterface\n} = require(\"./query-interface\");\n\nclass OracleDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new OracleConnectionManager(this, sequelize);\n    this.connectionManager.initPools();\n    this.queryGenerator = new OracleQueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new OracleQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nOracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  IGNORE: \" IGNORE\",\n  lock: false,\n  forShare: \" IN SHARE MODE\",\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false\n  },\n  constraints: {\n    restrict: false\n  },\n  returnValues: false,\n  returnIntoValues: true,\n  \"ORDER NULLS\": true,\n  schemas: true,\n  updateOnDuplicate: false,\n  indexViaAlter: false,\n  NUMERIC: true,\n  JSON: true,\n  upserts: true,\n  bulkDefault: true,\n  topLevelOrderByRequired: true,\n  GEOMETRY: false\n});\nOracleDialect.prototype.defaultVersion = \"18.0.0\";\nOracleDialect.prototype.Query = OracleQuery;\nOracleDialect.prototype.queryGenerator = OracleQueryGenerator;\nOracleDialect.prototype.DataTypes = DataTypes;\nOracleDialect.prototype.name = \"oracle\";\nOracleDialect.prototype.TICK_CHAR = '\"';\nOracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;\nOracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;\nmodule.exports = OracleDialect;","map":{"version":3,"mappings":";;AAIA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAM;EAAEC;AAAF,IAAsBD,QAAQ,aAAR,CAA5B;;AACA,MAAM;EAAEE;AAAF,IAA8BF,QAAQ,sBAAR,CAApC;;AACA,MAAM;EAAEG;AAAF,IAAkBH,QAAQ,SAAR,CAAxB;;AACA,MAAM;EAAEI;AAAF,IAA2BJ,QAAQ,mBAAR,CAAjC;;AACA,MAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,MAA9C;;AACA,MAAM;EAAEC;AAAF,IAA2BP,QAAQ,mBAAR,CAAjC;;AAEA,4BAA4BC,eAA5B,CAA4C;EAC1CO,YAAYC,SAAZ,EAAuB;IACrB;IACA,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,iBAAL,GAAyB,IAAIR,uBAAJ,CAA4B,IAA5B,EAAkCO,SAAlC,CAAzB;IACA,KAAKC,iBAAL,CAAuBC,SAAvB;IACA,KAAKC,cAAL,GAAsB,IAAIR,oBAAJ,CAAyB;MAC7CS,UAAU,IADmC;MAE7CJ;IAF6C,CAAzB,CAAtB;IAIA,KAAKK,cAAL,GAAsB,IAAIP,oBAAJ,CAAyBE,SAAzB,EAAoC,KAAKG,cAAzC,CAAtB;EAA+D;;AAVvB;;AAc5CG,cAAcC,SAAd,CAAwBC,QAAxB,GAAmClB,EAAEmB,KAAF,CAAQnB,EAAEoB,SAAF,CAAYlB,gBAAgBe,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;EAC1F,aAAa,IAD6E;EAE1F,mBAAmB,IAFuE;EAG1FG,QAAQ,SAHkF;EAI1FC,MAAM,KAJoF;EAK1FC,UAAU,gBALgF;EAM1FC,OAAO;IACLC,SAAS,KADJ;IAELC,QAAQ,KAFH;IAGLC,QAAQ,KAHH;IAILC,MAAM,KAJD;IAKLC,OAAO;EALF,CANmF;EAa1FC,aAAa;IACXC,UAAU;EADC,CAb6E;EAgB1FC,cAAc,KAhB4E;EAiB1FC,kBAAkB,IAjBwE;EAkB1F,eAAe,IAlB2E;EAmB1FC,SAAS,IAnBiF;EAoB1FC,mBAAmB,KApBuE;EAqB1FC,eAAe,KArB2E;EAsB1FC,SAAS,IAtBiF;EAuB1FC,MAAM,IAvBoF;EAwB1FC,SAAS,IAxBiF;EAyB1FC,aAAa,IAzB6E;EA0B1FC,yBAAyB,IA1BiE;EA2B1FC,UAAU;AA3BgF,CAAzD,CAAnC;AA8BA1B,cAAcC,SAAd,CAAwB0B,cAAxB,GAAyC,QAAzC;AACA3B,cAAcC,SAAd,CAAwB2B,KAAxB,GAAgCxC,WAAhC;AACAY,cAAcC,SAAd,CAAwBJ,cAAxB,GAAyCR,oBAAzC;AACAW,cAAcC,SAAd,CAAwBX,SAAxB,GAAoCA,SAApC;AACAU,cAAcC,SAAd,CAAwB4B,IAAxB,GAA+B,QAA/B;AACA7B,cAAcC,SAAd,CAAwB6B,SAAxB,GAAoC,GAApC;AACA9B,cAAcC,SAAd,CAAwB8B,cAAxB,GAAyC/B,cAAcC,SAAd,CAAwB6B,SAAjE;AACA9B,cAAcC,SAAd,CAAwB+B,eAAxB,GAA0ChC,cAAcC,SAAd,CAAwB6B,SAAlE;AAEAG,OAAOC,OAAP,GAAiBlC,aAAjB","names":["_","require","AbstractDialect","OracleConnectionManager","OracleQuery","OracleQueryGenerator","DataTypes","oracle","OracleQueryInterface","constructor","sequelize","connectionManager","initPools","queryGenerator","_dialect","queryInterface","OracleDialect","prototype","supports","merge","cloneDeep","IGNORE","lock","forShare","index","collate","length","parser","type","using","constraints","restrict","returnValues","returnIntoValues","schemas","updateOnDuplicate","indexViaAlter","NUMERIC","JSON","upserts","bulkDefault","topLevelOrderByRequired","GEOMETRY","defaultVersion","Query","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/oracle/index.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst _ = require('lodash');\nconst { AbstractDialect } = require('../abstract');\nconst { OracleConnectionManager } = require('./connection-manager');\nconst { OracleQuery } = require('./query');\nconst { OracleQueryGenerator } = require('./query-generator');\nconst DataTypes = require('../../data-types').oracle;\nconst { OracleQueryInterface } = require('./query-interface');\n\nclass OracleDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new OracleConnectionManager(this, sequelize);\n    this.connectionManager.initPools();\n    this.queryGenerator = new OracleQueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new OracleQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nOracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  IGNORE: ' IGNORE',\n  lock: false,\n  forShare: ' IN SHARE MODE',\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false\n  },\n  constraints: {\n    restrict: false\n  },\n  returnValues: false,\n  returnIntoValues: true,\n  'ORDER NULLS': true,\n  schemas: true,\n  updateOnDuplicate: false,\n  indexViaAlter: false,\n  NUMERIC: true,\n  JSON: true,\n  upserts: true,\n  bulkDefault: true,\n  topLevelOrderByRequired: true,\n  GEOMETRY: false\n});\n\nOracleDialect.prototype.defaultVersion = '18.0.0';\nOracleDialect.prototype.Query = OracleQuery;\nOracleDialect.prototype.queryGenerator = OracleQueryGenerator;\nOracleDialect.prototype.DataTypes = DataTypes;\nOracleDialect.prototype.name = 'oracle';\nOracleDialect.prototype.TICK_CHAR = '\"';\nOracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;\nOracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;\n\nmodule.exports = OracleDialect;\n"]},"metadata":{},"sourceType":"script"}