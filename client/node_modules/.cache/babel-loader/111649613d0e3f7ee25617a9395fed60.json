{"ast":null,"code":"\"use strict\";\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\");\n          return \"VARBINARY(256)\";\n        }\n\n        warn(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n\n      return \"VARBINARY(MAX)\";\n    }\n\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n\n      return `BINARY(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n\n      return options.escape(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\");\n          return \"NVARCHAR(256)\";\n        }\n\n        warn(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n\n      return \"NVARCHAR(MAX)\";\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._decimals) {\n        warn(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n\n      if (this._unsigned) {\n        warn(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n\n      if (this._zerofill) {\n        warn(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["moment","require","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","DATE","types","mssql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","toSql","toLowerCase","_hexify","hex","_binary","_stringify","value","prototype","escape","_bindParam","bindParam","Buffer","from","NOW","format","constructor","removeUnsupportedIntegerOptions","decimals","_decimals"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mssql/data-types.js"],"sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}