{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst DataTypes = require(\"./data-types\");\n\nconst SqlString = require(\"./sql-string\");\n\nconst _ = require(\"lodash\");\n\nconst baseIsNative = require(\"lodash/_baseIsNative\");\n\nconst uuidv1 = require(\"uuid\").v1;\n\nconst uuidv4 = require(\"uuid\").v4;\n\nconst operators = require(\"./operators\");\n\nconst operatorsSet = new Set(Object.values(operators));\n\nlet inflection = require(\"inflection\");\n\nexports.classToInvokable = require(\"./utils/class-to-invokable\").classToInvokable;\nexports.joinSQLFragments = require(\"./utils/join-sql-fragments\").joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\n\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\n\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\n\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return [\"string\", \"number\", \"boolean\"].includes(type);\n}\n\nexports.isPrimitive = isPrimitive;\n\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    if (!_.isPlainObject(objectValue) && objectValue !== void 0) {\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n\n      return objectValue;\n    }\n  });\n}\n\nexports.mergeDefaults = mergeDefaults;\n\nfunction merge() {\n  const result = {};\n\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== void 0) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n\n  return result;\n}\n\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\n\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\n\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\n\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\n\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\n\nexports.pluralize = pluralize;\n\nfunction format(arr, dialect) {\n  const timeZone = null;\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\n\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, elem => {\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return void 0;\n    }\n\n    if (onlyPlain || typeof elem === \"object\") {\n      return elem;\n    }\n\n    if (elem && typeof elem.clone === \"function\") {\n      return elem.clone();\n    }\n  });\n}\n\nexports.cloneDeep = cloneDeep;\n\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(v => !Model._virtualAttributes.has(v));\n  }\n\n  mapOptionFieldNames(options, Model);\n  return options;\n}\n\nexports.mapFinderOptions = mapFinderOptions;\n\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(attr => {\n      if (typeof attr !== \"string\") return attr;\n\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\n\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    attributes = cloneDeep(attributes);\n    getComplexKeys(attributes).forEach(attribute => {\n      const rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes.HSTORE || rawAttribute.type instanceof DataTypes.JSON))) {\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach((where, index) => {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n    });\n  }\n\n  return attributes;\n}\n\nexports.mapWhereFieldNames = mapWhereFieldNames;\n\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n\n  for (const attr of fields) {\n    if (dataValues[attr] !== void 0 && !Model._virtualAttributes.has(attr)) {\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n\n  return values;\n}\n\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === \"string\" && value[0] === \"$\" && value[value.length - 1] === \"$\";\n}\n\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(arg => _.isPlainObject(arg) || arg instanceof Where);\n}\n\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\n\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === \"function\") {\n    const tmp = value();\n\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n\n    return tmp;\n  }\n\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n\n  if (_.isPlainObject(value)) {\n    return __spreadValues({}, value);\n  }\n\n  return value;\n}\n\nexports.toDefaultValue = toDefaultValue;\n\nfunction defaultValueSchemable(value) {\n  if (value === void 0) {\n    return false;\n  }\n\n  if (value instanceof DataTypes.NOW) {\n    return false;\n  }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {\n    return false;\n  }\n\n  return typeof value !== \"function\";\n}\n\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    const _hash = {};\n\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith(\"Id\") || val !== null && val !== void 0) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\n\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\nconst dialects = /* @__PURE__ */new Set([\"mariadb\", \"mysql\", \"postgres\", \"sqlite\", \"mssql\", \"db2\", \"oracle\"]);\n\nfunction now(dialect) {\n  const d = new Date();\n\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n\n  return d;\n}\n\nexports.now = now;\nconst TICK_CHAR = \"`\";\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\n\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, \"g\"), \"\");\n}\n\nexports.removeTicks = removeTicks;\n\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  const flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(key => {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n\n      if (typeof obj[key] === \"object\" && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, void 0);\n}\n\nexports.flattenObjectDeep = flattenObjectDeep;\n\nclass SequelizeMethod {}\n\nexports.SequelizeMethod = SequelizeMethod;\n\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n\n}\n\nexports.Fn = Fn;\n\nclass Col extends SequelizeMethod {\n  constructor(col) {\n    super();\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (args.length > 0) {\n      col = args;\n    }\n\n    this.col = col;\n  }\n\n}\n\nexports.Col = Col;\n\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || \"\").trim();\n    this.json = json || false;\n  }\n\n}\n\nexports.Cast = Cast;\n\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n\n}\n\nexports.Literal = Literal;\n\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n\n}\n\nexports.Json = Json;\n\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n\n    if (logic === void 0) {\n      logic = comparator;\n      comparator = \"=\";\n    }\n\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n\n}\n\nexports.Where = Where;\n\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\n\nexports.getOperators = getOperators;\n\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\n\nexports.getComplexKeys = getComplexKeys;\n\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\n\nexports.getComplexSize = getComplexSize;\n\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\n\nexports.isWhereEmpty = isWhereEmpty;\n\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\n\nexports.generateEnumName = generateEnumName;\n\nfunction camelizeObjectKeys(obj) {\n  const newObj = new Object();\n  Object.keys(obj).forEach(key => {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\n\nexports.camelizeObjectKeys = camelizeObjectKeys;\n\nfunction defaults(object) {\n  object = Object(object);\n\n  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    sources[_key2 - 1] = arguments[_key2];\n  }\n\n  sources.forEach(source => {\n    if (source) {\n      source = Object(source);\n      getComplexKeys(source).forEach(key => {\n        const value = object[key];\n\n        if (value === void 0 || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n\nexports.defaults = defaults;\n\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, \"name\")) {\n    const fields = index.fields.map(field => typeof field === \"string\" ? field : field.name || field.attribute);\n    index.name = underscore(`${tableName}_${fields.join(\"_\")}`);\n  }\n\n  return index;\n}\n\nexports.nameIndex = nameIndex;\n\nfunction intersects(arr1, arr2) {\n  return arr1.some(v => arr2.includes(v));\n}\n\nexports.intersects = intersects;\n\nfunction safeStringifyJson(value) {\n  return JSON.stringify(value, (key, value2) => {\n    if (typeof value2 === \"bigint\") {\n      return String(value2);\n    }\n\n    return value2;\n  });\n}\n\nexports.safeStringifyJson = safeStringifyJson;","map":{"version":3,"mappings":"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","names":["DataTypes","require","SqlString","_","baseIsNative","uuidv1","v1","uuidv4","v4","operators","operatorsSet","Set","Object","values","inflection","exports","classToInvokable","joinSQLFragments","_inflection","useInflection","str","condition","result","camelize","camelizeIf","underscore","underscoredIf","val","type","includes","isPrimitive","a","b","mergeWith","objectValue","sourceValue","isPlainObject","isFunction","mergeDefaults","obj","arguments","forOwn","value","key","merge","Array","isArray","concat","index","count","add","slice","spliceStr","trim","replace","match","c","toUpperCase","singularize","pluralize","arr","dialect","timeZone","format","sql","parameters","formatNamedParameters","onlyPlain","cloneDeepWith","elem","clone","cloneDeep","options","Model","attributes","_injectDependentVirtualAttributes","filter","v","_virtualAttributes","has","mapOptionFieldNames","mapFinderOptions","map","attr","rawAttributes","field","where","mapWhereFieldNames","getComplexKeys","forEach","attribute","rawAttribute","fieldName","HSTORE","JSON","dataValues","fields","mapValueFieldNames","length","isColString","some","arg","Where","canTreatArrayAsAnd","tableName1","tableName2","toLowerCase","combineTableNames","tmp","ABSTRACT","toSql","UUIDV1","UUIDV4","NOW","now","__spreadValues","toDefaultValue","defaultValueSchemable","hash","omitNull","allowNull","_hash","forIn","endsWith","removeNullValuesFromHash","dialects","d","Date","setMilliseconds","TICK_CHAR","s","tickChar","removeTicks","addTicks","RegExp","flattenedObj","subPath","keys","pathToProperty","flattenObject","get","flattenObjectDeep","SequelizeMethod","constructor","fn","args","Fn","col","Col","json","Cast","Literal","conditionsOrPath","isObject","conditions","path","Json","comparator","logic","getOwnPropertySymbols","getOperators","getComplexSize","isEmpty","isWhereEmpty","tableName","columnName","generateEnumName","newObj","camelizeObjectKeys","object","sources","source","eq","prototype","hasOwnProperty","call","defaults","name","join","nameIndex","arr1","arr2","intersects","stringify","value2","String","safeStringifyJson"],"sources":["/Users/aurele/node_modules/sequelize/src/utils.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('./data-types');\nconst SqlString = require('./sql-string');\nconst _ = require('lodash');\nconst baseIsNative = require('lodash/_baseIsNative');\nconst uuidv1 = require('uuid').v1;\nconst uuidv4 = require('uuid').v4;\nconst operators = require('./operators');\nconst operatorsSet = new Set(Object.values(operators));\n\nlet inflection = require('inflection');\n\nexports.classToInvokable = require('./utils/class-to-invokable').classToInvokable;\nexports.joinSQLFragments = require('./utils/join-sql-fragments').joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return ['string', 'number', 'boolean'].includes(type);\n}\nexports.isPrimitive = isPrimitive;\n\n// Same concept as _.merge, but don't overwrite properties that have already been assigned\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!_.isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n      return objectValue;\n    }\n  });\n}\nexports.mergeDefaults = mergeDefaults;\n\n// An alternative to _.merge, which doesn't clone its arguments\n// Cloning is a bad idea because options arguments may contain references to sequelize\n// models - which again reference database libs which don't like to be cloned (in particular pg-native)\nfunction merge() {\n  const result = {};\n\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== undefined) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n\n  return result;\n}\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\nexports.pluralize = pluralize;\n\n/**\n * @deprecated use {@link injectReplacements} instead. This method has been removed in v7.\n *\n * @param {unknown[]} arr - first item is the SQL, following items are the positional replacements.\n * @param {AbstractDialect} dialect\n */\nfunction format(arr, dialect) {\n  const timeZone = null;\n  // Make a clone of the array beacuse format modifies the passed args\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\nexports.format = format;\n\n/**\n * @deprecated use {@link injectReplacements} instead. This method has been removed in v7.\n *\n * @param {string} sql\n * @param {object} parameters\n * @param {AbstractDialect} dialect\n */\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, elem => {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return undefined;\n    }\n\n    // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    }\n\n    // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\nexports.cloneDeep = cloneDeep;\n\n/* Expand and normalize finder options */\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(v => !Model._virtualAttributes.has(v));\n  }\n\n  mapOptionFieldNames(options, Model);\n\n  return options;\n}\nexports.mapFinderOptions = mapFinderOptions;\n\n/* Used to map field names in attributes and where conditions */\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(attr => {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attr !== 'string') return attr;\n      // Map attributes to aliased syntax attributes\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    attributes = cloneDeep(attributes);\n    getComplexKeys(attributes).forEach(attribute => {\n      const rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute])\n        && !(rawAttribute && (\n          rawAttribute.type instanceof DataTypes.HSTORE\n          || rawAttribute.type instanceof DataTypes.JSON))) { // Prevent renaming of HSTORE & JSON fields\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach((where, index) => {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n\n    });\n  }\n\n  return attributes;\n}\nexports.mapWhereFieldNames = mapWhereFieldNames;\n\n/* Used to map field names in values */\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n\n  for (const attr of fields) {\n    if (dataValues[attr] !== undefined && !Model._virtualAttributes.has(attr)) {\n      // Field name mapping\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n\n  return values;\n}\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === 'string' && value[0] === '$' && value[value.length - 1] === '$';\n}\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(arg => _.isPlainObject(arg) || arg instanceof Where);\n}\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === 'function') {\n    const tmp = value();\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n    return tmp;\n  }\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n  if (_.isPlainObject(value)) {\n    return { ...value };\n  }\n  return value;\n}\nexports.toDefaultValue = toDefaultValue;\n\n/**\n * Determine if the default value provided exists and can be described\n * in a db schema using the DEFAULT directive.\n *\n * @param  {*} value Any default value.\n * @returns {boolean} yes / no.\n * @private\n */\nfunction defaultValueSchemable(value) {\n  if (value === undefined) { return false; }\n\n  // TODO this will be schemable when all supported db\n  // have been normalized for this case\n  if (value instanceof DataTypes.NOW) { return false; }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) { return false; }\n\n  return typeof value !== 'function';\n}\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    const _hash = {};\n\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith('Id') || val !== null && val !== undefined) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\n\nconst dialects = new Set(['mariadb', 'mysql', 'postgres', 'sqlite', 'mssql', 'db2', 'oracle']);\n\nfunction now(dialect) {\n  const d = new Date();\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n  return d;\n}\nexports.now = now;\n\n// Note: Use the `quoteIdentifier()` and `escape()` methods on the\n// `QueryInterface` instead for more portable code.\n\nconst TICK_CHAR = '`';\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\nexports.removeTicks = removeTicks;\n\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param {object} value an Object\n * @returns {object} a flattened object\n * @private\n */\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  const flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(key => {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, undefined);\n}\nexports.flattenObjectDeep = flattenObjectDeep;\n\n/**\n * Utility functions for representing SQL functions, and columns that should be escaped.\n * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.\n *\n * @private\n */\nclass SequelizeMethod {}\nexports.SequelizeMethod = SequelizeMethod;\n\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n}\nexports.Fn = Fn;\n\nclass Col extends SequelizeMethod {\n  constructor(col, ...args) {\n    super();\n    if (args.length > 0) {\n      col = args;\n    }\n    this.col = col;\n  }\n}\nexports.Col = Col;\n\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || '').trim();\n    this.json = json || false;\n  }\n}\nexports.Cast = Cast;\n\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n}\nexports.Literal = Literal;\n\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n}\nexports.Json = Json;\n\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n    if (logic === undefined) {\n      logic = comparator;\n      comparator = '=';\n    }\n\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n}\nexports.Where = Where;\n\n//Collection of helper methods to make it easier to work with symbol operators\n\n/**\n * getOperators\n *\n * @param  {object} obj\n * @returns {Array<symbol>} All operators properties of obj\n * @private\n */\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\nexports.getOperators = getOperators;\n\n/**\n * getComplexKeys\n *\n * @param  {object} obj\n * @returns {Array<string|symbol>} All keys including operators\n * @private\n */\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\nexports.getComplexKeys = getComplexKeys;\n\n/**\n * getComplexSize\n *\n * @param  {object|Array} obj\n * @returns {number}      Length of object properties including operators if obj is array returns its length\n * @private\n */\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\nexports.getComplexSize = getComplexSize;\n\n/**\n * Returns true if a where clause is empty, even with Symbols\n *\n * @param  {object} obj\n * @returns {boolean}\n * @private\n */\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\nexports.isWhereEmpty = isWhereEmpty;\n\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param {string} tableName\n * @param {string} columnName\n * @returns {string}\n * @private\n */\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\nexports.generateEnumName = generateEnumName;\n\n/**\n * Returns an new Object which keys are camelized\n *\n * @param {object} obj\n * @returns {string}\n * @private\n */\nfunction camelizeObjectKeys(obj) {\n  const newObj = new Object();\n  Object.keys(obj).forEach(key => {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\nexports.camelizeObjectKeys = camelizeObjectKeys;\n\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param {object} object The destination object.\n * @param {...object} [sources] The source objects.\n * @returns {object} Returns `object`.\n * @private\n */\nfunction defaults(object, ...sources) {\n  object = Object(object);\n\n  sources.forEach(source => {\n    if (source) {\n      source = Object(source);\n\n      getComplexKeys(source).forEach(key => {\n        const value = object[key];\n        if (\n          value === undefined ||\n            _.eq(value, Object.prototype[key]) &&\n            !Object.prototype.hasOwnProperty.call(object, key)\n\n        ) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n\n  return object;\n}\nexports.defaults = defaults;\n\n/**\n *\n * @param {object} index\n * @param {Array}  index.fields\n * @param {string} [index.name]\n * @param {string|object} tableName\n *\n * @returns {object}\n * @private\n */\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\n    const fields = index.fields.map(\n      field => typeof field === 'string' ? field : field.name || field.attribute\n    );\n    index.name = underscore(`${tableName}_${fields.join('_')}`);\n  }\n\n  return index;\n}\nexports.nameIndex = nameIndex;\n\n/**\n * Checks if 2 arrays intersect.\n *\n * @param {Array} arr1\n * @param {Array} arr2\n * @private\n */\nfunction intersects(arr1, arr2) {\n  return arr1.some(v => arr2.includes(v));\n}\nexports.intersects = intersects;\n\n/**\n * Stringify a value as JSON with some differences:\n * - bigints are stringified as a json string. (`safeStringifyJson({ val: 1n })` outputs `'{ \"val\": \"1\" }'`).\n *   This is because of a decision by TC39 to not support bigint in JSON.stringify https://github.com/tc39/proposal-bigint/issues/24\n *\n * @param {any} value the value to stringify.\n * @returns {string} the resulting json.\n */\nfunction safeStringifyJson(value /* : any */) /* : string */ {\n  return JSON.stringify(value, (key, value) => {\n    if (typeof value === 'bigint') {\n      return String(value);\n    }\n\n    return value;\n  });\n}\n\nexports.safeStringifyJson = safeStringifyJson;\n"]},"metadata":{},"sourceType":"script"}