{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst Op = require(\"../../operators\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nclass MSSqlQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = __spreadValues({\n      raw: true\n    }, options || {});\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n\n    if (results0.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n\n    if (results.length) {\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = __spreadValues({}, options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n    const attributes = Object.keys(insertValues);\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":{"version":3,"mappings":"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","names":["_","require","Utils","QueryTypes","Op","QueryInterface","tableName","attributeName","options","__spreadValues","raw","findConstraintSql","queryGenerator","getDefaultConstraintQuery","results0","sequelize","query","length","dropConstraintSql","dropConstraintQuery","name","findForeignKeySql","getForeignKeyQuery","results","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","insertValues","updateValues","where","model","wheres","isWhereEmpty","push","indexes","Object","values","uniqueKeys","map","item","fields","concat","_indexes","filter","unique","attributes","keys","index","intersection","field","or","type","UPSERT","sql","upsertQuery","exports","MSSqlQueryInterface"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mssql/query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"]},"metadata":{},"sourceType":"script"}