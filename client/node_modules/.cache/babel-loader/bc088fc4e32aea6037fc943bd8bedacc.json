{"ast":null,"code":"\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"connection:sqlite\");\n\nconst dataTypes = require(\"../../data-types\").sqlite;\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"sqlite\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    if (this.sequelize.options.host === \"localhost\") {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule(\"sqlite3\");\n    this.refreshTypeParser(dataTypes);\n  }\n\n  async _onProcessExit() {\n    await Promise.all(Object.getOwnPropertyNames(this.connections).map(connection => promisify(callback => this.connections[connection].close(callback))()));\n    return super._onProcessExit.call(this);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || \"default\";\n\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== void 0) {\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || \":memory:\";\n    }\n\n    options.inMemory = options.storage === \":memory:\" ? 1 : 0;\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      fs.mkdirSync(path.dirname(options.storage), {\n        recursive: true\n      });\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(options.storage, options.readWriteMode, err => {\n        if (err) return reject(new sequelizeErrors.ConnectionError(err));\n        debug(`connection acquired ${options.uuid}`);\n        resolve(this.connections[options.inMemory || options.uuid]);\n      });\n    });\n\n    if (this.sequelize.config.password) {\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n\n    if (this.sequelize.options.foreignKeys !== false) {\n      connection.run(\"PRAGMA FOREIGN_KEYS=ON\");\n    }\n\n    return connection;\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === \":memory:\" && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["fs","require","path","AbstractConnectionManager","logger","debug","debugContext","dataTypes","sqlite","sequelizeErrors","parserStore","promisify","constructor","dialect","sequelize","options","host","connections","lib","_loadDialectModule","refreshTypeParser","Promise","all","Object","getOwnPropertyNames","map","connection","callback","close","_onProcessExit","call","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","uuid","storage","inMemory","dialectOptions","defaultReadWriteMode","OPEN_READWRITE","OPEN_CREATE","readWriteMode","mode","mkdirSync","dirname","recursive","resolve","reject","Database","err","ConnectionError","config","password","run","escape","foreignKeys","releaseConnection","force","filename","module","exports","ConnectionManager","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/sqlite/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3');\n    this.refreshTypeParser(dataTypes);\n  }\n\n  async _onProcessExit() {\n    await Promise.all(\n      Object.getOwnPropertyNames(this.connections)\n        .map(connection => promisify(callback => this.connections[connection].close(callback))())\n    );\n    return super._onProcessExit.call(this);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n\n    if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== undefined) {\n      // Check explicitely for the storage option to not be set since an empty string signals\n      // SQLite will create a temporary disk-based database in that case.\n      options.storage = this.sequelize.options.storage;\n    } else {\n      options.storage = this.sequelize.options.host || ':memory:';\n    }\n\n    options.inMemory = options.storage === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return this.connections[options.inMemory || options.uuid];\n    }\n\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n      // automatic path provision for `options.storage`\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        options.storage,\n        options.readWriteMode,\n        err => {\n          if (err) return reject(new sequelizeErrors.ConnectionError(err));\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    });\n\n    if (this.sequelize.config.password) {\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n    }\n    if (this.sequelize.options.foreignKeys !== false) {\n      // Make it possible to define and use foreign key constraints unless\n      // explicitly disallowed. It's still opt-in per relation\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\n    }\n\n    return connection;\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}