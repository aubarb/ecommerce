{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  default: () => unknown_constraint_error_default\n});\n\nvar import_database_error = __toModule(require(\"../database-error\"));\n\nclass UnknownConstraintError extends import_database_error.default {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || {\n      sql: \"\",\n      name: \"\",\n      message: \"\"\n    };\n    super(options.parent, {\n      stack: options.stack\n    });\n\n    __publicField(this, \"constraint\");\n\n    __publicField(this, \"fields\");\n\n    __publicField(this, \"table\");\n\n    this.name = \"SequelizeUnknownConstraintError\";\n    this.message = options.message || \"The specified constraint does not exist\";\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n\n}\n\nvar unknown_constraint_error_default = UnknownConstraintError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;AAAA;;AAAA,4BAA4DC,wCAA5D;;AAWA,qCAAqCC,6BAArC,CAA4F;EAK1FC,YACEC,OADF,EAEE;IACAA,UAAUA,WAAW,EAArB;IACAA,QAAQC,MAAR,GAAiBD,QAAQC,MAAR,IAAkB;MAAEC,KAAK,EAAP;MAAWC,MAAM,EAAjB;MAAqBC,SAAS;IAA9B,CAAnC;IAEA,MAAMJ,QAAQC,MAAd,EAAsB;MAAEI,OAAOL,QAAQK;IAAjB,CAAtB;;IAVFC;;IACAA;;IACAA;;IASE,KAAKH,IAAL,GAAY,iCAAZ;IAEA,KAAKC,OAAL,GAAeJ,QAAQI,OAAR,IAAmB,yCAAlC;IACA,KAAKG,UAAL,GAAkBP,QAAQO,UAA1B;IACA,KAAKC,MAAL,GAAcR,QAAQQ,MAAtB;IACA,KAAKC,KAAL,GAAaT,QAAQS,KAArB;EAAqB;;AAjBmE;;AAqB5F,IAAOC,mCAAQC,sBAAf","names":["__export","default","__toModule","import_database_error","constructor","options","parent","sql","name","message","stack","__publicField","constraint","fields","table","unknown_constraint_error_default","UnknownConstraintError"],"sources":["/Users/aurele/node_modules/sequelize/src/errors/database/unknown-constraint-error.ts"],"sourcesContent":["import DatabaseError, { DatabaseErrorSubclassOptions } from '../database-error';\n\ninterface UnknownConstraintErrorOptions {\n  constraint?: string;\n  fields?: Record<string, string | number>;\n  table?: string;\n}\n\n/**\n * Thrown when constraint name is not found in the database\n */\nclass UnknownConstraintError extends DatabaseError implements UnknownConstraintErrorOptions {\n  constraint: string | undefined;\n  fields: Record<string, string | number> | undefined;\n  table: string | undefined;\n\n  constructor(\n    options: UnknownConstraintErrorOptions & DatabaseErrorSubclassOptions\n  ) {\n    options = options || {};\n    options.parent = options.parent || { sql: '', name: '', message: '' };\n\n    super(options.parent, { stack: options.stack });\n    this.name = 'SequelizeUnknownConstraintError';\n\n    this.message = options.message || 'The specified constraint does not exist';\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\n\nexport default UnknownConstraintError;\n"]},"metadata":{},"sourceType":"script"}