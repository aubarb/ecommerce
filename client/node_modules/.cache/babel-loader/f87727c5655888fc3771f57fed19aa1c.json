{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst MySQLQueryGenerator = require(\"../mysql/query-generator\");\n\nconst Utils = require(\"./../../utils\");\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\"CREATE SCHEMA IF NOT EXISTS\", this.quoteIdentifier(schema), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, \";\"]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\"'MYSQL'\", \"'INFORMATION_SCHEMA'\", \"'PERFORMANCE_SCHEMA'\"];\n\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n\n    return Utils.joinSQLFragments([\"SELECT SCHEMA_NAME as schema_name\", \"FROM INFORMATION_SCHEMA.SCHEMATA\", `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(\", \")})`, \";\"]);\n  }\n\n  showTablesQuery(database) {\n    let query = \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')\";\n    }\n\n    return `${query};`;\n  }\n\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n\n}\n\nmodule.exports = MariaDBQueryGenerator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,sBAAsBC,QAAQ,0BAAR,CAA5B;;AACA,MAAMC,QAAQD,QAAQ,eAAR,CAAd;;AAEA,oCAAoCD,mBAApC,CAAwD;EACtDG,aAAaC,MAAb,EAAqBC,OAArB,EAA8B;IAC5BA,UAAUC;MACRC,SAAS,IADD;MAERC,SAAS;IAFD,GAGLH,OAHK,CAAV;IAMA,OAAOH,MAAMO,gBAAN,CAAuB,CAC5B,6BAD4B,EAE5B,KAAKC,eAAL,CAAqBN,MAArB,CAF4B,EAG5BC,QAAQE,OAAR,IAAmB,yBAAyB,KAAKI,MAAL,CAAYN,QAAQE,OAApB,CAAoB,EAHpC,EAI5BF,QAAQG,OAAR,IAAmB,mBAAmB,KAAKG,MAAL,CAAYN,QAAQG,OAApB,CAAoB,EAJ9B,EAK5B,GAL4B,CAAvB,CAAP;EAKE;;EAIJI,WAAWR,MAAX,EAAmB;IACjB,OAAO,yBAAyB,KAAKM,eAAL,CAAqBN,MAArB,CAAqB,GAArD;EAAqD;;EAGvDS,iBAAiBR,OAAjB,EAA0B;IACxB,MAAMS,gBAAgB,CACpB,SADoB,EAEpB,sBAFoB,EAGpB,sBAHoB,CAAtB;;IAKA,IAAIT,QAAQU,IAAR,IAAgBC,MAAMC,OAAN,CAAcZ,QAAQU,IAAtB,CAAhB,IAA+CV,QAAQU,IAAR,CAAaG,MAAb,GAAsB,CAAzE,EAA4E;MAC1E,WAAWC,UAAX,IAAyBd,QAAQU,IAAjC,EAAuC;QACrCD,cAAcM,IAAd,CAAmB,KAAKT,MAAL,CAAYQ,UAAZ,CAAnB;MAA+B;IAAA;;IAGnC,OAAOjB,MAAMO,gBAAN,CAAuB,CAC5B,mCAD4B,EAE5B,kCAF4B,EAG5B,6BAA6BK,cAAcO,IAAd,CAAmB,IAAnB,CAAmB,GAHpB,EAI5B,GAJ4B,CAAvB,CAAP;EAIE;;EAIJC,gBAAgBC,QAAhB,EAA0B;IACxB,IAAIC,QAAQ,gGAAZ;;IACA,IAAID,QAAJ,EAAc;MACZC,SAAS,uBAAuB,KAAKb,MAAL,CAAYY,QAAZ,CAAY,EAA5C;IAA4C,CAD9C,MAEO;MACLC,SAAS,gFAAT;IAAS;;IAEX,OAAO,GAAGA,QAAV;EAAU;;EAWZd,gBAAgBe,UAAhB,EAA4BC,KAA5B,EAAmC;IACjC,OAAOxB,MAAMyB,QAAN,CAAezB,MAAM0B,WAAN,CAAkBH,UAAlB,EAA8B,GAA9B,CAAf,EAAmD,GAAnD,CAAP;EAA0D;;AA3DN;;AA+DxDI,OAAOC,OAAP,GAAiBC,qBAAjB","names":["MySQLQueryGenerator","require","Utils","createSchema","schema","options","__spreadValues","charset","collate","joinSQLFragments","quoteIdentifier","escape","dropSchema","showSchemasQuery","schemasToSkip","skip","Array","isArray","length","schemaName","push","join","showTablesQuery","database","query","identifier","force","addTicks","removeTicks","module","exports","MariaDBQueryGenerator"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mariadb/query-generator.js"],"sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}