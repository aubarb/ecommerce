{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst SqlString = require(\"../../sql-string\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst Dot = require(\"dottie\");\n\nconst deprecations = require(\"../../utils/deprecations\");\n\nconst uuid = require(\"uuid\").v4;\n\nconst {\n  safeStringifyJson\n} = require(\"../../utils.js\");\n\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = __spreadValues({\n      plain: false,\n      raw: false,\n      logging: console.log\n    }, options);\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n\n    if (typeof replacementFunc !== \"function\") {\n      options = replacementFunc || {};\n      replacementFunc = void 0;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values2) => {\n          if (values2[key] !== void 0) {\n            return match;\n          }\n\n          return void 0;\n        };\n      } else {\n        replacementFunc = (match, key, values2, timeZone2, dialect2) => {\n          if (values2[key] !== void 0) {\n            return SqlString.escape(values2[key], timeZone2, dialect2);\n          }\n\n          return void 0;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n\n      replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {\n        if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {\n          return match;\n        }\n\n        return void 0;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if (key === \"$\") {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n\n      if (replVal === void 0) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  formatError(error, errStack) {\n    error.stack = errStack;\n    return error;\n  }\n\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n  }\n\n  getInsertIdField() {\n    return \"insertId\";\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : \"Must be unique\";\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, \"\"))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    result = result && this.sql.toLowerCase().startsWith(\"insert into\");\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result2 => _.reduce(fieldMap, (result3, name, field) => {\n        if (result3[field] !== void 0 && name !== field) {\n          result3[name] = result3[field];\n          delete result3[field];\n        }\n\n        return result3;\n      }, result2));\n    }\n\n    if (this.options.raw) {\n      result = results.map(result2 => {\n        let o = {};\n\n        for (const key in result2) {\n          if (Object.prototype.hasOwnProperty.call(result2, key)) {\n            o[key] = result2[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"show\");\n    result = result || this.sql.toLowerCase().startsWith(\"describe\");\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = \"\";\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(\";\") ? \"\" : \";\";\n      let paramStr;\n\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => safeStringifyJson(p)).join(\", \");\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n\n    const fmt = `(${connection.uuid || \"default\"}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  static _groupJoinData(rows, includeOptions, options) {\n    if (!rows.length) {\n      return [];\n    }\n\n    let i;\n    let length;\n    let $i;\n    let $length;\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    let previousPiece;\n\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    };\n\n    const keyPrefixStringMemo = {};\n\n    const keyPrefixString = (key2, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key2)) {\n        memo[key2] = key2.substr(0, key2.lastIndexOf(\".\"));\n      }\n\n      return memo[key2];\n    };\n\n    const removeKeyPrefixMemo = {};\n\n    const removeKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {\n        const index = key2.lastIndexOf(\".\");\n        removeKeyPrefixMemo[key2] = key2.substr(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key2];\n    };\n\n    const keyPrefixMemo = {};\n\n    const keyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {\n        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);\n\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(\".\") : [];\n        }\n\n        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key2];\n    };\n\n    const lastKeyPrefixMemo = {};\n\n    const lastKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {\n        const prefix2 = keyPrefix(key2);\n        const length2 = prefix2.length;\n        lastKeyPrefixMemo[key2] = !length2 ? \"\" : prefix2[length2 - 1];\n      }\n\n      return lastKeyPrefixMemo[key2];\n    };\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);\n\n      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes2;\n    };\n\n    const stringify = obj => obj instanceof Buffer ? obj.toString(\"hex\") : obj;\n\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = \"\";\n\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = void 0;\n\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[\"\"] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = void 0;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n\n        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            values = {};\n          } else {\n            $current = topValues;\n            length = $keyPrefix.length;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"mappings":"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","names":["_","require","SqlString","QueryTypes","Dot","deprecations","uuid","v4","safeStringifyJson","constructor","connection","sequelize","options","instance","model","__spreadValues","plain","raw","logging","console","log","checkLoggingOption","rawErrors","formatError","AbstractQuery","prototype","sql","values","dialect","replacementFunc","skipValueReplace","match","key","values2","timeZone2","dialect2","escape","origReplacementFunc","options2","timeZone","list","Array","isArray","replace","skipUnescape","replVal","Error","error","errStack","stack","run","noTrueLogging","getInsertIdField","getUniqueConstraintErrorMessage","field","message","Object","keys","uniqueKeys","fields","includes","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","startsWith","hasOwnProperty","call","handleInsertQuery","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","map","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","result2","reduce","result3","name","o","nest","transform","hasJoin","_groupJoinData","includeMap","includeNames","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","include","includeValidated","attributes","originalAttributes","length","isShowOrDescribeQuery","isCallQuery","_logQuery","debugContext","parameters","benchmark","logQueryParameters","startTime","Date","now","logParameter","delimiter","endsWith","paramStr","p","join","fmt","afterMsg","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","key2","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix2","length2","getUniqueKeyAttributes","uniqueKeyAttributes2","chain","findKey","chr","value","stringify","obj","Buffer","toString","primaryKeyAttributes","uniqueKeyAttributes","prefix","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/abstract/query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\nconst { safeStringifyJson } = require('../../utils.js');\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>safeStringifyJson(p)).join(', ');\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script"}