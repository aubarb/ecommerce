{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  default: () => aggregate_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nclass AggregateError extends import_base_error.default {\n  constructor(errors) {\n    super();\n\n    __publicField(this, \"errors\");\n\n    this.errors = errors;\n    this.name = \"AggregateError\";\n  }\n\n  toString() {\n    const message = `AggregateError of:\n${this.errors.map(error => error === this ? \"[Circular AggregateError]\" : error instanceof AggregateError ? String(error).replace(/\\n$/, \"\").replace(/^/gm, \"  \") : String(error).replace(/^/gm, \"    \").substring(2)).join(\"\\n\")}\n`;\n    return message;\n  }\n\n}\n\nvar aggregate_error_default = AggregateError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;AAAA;;AAAA,wBAAsBC,mCAAtB;;AAOA,6BAA6BC,yBAA7B,CAAuC;EAIrCC,YAAYC,MAAZ,EAAmD;IACjD;;IAHOC;;IAIP,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKE,IAAL,GAAY,gBAAZ;EAAY;;EAGdC,WAAmB;IACjB,MAAMC,UAAU;AAAA,EAAuB,KAAKJ,MAAL,CACpCK,GADoC,CAC/BC,KAAD,IACHA,UAAU,IAAV,GACI,2BADJ,GAEIA,iBAAiBC,cAAjB,GACEC,OAAOF,KAAP,EAAcG,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,EAAiCA,OAAjC,CAAyC,KAAzC,EAAgD,IAAhD,CADF,GAEED,OAAOF,KAAP,EAAcG,OAAd,CAAsB,KAAtB,EAA6B,MAA7B,EAAqCC,SAArC,CAA+C,CAA/C,CAN6B,EAQpCC,IARoC,CAQ/B,IAR+B,CAQ/B;AAAA,CARR;IASA,OAAOP,OAAP;EAAO;;AApB4B;;AAwBvC,IAAOQ,0BAAQL,cAAf","names":["__export","default","__toModule","import_base_error","constructor","errors","__publicField","name","toString","message","map","error","AggregateError","String","replace","substring","join","aggregate_error_default"],"sources":["/Users/aurele/node_modules/sequelize/src/errors/aggregate-error.ts"],"sourcesContent":["import BaseError from './base-error';\n\n/**\n * A wrapper for multiple Errors\n *\n * @param errors The aggregated errors that occurred\n */\nclass AggregateError extends BaseError {\n  /** the aggregated errors that occurred */\n  readonly errors: Array<AggregateError | Error>;\n\n  constructor(errors: Array<AggregateError | Error>) {\n    super();\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n\n  toString(): string {\n    const message = `AggregateError of:\\n${this.errors\n      .map((error: Error | AggregateError) =>\n        error === this\n          ? '[Circular AggregateError]'\n          : error instanceof AggregateError\n            ? String(error).replace(/\\n$/, '').replace(/^/gm, '  ')\n            : String(error).replace(/^/gm, '    ').substring(2)\n      )\n      .join('\\n')}\\n`;\n    return message;\n  }\n}\n\nexport default AggregateError;\n"]},"metadata":{},"sourceType":"script"}