{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pool = void 0;\n\nconst Deferred_1 = require(\"./Deferred\");\n\nconst AggregateError_1 = require(\"./AggregateError\");\n\nclass Pool {\n  constructor(factory) {\n    this.log = false;\n\n    if (!factory.create) {\n      throw new Error('create function is required');\n    }\n\n    if (!factory.destroy) {\n      throw new Error('destroy function is required');\n    }\n\n    if (!factory.validate) {\n      throw new Error('validate function is required');\n    }\n\n    if (typeof factory.min !== 'number' || factory.min < 0 || factory.min !== Math.round(factory.min)) {\n      throw new Error('min must be an integer >= 0');\n    }\n\n    if (typeof factory.max !== 'number' || factory.max <= 0 || factory.max !== Math.round(factory.max)) {\n      throw new Error('max must be an integer > 0');\n    }\n\n    if (factory.min > factory.max) {\n      throw new Error('max is smaller than min');\n    }\n\n    if (factory.maxUses !== undefined && (typeof factory.maxUses !== 'number' || factory.maxUses < 0)) {\n      throw new Error('maxUses must be an integer >= 0');\n    }\n\n    this.idleTimeoutMillis = factory.idleTimeoutMillis || 30000;\n    this.acquireTimeoutMillis = factory.acquireTimeoutMillis || 30000;\n    this.reapIntervalMillis = factory.reapIntervalMillis || 1000;\n    this.maxUsesPerResource = factory.maxUses || Infinity;\n    this.log = factory.log || false;\n    this._factory = factory;\n    this._count = 0;\n    this._draining = false;\n    this._pendingAcquires = [];\n    this._inUseObjects = [];\n    this._availableObjects = [];\n    this._removeIdleScheduled = false;\n  }\n\n  get size() {\n    return this._count;\n  }\n\n  get name() {\n    return this._factory.name;\n  }\n\n  get available() {\n    return this._availableObjects.length;\n  }\n\n  get using() {\n    return this._inUseObjects.length;\n  }\n\n  get waiting() {\n    return this._pendingAcquires.length;\n  }\n\n  get maxSize() {\n    return this._factory.max;\n  }\n\n  get minSize() {\n    return this._factory.min;\n  }\n\n  _log(message, level) {\n    if (typeof this.log === 'function') {\n      this.log(message, level);\n    } else if (this.log) {\n      console.log(`${level.toUpperCase()} pool ${this.name || ''} - ${message}`);\n    }\n  }\n\n  _removeIdle() {\n    const toRemove = [];\n    const now = Date.now();\n    let i;\n    let available = this._availableObjects.length;\n    const maxRemovable = this.size - this.minSize;\n    let timeout;\n    this._removeIdleScheduled = false;\n\n    for (i = 0; i < available && maxRemovable > toRemove.length; i++) {\n      timeout = this._availableObjects[i].timeout;\n\n      if (now >= timeout) {\n        this._log('removeIdle() destroying obj - now:' + now + ' timeout:' + timeout, 'verbose');\n\n        toRemove.push(this._availableObjects[i].resource);\n      }\n    }\n\n    toRemove.forEach(this.destroy, this);\n    available = this._availableObjects.length;\n\n    if (available > 0) {\n      this._log('this._availableObjects.length=' + available, 'verbose');\n\n      this._scheduleRemoveIdle();\n    } else {\n      this._log('removeIdle() all objects removed', 'verbose');\n    }\n  }\n\n  _scheduleRemoveIdle() {\n    if (!this._removeIdleScheduled) {\n      this._removeIdleScheduled = true;\n      this._removeIdleTimer = setTimeout(() => {\n        this._removeIdle();\n      }, this.reapIntervalMillis);\n    }\n  }\n\n  _dispense() {\n    let wrappedResource = null;\n    const waitingCount = this._pendingAcquires.length;\n\n    this._log(`dispense() clients=${waitingCount} available=${this._availableObjects.length}`, 'info');\n\n    if (waitingCount < 1) {\n      return;\n    }\n\n    while (this._availableObjects.length > 0) {\n      this._log('dispense() - reusing obj', 'verbose');\n\n      wrappedResource = this._availableObjects[this._availableObjects.length - 1];\n\n      if (!this._factory.validate(wrappedResource.resource)) {\n        this.destroy(wrappedResource.resource);\n        continue;\n      }\n\n      this._availableObjects.pop();\n\n      this._addResourceToInUseObjects(wrappedResource.resource, wrappedResource.useCount);\n\n      const deferred = this._pendingAcquires.shift();\n\n      return deferred.resolve(wrappedResource.resource);\n    }\n\n    if (this.size < this.maxSize) {\n      this._createResource();\n    }\n  }\n\n  _createResource() {\n    this._count += 1;\n\n    this._log(`createResource() - creating obj - count=${this.size} min=${this.minSize} max=${this.maxSize}`, 'verbose');\n\n    this._factory.create().then(resource => {\n      const deferred = this._pendingAcquires.shift();\n\n      if (deferred) {\n        this._addResourceToInUseObjects(resource, 0);\n\n        deferred.resolve(resource);\n      } else {\n        this._addResourceToAvailableObjects(resource, 0);\n      }\n    }).catch(error => {\n      const deferred = this._pendingAcquires.shift();\n\n      this._count -= 1;\n      if (this._count < 0) this._count = 0;\n\n      if (deferred) {\n        deferred.reject(error);\n      }\n\n      process.nextTick(() => {\n        this._dispense();\n      });\n    });\n  }\n\n  _addResourceToAvailableObjects(resource, useCount) {\n    const wrappedResource = {\n      resource: resource,\n      useCount: useCount,\n      timeout: Date.now() + this.idleTimeoutMillis\n    };\n\n    this._availableObjects.push(wrappedResource);\n\n    this._dispense();\n\n    this._scheduleRemoveIdle();\n  }\n\n  _addResourceToInUseObjects(resource, useCount) {\n    const wrappedResource = {\n      resource: resource,\n      useCount: useCount\n    };\n\n    this._inUseObjects.push(wrappedResource);\n  }\n\n  _ensureMinimum() {\n    let i, diff;\n\n    if (!this._draining && this.size < this.minSize) {\n      diff = this.minSize - this.size;\n\n      for (i = 0; i < diff; i++) {\n        this._createResource();\n      }\n    }\n  }\n\n  acquire() {\n    if (this._draining) {\n      return Promise.reject(new Error('pool is draining and cannot accept work'));\n    }\n\n    const deferred = new Deferred_1.Deferred();\n    deferred.registerTimeout(this.acquireTimeoutMillis, () => {\n      this._pendingAcquires = this._pendingAcquires.filter(pending => pending !== deferred);\n    });\n\n    this._pendingAcquires.push(deferred);\n\n    this._dispense();\n\n    return deferred.promise();\n  }\n\n  release(resource) {\n    if (this._availableObjects.some(resourceWithTimeout => resourceWithTimeout.resource === resource)) {\n      this._log('release called twice for the same resource: ' + new Error().stack, 'error');\n\n      return;\n    }\n\n    const index = this._inUseObjects.findIndex(wrappedResource => wrappedResource.resource === resource);\n\n    if (index < 0) {\n      this._log('attempt to release an invalid resource: ' + new Error().stack, 'error');\n\n      return;\n    }\n\n    const wrappedResource = this._inUseObjects[index];\n    wrappedResource.useCount += 1;\n\n    if (wrappedResource.useCount >= this.maxUsesPerResource) {\n      this._log('release() destroying obj - useCount:' + wrappedResource.useCount + ' maxUsesPerResource:' + this.maxUsesPerResource, 'verbose');\n\n      this.destroy(wrappedResource.resource);\n\n      this._dispense();\n    } else {\n      this._inUseObjects.splice(index, 1);\n\n      this._addResourceToAvailableObjects(wrappedResource.resource, wrappedResource.useCount);\n    }\n  }\n\n  async destroy(resource) {\n    const available = this._availableObjects.length;\n    const using = this._inUseObjects.length;\n    this._availableObjects = this._availableObjects.filter(object => object.resource !== resource);\n    this._inUseObjects = this._inUseObjects.filter(object => object.resource !== resource);\n\n    if (available === this._availableObjects.length && using === this._inUseObjects.length) {\n      this._ensureMinimum();\n\n      return;\n    }\n\n    this._count -= 1;\n    if (this._count < 0) this._count = 0;\n\n    try {\n      await this._factory.destroy(resource);\n    } finally {\n      this._ensureMinimum();\n\n      if (!this._draining) {\n        process.nextTick(() => {\n          this._dispense();\n        });\n      }\n    }\n  }\n\n  drain() {\n    this._log('draining', 'info');\n\n    this._draining = true;\n\n    const check = callback => {\n      if (this._pendingAcquires.length > 0) {\n        this._dispense();\n\n        setTimeout(() => {\n          check(callback);\n        }, 100);\n        return;\n      }\n\n      if (this._availableObjects.length !== this._count) {\n        setTimeout(() => {\n          check(callback);\n        }, 100);\n        return;\n      }\n\n      callback();\n    };\n\n    return new Promise(resolve => check(resolve));\n  }\n\n  async destroyAllNow() {\n    this._log('force destroying all objects', 'info');\n\n    this._removeIdleScheduled = false;\n    clearTimeout(this._removeIdleTimer);\n\n    const resources = this._availableObjects.map(resource => resource.resource);\n\n    const errors = [];\n\n    for (const resource of resources) {\n      try {\n        await this.destroy(resource);\n      } catch (ex) {\n        this._log('Error destroying resource: ' + ex.stack, 'error');\n\n        errors.push(ex);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new AggregateError_1.AggregateError(errors);\n    }\n  }\n\n}\n\nexports.Pool = Pool;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAqGA,MAAaA,IAAb,CAAiB;EAuBfC,YAAYC,OAAZ,EAAgD;IAftC,WAA+B,KAA/B;;IAgBR,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;MACnB,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;IACD;;IAED,IAAI,CAACF,OAAO,CAACG,OAAb,EAAsB;MACpB,MAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;IACD;;IAED,IAAI,CAACF,OAAO,CAACI,QAAb,EAAuB;MACrB,MAAM,IAAIF,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,IACE,OAAOF,OAAO,CAACK,GAAf,KAAuB,QAAvB,IACAL,OAAO,CAACK,GAAR,GAAc,CADd,IAEAL,OAAO,CAACK,GAAR,KAAgBC,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACK,GAAnB,CAHlB,EAIE;MACA,MAAM,IAAIH,KAAJ,CAAU,6BAAV,CAAN;IACD;;IAED,IACE,OAAOF,OAAO,CAACQ,GAAf,KAAuB,QAAvB,IACAR,OAAO,CAACQ,GAAR,IAAe,CADf,IAEAR,OAAO,CAACQ,GAAR,KAAgBF,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,GAAnB,CAHlB,EAIE;MACA,MAAM,IAAIN,KAAJ,CAAU,4BAAV,CAAN;IACD;;IAED,IAAIF,OAAO,CAACK,GAAR,GAAcL,OAAO,CAACQ,GAA1B,EAA+B;MAC7B,MAAM,IAAIN,KAAJ,CAAU,yBAAV,CAAN;IACD;;IAED,IACEF,OAAO,CAACS,OAAR,KAAoBC,SAApB,KACC,OAAOV,OAAO,CAACS,OAAf,KAA2B,QAA3B,IAAuCT,OAAO,CAACS,OAAR,GAAkB,CAD1D,CADF,EAGE;MACA,MAAM,IAAIP,KAAJ,CAAU,iCAAV,CAAN;IACD;;IAGD,KAAKS,iBAAL,GAAyBX,OAAO,CAACW,iBAAR,IAA6B,KAAtD;IACA,KAAKC,oBAAL,GAA4BZ,OAAO,CAACY,oBAAR,IAAgC,KAA5D;IACA,KAAKC,kBAAL,GAA0Bb,OAAO,CAACa,kBAAR,IAA8B,IAAxD;IACA,KAAKC,kBAAL,GAA0Bd,OAAO,CAACS,OAAR,IAAmBM,QAA7C;IACA,KAAKC,GAAL,GAAWhB,OAAO,CAACgB,GAAR,IAAe,KAA1B;IAEA,KAAKC,QAAL,GAAgBjB,OAAhB;IACA,KAAKkB,MAAL,GAAc,CAAd;IACA,KAAKC,SAAL,GAAiB,KAAjB;IAGA,KAAKC,gBAAL,GAAwB,EAAxB;IACA,KAAKC,aAAL,GAAqB,EAArB;IACA,KAAKC,iBAAL,GAAyB,EAAzB;IAGA,KAAKC,oBAAL,GAA4B,KAA5B;EACD;;EAMO,IAAJC,IAAI;IACN,OAAO,KAAKN,MAAZ;EACD;;EAKO,IAAJO,IAAI;IACN,OAAO,KAAKR,QAAL,CAAcQ,IAArB;EACD;;EAKY,IAATC,SAAS;IACX,OAAO,KAAKJ,iBAAL,CAAuBK,MAA9B;EACD;;EAKQ,IAALC,KAAK;IACP,OAAO,KAAKP,aAAL,CAAmBM,MAA1B;EACD;;EAKU,IAAPE,OAAO;IACT,OAAO,KAAKT,gBAAL,CAAsBO,MAA7B;EACD;;EAKU,IAAPG,OAAO;IACT,OAAO,KAAKb,QAAL,CAAcT,GAArB;EACD;;EAKU,IAAPuB,OAAO;IACT,OAAO,KAAKd,QAAL,CAAcZ,GAArB;EACD;;EAKS2B,IAAI,CAACC,OAAD,EAAkBC,KAAlB,EAAiC;IAC7C,IAAI,OAAO,KAAKlB,GAAZ,KAAoB,UAAxB,EAAoC;MAClC,KAAKA,GAAL,CAASiB,OAAT,EAAkBC,KAAlB;IACD,CAFD,MAEO,IAAI,KAAKlB,GAAT,EAAc;MACnBmB,OAAO,CAACnB,GAAR,CACE,GAAGkB,KAAK,CAACE,WAAN,EAAmB,SAAS,KAAKX,IAAL,IAAa,EAAE,MAAMQ,OAAO,EAD7D;IAGD;EACF;;EAKSI,WAAW;IACnB,MAAMC,QAAQ,GAAG,EAAjB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;IACA,IAAIE,CAAJ;IACA,IAAIf,SAAS,GAAG,KAAKJ,iBAAL,CAAuBK,MAAvC;IACA,MAAMe,YAAY,GAAG,KAAKlB,IAAL,GAAY,KAAKO,OAAtC;IACA,IAAIY,OAAJ;IAEA,KAAKpB,oBAAL,GAA4B,KAA5B;;IAIA,KAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGf,SAAJ,IAAiBgB,YAAY,GAAGJ,QAAQ,CAACX,MAArD,EAA6Dc,CAAC,EAA9D,EAAkE;MAChEE,OAAO,GAAG,KAAKrB,iBAAL,CAAuBmB,CAAvB,EAA0BE,OAApC;;MACA,IAAIJ,GAAG,IAAII,OAAX,EAAoB;QAElB,KAAKX,IAAL,CACE,uCAAuCO,GAAvC,GAA6C,WAA7C,GAA2DI,OAD7D,EAEE,SAFF;;QAIAL,QAAQ,CAACM,IAAT,CAAc,KAAKtB,iBAAL,CAAuBmB,CAAvB,EAA0BI,QAAxC;MACD;IACF;;IAEDP,QAAQ,CAACQ,OAAT,CAAiB,KAAK3C,OAAtB,EAA+B,IAA/B;IAKAuB,SAAS,GAAG,KAAKJ,iBAAL,CAAuBK,MAAnC;;IAEA,IAAID,SAAS,GAAG,CAAhB,EAAmB;MACjB,KAAKM,IAAL,CAAU,mCAAmCN,SAA7C,EAAwD,SAAxD;;MACA,KAAKqB,mBAAL;IACD,CAHD,MAGO;MACL,KAAKf,IAAL,CAAU,kCAAV,EAA8C,SAA9C;IACD;EACF;;EAMSe,mBAAmB;IAC3B,IAAI,CAAC,KAAKxB,oBAAV,EAAgC;MAC9B,KAAKA,oBAAL,GAA4B,IAA5B;MACA,KAAKyB,gBAAL,GAAwBC,UAAU,CAAC,MAAK;QACtC,KAAKZ,WAAL;MACD,CAFiC,EAE/B,KAAKxB,kBAF0B,CAAlC;IAGD;EACF;;EAYSqC,SAAS;IACjB,IAAIC,eAAe,GAAG,IAAtB;IACA,MAAMC,YAAY,GAAG,KAAKhC,gBAAL,CAAsBO,MAA3C;;IAEA,KAAKK,IAAL,CACE,sBAAsBoB,YAAY,cAAc,KAAK9B,iBAAL,CAAuBK,MAAM,EAD/E,EAEE,MAFF;;IAKA,IAAIyB,YAAY,GAAG,CAAnB,EAAsB;MACpB;IACD;;IAED,OAAO,KAAK9B,iBAAL,CAAuBK,MAAvB,GAAgC,CAAvC,EAA0C;MACxC,KAAKK,IAAL,CAAU,0BAAV,EAAsC,SAAtC;;MACAmB,eAAe,GAAG,KAAK7B,iBAAL,CAChB,KAAKA,iBAAL,CAAuBK,MAAvB,GAAgC,CADhB,CAAlB;;MAGA,IAAI,CAAC,KAAKV,QAAL,CAAcb,QAAd,CAAuB+C,eAAe,CAACN,QAAvC,CAAL,EAAuD;QACrD,KAAK1C,OAAL,CAAagD,eAAe,CAACN,QAA7B;QACA;MACD;;MAED,KAAKvB,iBAAL,CAAuB+B,GAAvB;;MACA,KAAKC,0BAAL,CACEH,eAAe,CAACN,QADlB,EAEEM,eAAe,CAACI,QAFlB;;MAKA,MAAMC,QAAQ,GAAG,KAAKpC,gBAAL,CAAsBqC,KAAtB,EAAjB;;MACA,OAAOD,QAAQ,CAACE,OAAT,CAAiBP,eAAe,CAACN,QAAjC,CAAP;IACD;;IAED,IAAI,KAAKrB,IAAL,GAAY,KAAKM,OAArB,EAA8B;MAC5B,KAAK6B,eAAL;IACD;EACF;;EAESA,eAAe;IACvB,KAAKzC,MAAL,IAAe,CAAf;;IACA,KAAKc,IAAL,CACE,2CAA2C,KAAKR,IAAI,QAAQ,KAAKO,OAAO,QAAQ,KAAKD,OAAO,EAD9F,EAEE,SAFF;;IAKA,KAAKb,QAAL,CACGhB,MADH,GAEG2D,IAFH,CAESf,QAAD,IAAa;MACjB,MAAMW,QAAQ,GAAG,KAAKpC,gBAAL,CAAsBqC,KAAtB,EAAjB;;MAEA,IAAID,QAAJ,EAAc;QACZ,KAAKF,0BAAL,CAAgCT,QAAhC,EAA0C,CAA1C;;QACAW,QAAQ,CAACE,OAAT,CAAiBb,QAAjB;MACD,CAHD,MAGO;QACL,KAAKgB,8BAAL,CAAoChB,QAApC,EAA8C,CAA9C;MACD;IACF,CAXH,EAYGiB,KAZH,CAYUC,KAAD,IAAU;MACf,MAAMP,QAAQ,GAAG,KAAKpC,gBAAL,CAAsBqC,KAAtB,EAAjB;;MAEA,KAAKvC,MAAL,IAAe,CAAf;MACA,IAAI,KAAKA,MAAL,GAAc,CAAlB,EAAqB,KAAKA,MAAL,GAAc,CAAd;;MACrB,IAAIsC,QAAJ,EAAc;QACZA,QAAQ,CAACQ,MAAT,CAAgBD,KAAhB;MACD;;MACDE,OAAO,CAACC,QAAR,CAAiB,MAAK;QACpB,KAAKhB,SAAL;MACD,CAFD;IAGD,CAvBH;EAwBD;;EAESW,8BAA8B,CACtChB,QADsC,EAEtCU,QAFsC,EAEtB;IAEhB,MAAMJ,eAAe,GAAG;MACtBN,QAAQ,EAAEA,QADY;MAEtBU,QAAQ,EAAEA,QAFY;MAGtBZ,OAAO,EAAEH,IAAI,CAACD,GAAL,KAAa,KAAK5B;IAHL,CAAxB;;IAMA,KAAKW,iBAAL,CAAuBsB,IAAvB,CAA4BO,eAA5B;;IACA,KAAKD,SAAL;;IACA,KAAKH,mBAAL;EACD;;EAESO,0BAA0B,CAClCT,QADkC,EAElCU,QAFkC,EAElB;IAEhB,MAAMJ,eAAe,GAAG;MACtBN,QAAQ,EAAEA,QADY;MAEtBU,QAAQ,EAAEA;IAFY,CAAxB;;IAIA,KAAKlC,aAAL,CAAmBuB,IAAnB,CAAwBO,eAAxB;EACD;;EAESgB,cAAc;IACtB,IAAI1B,CAAJ,EAAO2B,IAAP;;IACA,IAAI,CAAC,KAAKjD,SAAN,IAAmB,KAAKK,IAAL,GAAY,KAAKO,OAAxC,EAAiD;MAC/CqC,IAAI,GAAG,KAAKrC,OAAL,GAAe,KAAKP,IAA3B;;MACA,KAAKiB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,IAAhB,EAAsB3B,CAAC,EAAvB,EAA2B;QACzB,KAAKkB,eAAL;MACD;IACF;EACF;;EAUDU,OAAO;IACL,IAAI,KAAKlD,SAAT,EAAoB;MAClB,OAAOmD,OAAO,CAACN,MAAR,CACL,IAAI9D,KAAJ,CAAU,yCAAV,CADK,CAAP;IAGD;;IAED,MAAMsD,QAAQ,GAAG,IAAIe,mBAAJ,EAAjB;IACAf,QAAQ,CAACgB,eAAT,CAAyB,KAAK5D,oBAA9B,EAAoD,MAAK;MAGvD,KAAKQ,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBqD,MAAtB,CACrBC,OAAD,IAAaA,OAAO,KAAKlB,QADH,CAAxB;IAGD,CAND;;IAQA,KAAKpC,gBAAL,CAAsBwB,IAAtB,CAA2BY,QAA3B;;IACA,KAAKN,SAAL;;IAEA,OAAOM,QAAQ,CAACmB,OAAT,EAAP;EACD;;EAMDC,OAAO,CAAC/B,QAAD,EAAsB;IAG3B,IACE,KAAKvB,iBAAL,CAAuBuD,IAAvB,CACGC,mBAAD,IAAyBA,mBAAmB,CAACjC,QAApB,KAAiCA,QAD5D,CADF,EAIE;MACA,KAAKb,IAAL,CACE,iDAAiD,IAAI9B,KAAJ,GAAY6E,KAD/D,EAEE,OAFF;;MAIA;IACD;;IAGD,MAAMC,KAAK,GAAG,KAAK3D,aAAL,CAAmB4D,SAAnB,CACX9B,eAAD,IAAqBA,eAAe,CAACN,QAAhB,KAA6BA,QADtC,CAAd;;IAGA,IAAImC,KAAK,GAAG,CAAZ,EAAe;MACb,KAAKhD,IAAL,CACE,6CAA6C,IAAI9B,KAAJ,GAAY6E,KAD3D,EAEE,OAFF;;MAIA;IACD;;IACD,MAAM5B,eAAe,GAAG,KAAK9B,aAAL,CAAmB2D,KAAnB,CAAxB;IAGA7B,eAAe,CAACI,QAAhB,IAA4B,CAA5B;;IACA,IAAIJ,eAAe,CAACI,QAAhB,IAA4B,KAAKzC,kBAArC,EAAyD;MAEvD,KAAKkB,IAAL,CACE,yCACEmB,eAAe,CAACI,QADlB,GAEE,sBAFF,GAGE,KAAKzC,kBAJT,EAKE,SALF;;MAOA,KAAKX,OAAL,CAAagD,eAAe,CAACN,QAA7B;;MAIA,KAAKK,SAAL;IACD,CAdD,MAcO;MAEL,KAAK7B,aAAL,CAAmB6D,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC;;MACA,KAAKnB,8BAAL,CACEV,eAAe,CAACN,QADlB,EAEEM,eAAe,CAACI,QAFlB;IAID;EACF;;EAOY,MAAPpD,OAAO,CAAC0C,QAAD,EAAsB;IACjC,MAAMnB,SAAS,GAAG,KAAKJ,iBAAL,CAAuBK,MAAzC;IACA,MAAMC,KAAK,GAAG,KAAKP,aAAL,CAAmBM,MAAjC;IAEA,KAAKL,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBmD,MAAvB,CACtBU,MAAD,IAAYA,MAAM,CAACtC,QAAP,KAAoBA,QADT,CAAzB;IAGA,KAAKxB,aAAL,GAAqB,KAAKA,aAAL,CAAmBoD,MAAnB,CAClBU,MAAD,IAAYA,MAAM,CAACtC,QAAP,KAAoBA,QADb,CAArB;;IAKA,IACEnB,SAAS,KAAK,KAAKJ,iBAAL,CAAuBK,MAArC,IACAC,KAAK,KAAK,KAAKP,aAAL,CAAmBM,MAF/B,EAGE;MACA,KAAKwC,cAAL;;MACA;IACD;;IAED,KAAKjD,MAAL,IAAe,CAAf;IACA,IAAI,KAAKA,MAAL,GAAc,CAAlB,EAAqB,KAAKA,MAAL,GAAc,CAAd;;IAErB,IAAI;MACF,MAAM,KAAKD,QAAL,CAAcd,OAAd,CAAsB0C,QAAtB,CAAN;IACD,CAFD,SAEU;MACR,KAAKsB,cAAL;;MAIA,IAAI,CAAC,KAAKhD,SAAV,EAAqB;QACnB8C,OAAO,CAACC,QAAR,CAAiB,MAAK;UACpB,KAAKhB,SAAL;QACD,CAFD;MAGD;IACF;EACF;;EAKDkC,KAAK;IACH,KAAKpD,IAAL,CAAU,UAAV,EAAsB,MAAtB;;IAGA,KAAKb,SAAL,GAAiB,IAAjB;;IAEA,MAAMkE,KAAK,GAAIC,QAAD,IAA6B;MAEzC,IAAI,KAAKlE,gBAAL,CAAsBO,MAAtB,GAA+B,CAAnC,EAAsC;QAGpC,KAAKuB,SAAL;;QACAD,UAAU,CAAC,MAAK;UACdoC,KAAK,CAACC,QAAD,CAAL;QACD,CAFS,EAEP,GAFO,CAAV;QAGA;MACD;;MAGD,IAAI,KAAKhE,iBAAL,CAAuBK,MAAvB,KAAkC,KAAKT,MAA3C,EAAmD;QACjD+B,UAAU,CAAC,MAAK;UACdoC,KAAK,CAACC,QAAD,CAAL;QACD,CAFS,EAEP,GAFO,CAAV;QAGA;MACD;;MAEDA,QAAQ;IACT,CArBD;;IAuBA,OAAO,IAAIhB,OAAJ,CAAaZ,OAAD,IAAa2B,KAAK,CAAC3B,OAAD,CAA9B,CAAP;EACD;;EAckB,MAAb6B,aAAa;IACjB,KAAKvD,IAAL,CAAU,8BAAV,EAA0C,MAA1C;;IAEA,KAAKT,oBAAL,GAA4B,KAA5B;IACAiE,YAAY,CAAC,KAAKxC,gBAAN,CAAZ;;IAEA,MAAMyC,SAAS,GAAG,KAAKnE,iBAAL,CAAuBoE,GAAvB,CACf7C,QAAD,IAAcA,QAAQ,CAACA,QADP,CAAlB;;IAGA,MAAM8C,MAAM,GAAG,EAAf;;IACA,KAAK,MAAM9C,QAAX,IAAuB4C,SAAvB,EAAkC;MAChC,IAAI;QACF,MAAM,KAAKtF,OAAL,CAAa0C,QAAb,CAAN;MACD,CAFD,CAEE,OAAO+C,EAAP,EAAW;QACX,KAAK5D,IAAL,CAAU,gCAAgC4D,EAAE,CAACb,KAA7C,EAAoD,OAApD;;QACAY,MAAM,CAAC/C,IAAP,CAAYgD,EAAZ;MACD;IACF;;IAED,IAAID,MAAM,CAAChE,MAAP,GAAgB,CAApB,EAAuB;MACrB,MAAM,IAAIkE,+BAAJ,CAAmBF,MAAnB,CAAN;IACD;EACF;;AAtgBc;;AAAjBG","names":["Pool","constructor","factory","create","Error","destroy","validate","min","Math","round","max","maxUses","undefined","idleTimeoutMillis","acquireTimeoutMillis","reapIntervalMillis","maxUsesPerResource","Infinity","log","_factory","_count","_draining","_pendingAcquires","_inUseObjects","_availableObjects","_removeIdleScheduled","size","name","available","length","using","waiting","maxSize","minSize","_log","message","level","console","toUpperCase","_removeIdle","toRemove","now","Date","i","maxRemovable","timeout","push","resource","forEach","_scheduleRemoveIdle","_removeIdleTimer","setTimeout","_dispense","wrappedResource","waitingCount","pop","_addResourceToInUseObjects","useCount","deferred","shift","resolve","_createResource","then","_addResourceToAvailableObjects","catch","error","reject","process","nextTick","_ensureMinimum","diff","acquire","Promise","Deferred_1","registerTimeout","filter","pending","promise","release","some","resourceWithTimeout","stack","index","findIndex","splice","object","drain","check","callback","destroyAllNow","clearTimeout","resources","map","errors","ex","AggregateError_1","exports"],"sources":["../src/Pool.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}