{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = testbinary;\nexports.usage = 'Tests that the binary.node can be required';\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst cp = require('child_process');\n\nconst versioning = require('./util/versioning.js');\n\nconst napi = require('./util/napi.js');\n\nfunction testbinary(gyp, argv, callback) {\n  const args = [];\n  const options = {};\n  let shell_cmd = process.execPath;\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version); // skip validation for runtimes we don't explicitly support (like electron)\n\n  if (opts.runtime && opts.runtime !== 'node-webkit' && opts.runtime !== 'node') {\n    return callback();\n  }\n\n  const nw = opts.runtime && opts.runtime === 'node-webkit'; // ensure on windows that / are used for require path\n\n  const binary_module = opts.module.replace(/\\\\/g, '/');\n\n  if (process.arch !== opts.target_arch || process.platform !== opts.target_platform) {\n    let msg = 'skipping validation since host platform/arch (';\n    msg += process.platform + '/' + process.arch + ')';\n    msg += ' does not match target (';\n    msg += opts.target_platform + '/' + opts.target_arch + ')';\n    log.info('validate', msg);\n    return callback();\n  }\n\n  if (nw) {\n    options.timeout = 5000;\n\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n\n    const modulePath = path.resolve(binary_module);\n    const appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n\n        const stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n\n        return callback(err);\n      }\n\n      return callback();\n    });\n    return;\n  }\n\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n    if (err) {\n      return callback(err, {\n        stdout: stdout,\n        stderr: stderr\n      });\n    }\n\n    return callback();\n  });\n}","map":{"version":3,"names":["module","exports","testbinary","usage","path","require","log","cp","versioning","napi","gyp","argv","callback","args","options","shell_cmd","process","execPath","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","runtime","nw","binary_module","replace","arch","target_arch","platform","target_platform","msg","info","timeout","modulePath","resolve","appDir","join","__dirname","push","execFile","err","stdout","stderr","killed","signal","indexOf","stderrLog","toString","test"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/node_modules/@mapbox/node-pre-gyp/lib/testbinary.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = testbinary;\n\nexports.usage = 'Tests that the binary.node can be required';\n\nconst path = require('path');\nconst log = require('npmlog');\nconst cp = require('child_process');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\n\nfunction testbinary(gyp, argv, callback) {\n  const args = [];\n  const options = {};\n  let shell_cmd = process.execPath;\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  // skip validation for runtimes we don't explicitly support (like electron)\n  if (opts.runtime &&\n        opts.runtime !== 'node-webkit' &&\n        opts.runtime !== 'node') {\n    return callback();\n  }\n  const nw = (opts.runtime && opts.runtime === 'node-webkit');\n  // ensure on windows that / are used for require path\n  const binary_module = opts.module.replace(/\\\\/g, '/');\n  if ((process.arch !== opts.target_arch) ||\n        (process.platform !== opts.target_platform)) {\n    let msg = 'skipping validation since host platform/arch (';\n    msg += process.platform + '/' + process.arch + ')';\n    msg += ' does not match target (';\n    msg += opts.target_platform + '/' + opts.target_arch + ')';\n    log.info('validate', msg);\n    return callback();\n  }\n  if (nw) {\n    options.timeout = 5000;\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n    const modulePath = path.resolve(binary_module);\n    const appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n        const stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n        return callback(err);\n      }\n      return callback();\n    });\n    return;\n  }\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info('validate', \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, (err, stdout, stderr) => {\n    if (err) {\n      return callback(err, { stdout: stdout, stderr: stderr });\n    }\n    return callback();\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}