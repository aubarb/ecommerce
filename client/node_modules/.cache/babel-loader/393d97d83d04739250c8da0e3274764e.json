{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"sql:pg\");\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n\n        return void 0;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(_ref => {\n        let [alias, original] = _ref;\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      });\n    }\n\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      if (error.code === \"ECONNRESET\" || /Unable to set non-blocking to true/i.test(error) || /SSL SYSCALL error: EOF detected/i.test(error) || /Local: Authentication failure/i.test(error) || error.message === \"Query read timeout\") {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, _ref2) => {\n        let [key, value] = _ref2;\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n\n          if (!field) {\n            return null;\n          }\n\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n\n      return rows;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n\n      for (const row of rows) {\n        let defParts;\n\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n\n        result.push(row);\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      let result = rows;\n\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n\n            return key;\n          });\n        });\n      }\n\n      return this.handleSelectQuery(result);\n    }\n\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = {\n            \"false\": false,\n            \"true\": true\n          }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n\n      return this.handleSelectQuery(rows);\n    }\n\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount];\n    }\n\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"42704\":\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return \"id\";\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":";;AAEA,MAAMA,gBAAgBC,QAAQ,mBAAR,CAAtB;;AACA,MAAMC,aAAaD,QAAQ,mBAAR,CAAnB;;AACA,MAAME,kBAAkBF,QAAQ,cAAR,CAAxB;;AACA,MAAMG,IAAIH,QAAQ,QAAR,CAAV;;AACA,MAAM;EAAEI;AAAF,IAAaJ,QAAQ,oBAAR,CAAnB;;AAEA,MAAMK,QAAQD,OAAOE,YAAP,CAAoB,QAApB,CAAd;;AAGA,oBAAoBP,aAApB,CAAkC;EASzB,4BAAqBQ,GAArB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;IAChD,MAAMC,oBAAoBC,SAAS,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,MAAMC,OAAN,CAAc,KAAd,EAAqB,KAArB,CAA5B,GAA0DD,KAA7F;;IAEA,IAAIE,SAAJ;;IACA,IAAIC,MAAMC,OAAN,CAAcP,MAAd,CAAJ,EAA2B;MACzBK,YAAYL,OAAOQ,GAAP,CAAWN,iBAAX,CAAZ;MACAH,MAAMR,cAAckB,oBAAd,CAAmCV,GAAnC,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyD;QAAES,kBAAkB;MAApB,CAAzD,EAAqF,CAArF,CAAN;IAA2F,CAF7F,MAGO;MACLL,YAAY,EAAZ;MACA,IAAIM,IAAI,CAAR;MACA,MAAMC,OAAO,EAAb;;MACA,MAAMC,kBAAkB,CAACC,KAAD,EAAQC,GAAR,EAAaC,OAAb,KAAwB;QAC9C,IAAIJ,KAAKG,GAAL,MAAc,MAAlB,EAA6B;UAC3B,OAAOH,KAAKG,GAAL,CAAP;QAAY;;QAEd,IAAIC,QAAOD,GAAP,MAAgB,MAApB,EAA+B;UAC7BJ,IAAIA,IAAI,CAAR;UACAN,UAAUY,IAAV,CAAef,kBAAkBc,QAAOD,GAAP,CAAlB,CAAf;UACAH,KAAKG,GAAL,IAAY,IAAIJ,GAAhB;UACA,OAAO,IAAIA,GAAX;QAAW;;QAEb,OAAO,MAAP;MAAO,CAVT;;MAYAZ,MAAMR,cAAckB,oBAAd,CAAmCV,GAAnC,EAAwCC,MAAxC,EAAgDC,OAAhD,EAAyDY,eAAzD,EAA0E,CAA1E,CAAN;IAAgF;;IAElF,OAAO,CAACd,GAAD,EAAMM,SAAN,CAAP;EAAa;;EAGT,UAAIN,GAAJ,EAASmB,UAAT,EAAqB;IACzB,MAAM;MAAEC;IAAF,IAAiB,IAAvB;;IAEA,IAAI,CAACxB,EAAEyB,OAAF,CAAU,KAAKC,OAAL,CAAaC,UAAvB,CAAL,EAAyC;MACvCvB,MAAM,KAAKwB,SAAL,CAAeC,iBAAf,GAAmCC,cAAnC,CAAkDC,aAAlD,CAAgE,KAAKL,OAAL,CAAaC,UAA7E,IAA2FvB,GAAjG;IAAiG;;IAGnG,IAAI,KAAKwB,SAAL,CAAeF,OAAf,CAAuBM,aAAvB,IAAwC,KAAKN,OAAL,CAAaO,cAAzD,EAAyE;MACvEjC,EAAEkC,OAAF,CAAU,KAAKR,OAAL,CAAaO,cAAvB,EAEGE,IAFH,CAEQ,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAE,CAAF,EAAKC,MAAL,GAAcF,EAAE,CAAF,EAAKE,MAFrC,EAGGC,OAHH,CAGW,QAAuB;QAAA,IAAtB,CAACC,KAAD,EAAQC,QAAR,CAAsB;QAC9B,MAAMC,MAAM,IAAIC,MAAJ,CAAW3C,EAAE4C,YAAF,CAAeH,QAAf,CAAX,EAAqC,GAArC,CAAZ;QAEArC,MAAMA,IAAIK,OAAJ,CAAYiC,GAAZ,EAAiBF,KAAjB,CAAN;MAAuB,CAN3B;IAM2B;;IAI7B,KAAKpC,GAAL,GAAWA,GAAX;IAEA,MAAMyC,QAAQtB,cAAcA,WAAWe,MAAzB,GACV,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBxB,WAAWqB,KAAX,CAAiBzC,GAAjB,EAAsBmB,UAAtB,EAAkC,CAAC0B,KAAD,EAAQC,MAAR,KAAmBD,QAAQD,OAAOC,KAAP,CAAR,GAAwBF,QAAQG,MAAR,CAA7E,CAAjC,CADU,GAEV,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBxB,WAAWqB,KAAX,CAAiBzC,GAAjB,EAAsB,CAAC6C,KAAD,EAAQC,MAAR,KAAmBD,QAAQD,OAAOC,KAAP,CAAR,GAAwBF,QAAQG,MAAR,CAAjE,CAAjC,CAFJ;;IAIA,MAAMC,WAAW,KAAKC,SAAL,CAAehD,GAAf,EAAoBF,KAApB,EAA2BqB,UAA3B,CAAjB;;IAEA,IAAI8B,WAAJ;IACA,MAAMC,cAAc,IAAIC,KAAJ,EAApB;;IAEA,IAAI;MACFF,cAAc,MAAMR,KAApB;IAAoB,CADtB,CACsB,OACbI,KADa,EACpB;MAEA,IAAIA,MAAMO,IAAN,KAAe,YAAf,IAGC,sCAAsCC,IAAtC,CAA2CR,KAA3C,CAHD,IAIC,mCAAmCQ,IAAnC,CAAwCR,KAAxC,CAJD,IAKC,iCAAiCQ,IAAjC,CAAsCR,KAAtC,CALD,IAOCA,MAAMS,OAAN,KAAkB,oBAPvB,EAQE;QACAlC,WAAWmC,QAAX,GAAsB,IAAtB;MAAsB;;MAGxBV,MAAM7C,GAAN,GAAYA,GAAZ;MACA6C,MAAM1B,UAAN,GAAmBA,UAAnB;MACA,MAAM,KAAKqC,WAAL,CAAiBX,KAAjB,EAAwBK,YAAYO,KAApC,CAAN;IAA0C;;IAG5CV;IAEA,IAAIW,OAAOnD,MAAMC,OAAN,CAAcyC,WAAd,IACPA,YAAYU,MAAZ,CAAmB,CAACC,OAAD,EAAUC,CAAV,KAAgBD,QAAQE,MAAR,CAAeD,EAAEH,IAAF,IAAU,EAAzB,CAAnC,EAAiE,EAAjE,CADO,GAEPT,YAAYS,IAFhB;IAGA,MAAMK,WAAWxD,MAAMC,OAAN,CAAcyC,WAAd,IACbA,YAAYU,MAAZ,CACA,CAACK,KAAD,EAAQH,CAAR,KAAcI,OAAOC,QAAP,CAAgBL,EAAEE,QAAlB,IAA8BC,QAAQH,EAAEE,QAAxC,GAAmDC,KADjE,EAEA,CAFA,CADa,GAKbf,YAAYc,QAAZ,IAAwB,CAL5B;;IAOA,IAAI,KAAKvC,SAAL,CAAeF,OAAf,CAAuBM,aAAvB,IAAwC,KAAKN,OAAL,CAAa6C,cAAzD,EAAyE;MACvET,OAAOA,KACJjD,GADI,CACA2D,OAAOxE,EAAEkC,OAAF,CAAUsC,GAAV,EACTT,MADS,CACF,CAACU,GAAD,YAAuB;QAAA,IAAjB,CAACrD,GAAD,EAAMZ,KAAN,CAAiB;QAC7B,MAAMkE,UAAU,KAAKhD,OAAL,CAAa6C,cAAb,CAA4BI,GAA5B,CAAgCvD,GAAhC,CAAhB;QACAqD,IAAIC,WAAWtD,GAAf,IAAsBZ,KAAtB;QACA,OAAOiE,GAAP;MAAO,CAJC,EAKP,EALO,CADP,CAAP;IAMO;;IAIT,MAAMG,mBAAmBxE,IAAIyE,UAAJ,CAAe,kDAAf,CAAzB;IACA,MAAMC,iBAAiB1E,IAAIyE,UAAJ,CAAe,2CAAf,CAAvB;;IAEA,IAAIC,cAAJ,EAAoB;MAClB,OAAOhB,KAAKjD,GAAL,CAAS2D,QAAQ;QACtBO,MAAMP,IAAIQ,OADY;QAEtBC,WAAWT,IAAIQ,OAAJ,CAAYE,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB;MAFW,CAAR,CAAT,CAAP;IAEoC;;IAGtC,IAAIN,gBAAJ,EAAsB;MACpB,OAAOd,KAAKjD,GAAL,CAAS2D,OAAOW,OAAO9E,MAAP,CAAcmE,GAAd,CAAhB,CAAP;IAAqC;;IAGvC,IAAIV,KAAK,CAAL,KAAWA,KAAK,CAAL,EAAQsB,0BAAR,KAAuC,MAAtD,EAAiE;MAC/D,IAAItB,KAAK,CAAL,EAAQsB,0BAAR,KAAuC,IAA3C,EAAiD;QAC/C,MAAM,KAAKxB,WAAL,CAAiB;UACrBxD,GADqB;UAErBmB,UAFqB;UAGrBiC,MAAM,OAHe;UAIrB6B,QAAQvB,KAAK,CAAL,EAAQsB;QAJK,CAAjB,CAAN;MAIkB;;MAGpB,WAAWZ,GAAX,IAAkBV,IAAlB,EAAwB;QACtB,OAAOU,IAAIY,0BAAX;MAAW;IAAA;;IAIf,IAAI,KAAKE,kBAAL,EAAJ,EAA+B;MAC7B,WAAWd,GAAX,IAAkBV,IAAlB,EAAwB;QACtB,MAAMyB,aAAa,sCAAsCC,IAAtC,CAA2ChB,IAAIiB,UAA/C,EAA2D,CAA3D,EAA8DP,KAA9D,CAAoE,GAApE,CAAnB;;QAGA,MAAMQ,UAAU1F,EAAE2F,SAAF,CACdnB,IAAIoB,cADU,EAEd,KAAKhE,SAAL,CAAeC,iBAAf,GAAmCC,cAAnC,CAAkD+D,SAAlD,CAA4DrB,IAAIsB,YAAhE,CAFc,CAAhB;;QAIA,OAAOtB,IAAIoB,cAAX;QACA,OAAOpB,IAAIsB,YAAX;QAEA,IAAIC,KAAJ;QACA,IAAIC,SAAJ;QAGAxB,IAAIyB,MAAJ,GAAazB,IAAI0B,MAAJ,CAAWhB,KAAX,CAAiB,GAAjB,EAAsBrE,GAAtB,CAA0B,CAACsF,MAAD,EAASC,KAAT,KAAmB;UACxDL,QAAQL,QAAQS,MAAR,CAAR;;UAEA,IAAI,CAACJ,KAAL,EAAY;YACV,OAAO,IAAP;UAAO;;UAETC,YAAYT,WAAWa,KAAX,CAAZ;UACA,OAAO;YACLJ,WAAWD,KADN;YAELM,SAASL,UAAU7E,KAAV,CAAgB,iBAAhB,IAAqC,kBAAkBqE,IAAlB,CAAuBQ,SAAvB,EAAkC,CAAlC,CAArC,GAA4E,MAFhF;YAGLM,OAAON,UAAUO,QAAV,CAAmB,MAAnB,IAA6B,MAA7B,GAAsCP,UAAUO,QAAV,CAAmB,KAAnB,IAA4B,KAA5B,GAAoC,MAH5E;YAILjE,QAAQ;UAJH,CAAP;QAIU,CAXC,EAaVkE,MAbU,CAaHC,KAAKA,MAAM,IAbR,CAAb;QAcA,OAAOjC,IAAIkB,OAAX;MAAW;;MAEb,OAAO5B,IAAP;IAAO;;IAET,IAAI,KAAK4C,kBAAL,EAAJ,EAA+B;MAC7B,MAAMxD,SAAS,EAAf;;MACA,WAAWsB,GAAX,IAAkBV,IAAlB,EAAwB;QACtB,IAAI6C,QAAJ;;QACA,IAAInC,IAAIoC,MAAJ,KAAe,MAAf,KAA6BD,WAAWnC,IAAIoC,MAAJ,CAAWzF,KAAX,CAAiB,gIAAjB,CAAxC,CAAJ,EAAiM;UAC/LqD,IAAIqC,EAAJ,GAASrC,IAAIsC,eAAb;UACAtC,IAAIuC,KAAJ,GAAYJ,SAAS,CAAT,CAAZ;UACAnC,IAAIwC,IAAJ,GAAWL,SAAS,CAAT,CAAX;UACAnC,IAAIyC,EAAJ,GAASN,SAAS,CAAT,CAAT;UACA,IAAI3F,CAAJ;;UACA,KAAKA,IAAI,CAAT,EAAYA,KAAK,CAAjB,EAAoBA,KAAK,CAAzB,EAA4B;YAC1B,IAAI,kBAAkByC,IAAlB,CAAuBkD,SAAS3F,CAAT,CAAvB,CAAJ,EAAyC;cACvCwD,IAAI,MAAMmC,SAAS3F,CAAT,EAAYkG,WAAZ,EAAY,EAAtB,IAAyCP,SAAS3F,IAAI,CAAb,CAAzC;YAAsD;UAAA;QAAA;;QAI5DkC,OAAO5B,IAAP,CAAYkD,GAAZ;MAAY;;MAEd,OAAOtB,MAAP;IAAO;;IAET,IAAI,KAAKiE,aAAL,EAAJ,EAA0B;MACxB,IAAIjE,SAASY,IAAb;;MAGA,IAAI,KAAKpC,OAAL,CAAa0F,GAAb,KAAqB,KAArB,IAA8B,KAAKxF,SAAL,CAAeF,OAAf,CAAuB2F,gBAAvB,KAA4C,KAA9E,EAAqF;QACnF,MAAMC,WAAWtH,EAAE+D,MAAF,CAAS,KAAKwD,KAAL,CAAWC,aAApB,EAAmC,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;UAC/DF,EAAEE,EAAET,WAAF,EAAF,IAAqBS,CAArB;UACA,OAAOF,CAAP;QAAO,CAFQ,EAGd,EAHc,CAAjB;;QAIAvE,SAASY,KAAKjD,GAAL,CAAS2D,OAAO;UACvB,OAAOxE,EAAE4H,OAAF,CAAUpD,GAAV,EAAe,CAAChE,KAAD,EAAQY,GAAR,KAAgB;YACpC,MAAMyG,aAAaP,SAASlG,GAAT,CAAnB;;YACA,IAAI,OAAOyG,UAAP,KAAsB,QAAtB,IAAkCA,eAAezG,GAArD,EAA0D;cACxD,OAAOyG,UAAP;YAAO;;YAET,OAAOzG,GAAP;UAAO,CALF,CAAP;QAKS,CANF,CAAT;MAMW;;MAIb,OAAO,KAAK0G,iBAAL,CAAuB5E,MAAvB,CAAP;IAA8B;;IAEhC,IAAIpD,WAAWiI,QAAX,KAAwB,KAAKrG,OAAL,CAAasG,IAAzC,EAA+C;MAC7C,MAAM9E,SAAS,EAAf;;MAEA,WAAWsB,GAAX,IAAkBV,IAAlB,EAAwB;QACtBZ,OAAOsB,IAAIyD,KAAX,IAAoB;UAClBD,MAAMxD,IAAI0D,IAAJ,CAASC,WAAT,EADY;UAElBC,WAAW5D,IAAI6D,IAAJ,KAAa,KAFN;UAGlBC,cAAc9D,IAAI+D,OAHA;UAIlBC,SAAShE,IAAIiE,OAJK;UAKlBC,SAASlE,IAAIkE,OAAJ,GAAc,KAAK9G,SAAL,CAAeC,iBAAf,GAAmCC,cAAnC,CAAkD+D,SAAlD,CAA4DrB,IAAIkE,OAAhE,CAAd,GAAyF,EALhF;UAMlBC,YAAYnE,IAAIoE,UAAJ,KAAmB;QANb,CAApB;;QASA,IAAI1F,OAAOsB,IAAIyD,KAAX,EAAkBD,IAAlB,KAA2B,SAA/B,EAA0C;UACxC9E,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,GAAiC;YAAE,SAAS,KAAX;YAAkB,QAAQ;UAA1B,EAAiCpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAnD,CAAjC;;UAEA,IAAIpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,KAAmC,MAAvC,EAAkD;YAChDpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,GAAiC,IAAjC;UAAiC;QAAA;;QAIrC,IAAI,OAAOpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAzB,KAA0C,QAA9C,EAAwD;UACtDpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,GAAiCpF,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,CAA+B7H,OAA/B,CAAuC,IAAvC,EAA6C,EAA7C,CAAjC;;UAEA,IAAIyC,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,CAA+B/B,QAA/B,CAAwC,IAAxC,CAAJ,EAAmD;YACjD,MAAMrB,QAAQhC,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,CAA+BpD,KAA/B,CAAqC,IAArC,CAAd;;YACA,IAAIA,MAAM,CAAN,EAASgC,WAAT,OAA2B,WAA/B,EAA4C;cAC1ChE,OAAOsB,IAAIyD,KAAX,EAAkBK,YAAlB,GAAiCpD,MAAM,CAAN,CAAjC;YAAuC;UAAA;QAAA;MAAA;;MAM/C,OAAOhC,MAAP;IAAO;;IAET,IAAI,KAAK2F,cAAL,EAAJ,EAA2B;MACzB,OAAO/E,KAAK,CAAL,EAAQgF,cAAf;IAAe;;IAEjB,IAAI,KAAKC,qBAAL,EAAJ,EAAkC;MAChC,OAAOjF,IAAP;IAAO;;IAET,IAAIhE,WAAWkJ,UAAX,KAA0B,KAAKtH,OAAL,CAAasG,IAA3C,EAAiD;MAC/C,IAAI,CAAC,KAAKtG,OAAL,CAAauH,SAAlB,EAA6B;QAC3B,OAAOC,SAAS/E,QAAT,EAAmB,EAAnB,CAAP;MAA0B;;MAE5B,OAAO,KAAK2D,iBAAL,CAAuBhE,IAAvB,CAAP;IAA8B;;IAEhC,IAAIhE,WAAWqJ,UAAX,KAA0B,KAAKzH,OAAL,CAAasG,IAA3C,EAAiD;MAC/C,OAAOkB,SAAS/E,QAAT,EAAmB,EAAnB,CAAP;IAA0B;;IAE5B,IAAI,KAAKiF,aAAL,MAAwB,KAAKC,aAAL,EAAxB,IAAgD,KAAKC,aAAL,EAApD,EAA0E;MACxE,IAAI,KAAKC,QAAL,IAAiB,KAAKA,QAAL,CAAcC,UAAnC,EAA+C;QAG7C,IAAI,KAAKJ,aAAL,MAAwB,CAAC,KAAKE,aAAL,EAAzB,IAAiDnF,aAAa,CAAlE,EAAqE;UACnE,MAAM,IAAIpE,gBAAgB0J,gBAApB,EAAN;QAA0B;;QAG5B,WAAWrI,GAAX,IAAkB0C,KAAK,CAAL,CAAlB,EAA2B;UACzB,IAAIqB,OAAOuE,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC9F,KAAK,CAAL,CAArC,EAA8C1C,GAA9C,CAAJ,EAAwD;YACtD,MAAMyI,SAAS/F,KAAK,CAAL,EAAQ1C,GAAR,CAAf;;YAEA,MAAM0I,OAAO9J,EAAE+J,IAAF,CAAO,KAAKxC,KAAL,CAAWC,aAAlB,EAAiCxB,aAAaA,UAAUgE,SAAV,KAAwB5I,GAAxB,IAA+B4E,UAAUD,KAAV,KAAoB3E,GAAjG,CAAb;;YAEA,KAAKmI,QAAL,CAAcC,UAAd,CAAyBM,QAAQA,KAAKE,SAAb,IAA0B5I,GAAnD,IAA0DyI,MAA1D;UAA0D;QAAA;MAAA;;MAKhE,IAAI,KAAKP,aAAL,EAAJ,EAA0B;QACxB,OAAO,CACL,KAAKC,QADA,EAEL,IAFK,CAAP;MAEE;;MAIJ,OAAO,CACL,KAAKA,QAAL,IAAiBzF,SAAS,KAAKpC,OAAL,CAAauI,KAAb,IAAsBnG,KAAK,CAAL,CAAtB,IAAiCA,IAA1C,CAAjB,IAAoE,MAD/D,EAELK,QAFK,CAAP;IAEE;;IAGJ,IAAI,KAAK+F,UAAL,EAAJ,EAAuB;MACrB,OAAO,CAACpG,IAAD,EAAOT,WAAP,CAAP;IAAc;;IAEhB,OAAOS,IAAP;EAAO;;EAGTF,YAAYuG,GAAZ,EAAiBC,QAAjB,EAA2B;IACzB,IAAIjJ,KAAJ;IACA,IAAI4F,KAAJ;IACA,IAAIX,KAAJ;IACA,IAAIH,MAAJ;IACA,IAAIoE,MAAJ;IACA,IAAI3G,OAAJ;IAEA,MAAMF,OAAO2G,IAAI3G,IAAJ,IAAY2G,IAAIG,QAA7B;IACA,MAAMC,aAAaJ,IAAIzG,OAAJ,IAAeyG,IAAIK,cAAtC;IACA,MAAMC,YAAYN,IAAI9E,MAAJ,IAAc8E,IAAIO,aAApC;;IAEA,QAAQlH,IAAR;MAAQ,KACD,OADC;QAEJ4C,QAAQmE,WAAWpJ,KAAX,CAAiB,yCAAjB,CAAR;QACAiF,QAAQA,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAA3B;QACAW,QAAQwD,WAAWpJ,KAAX,CAAiB,kBAAjB,CAAR;QACA4F,QAAQA,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAA3B;QAEA,OAAO,IAAIhH,gBAAgB4K,yBAApB,CAA8C;UACnDjH,SAAS6G,UAD0C;UAEnDtE,QAAQ,IAF2C;UAGnDG,KAHmD;UAInDW,KAJmD;UAKnD6D,QAAQT,GAL2C;UAMnDtG,OAAOuG;QAN4C,CAA9C,CAAP;;MAMS,KAEN,OAFM;QAKT,IAAIK,cAActJ,QAAQsJ,UAAUhK,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,EAA4BU,KAA5B,CAAkC,yBAAlC,CAAtB,CAAJ,EAAyF;UACvF8E,SAASjG,EAAE2F,SAAF,CAAYxE,MAAM,CAAN,EAAS+D,KAAT,CAAe,IAAf,CAAZ,EAAkC/D,MAAM,CAAN,EAAS+D,KAAT,CAAe,IAAf,CAAlC,CAAT;UACAmF,SAAS,EAAT;UACA3G,UAAU,kBAAV;;UAEA1D,EAAE6K,MAAF,CAAS5E,MAAT,EAAiB,CAACzF,KAAD,EAAQuF,KAAR,KAAkB;YACjCsE,OAAO/I,IAAP,CAAY,IAAIvB,gBAAgB+K,mBAApB,CACV,KAAKC,+BAAL,CAAqChF,KAArC,CADU,EAEV,kBAFU,EAGVA,KAHU,EAIVvF,KAJU,EAKV,KAAK+I,QALK,EAMV,YANU,CAAZ;UAME,CAPJ;;UAWA,IAAI,KAAKhC,KAAL,IAAc,KAAKA,KAAL,CAAWyD,UAA7B,EAAyC;YACvChL,EAAE6K,MAAF,CAAS,KAAKtD,KAAL,CAAWyD,UAApB,EAAgCC,cAAc;cAC5C,IAAIjL,EAAEkL,OAAF,CAAUD,WAAWhF,MAArB,EAA6Bd,OAAOgG,IAAP,CAAYlF,MAAZ,CAA7B,KAAqD,CAAC,CAACgF,WAAWG,GAAtE,EAA2E;gBACzE1H,UAAUuH,WAAWG,GAArB;gBACA,OAAO,KAAP;cAAO;YAAA,CAHX;UAGW;;UAKb,OAAO,IAAIrL,gBAAgBsL,qBAApB,CAA0C;YAAE3H,OAAF;YAAW2G,MAAX;YAAmBO,QAAQT,GAA3B;YAAgClE,MAAhC;YAAwCpC,OAAOuG;UAA/C,CAA1C,CAAP;QAAgG;;QAGlG,OAAO,IAAIrK,gBAAgBsL,qBAApB,CAA0C;UAC/C3H,SAAS6G,UADsC;UAE/CK,QAAQT,GAFuC;UAG/CtG,OAAOuG;QAHwC,CAA1C,CAAP;;MAGS,KAGN,OAHM;QAITjJ,QAAQsJ,UAAUtJ,KAAV,CAAgB,yBAAhB,CAAR;;QAEA,IAAIA,KAAJ,EAAW;UACT8E,SAASjG,EAAE2F,SAAF,CAAYxE,MAAM,CAAN,EAAS+D,KAAT,CAAe,IAAf,CAAZ,EAAkC/D,MAAM,CAAN,EAAS+D,KAAT,CAAe,IAAf,CAAlC,CAAT;QAA0D;;QAE5DxB,UAAU,4BAAV;QAEA,OAAO,IAAI3D,gBAAgBuL,wBAApB,CAA6C;UAClD5H,OADkD;UAElDuH,YAAYd,IAAIc,UAFkC;UAGlDhF,MAHkD;UAIlDc,OAAOoD,IAAIpD,KAJuC;UAKlD6D,QAAQT,GAL0C;UAMlDtG,OAAOuG;QAN2C,CAA7C,CAAP;;MAMS,KAGN,OAHM;QAIT,IAAID,IAAI/J,GAAJ,IAAW,uBAAuBqD,IAAvB,CAA4B0G,IAAI/J,GAAhC,CAAf,EAAqD;UACnDsD,UAAU,0BAAV;UACA0C,QAAQmE,WAAWpJ,KAAX,CAAiB,+BAAjB,CAAR;UACAiF,QAAQA,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAA3B;UACAW,QAAQwD,WAAWpJ,KAAX,CAAiB,mBAAjB,CAAR;UACA4F,QAAQA,QAAQA,MAAM,CAAN,CAAR,GAAmB,MAA3B;UAEA,MAAM,IAAIhH,gBAAgBwL,sBAApB,CAA2C;YAC/C7H,OAD+C;YAE/CuH,YAAY7E,KAFmC;YAG/CH,MAH+C;YAI/Cc,KAJ+C;YAK/C6D,QAAQT,GALuC;YAM/CtG,OAAOuG;UANwC,CAA3C,CAAN;QAMS;;MAAA;QAKX,OAAO,IAAIrK,gBAAgByL,aAApB,CAAkCrB,GAAlC,EAAuC;UAAEtG,OAAOuG;QAAT,CAAvC,CAAP;IAxFJ;EAwF2D;;EAI7D1D,qBAAqB;IACnB,OAAO,gPAAgPjD,IAAhP,CAAqP,KAAKrD,GAA1P,CAAP;EAAiQ;;EAGnQqL,mBAAmB;IACjB,OAAO,IAAP;EAAO;;AAxZuB;;AA4ZlCC,OAAOC,OAAP,GAAiBC,KAAjB;AACAF,OAAOC,OAAP,CAAeC,KAAf,GAAuBA,KAAvB;AACAF,OAAOC,OAAP,CAAeE,OAAf,GAAyBD,KAAzB","names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","logger","debug","debugContext","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","formatBindParameters","skipValueReplace","i","seen","replacementFunc","match","key","values2","push","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","alias","original","reg","RegExp","escapeRegExp","query","Promise","resolve","reject","error","result","complete","_logQuery","queryResult","errForStack","Error","code","test","message","_invalid","formatError","stack","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","aliasesMapping","row","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","Object","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","EmptyResultError","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","err","errStack","errors","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","Query","default"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/postgres/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (error.code === 'ECONNRESET'\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        || /Unable to set non-blocking to true/i.test(error)\n        || /SSL SYSCALL error: EOF detected/i.test(error)\n        || /Local: Authentication failure/i.test(error)\n        // https://github.com/sequelize/sequelize/pull/15144\n        || error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}