{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPassportNumber;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\n\n\nvar passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/,\n  // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/,\n  // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/,\n  // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/,\n  // AUSTRALIA\n  BE: /^[A-Z]{2}\\d{6}$/,\n  // BELGIUM\n  BG: /^\\d{9}$/,\n  // BULGARIA\n  BR: /^[A-Z]{2}\\d{6}$/,\n  // BRAZIL\n  BY: /^[A-Z]{2}\\d{7}$/,\n  // BELARUS\n  CA: /^[A-Z]{2}\\d{6}$/,\n  // CANADA\n  CH: /^[A-Z]\\d{7}$/,\n  // SWITZERLAND\n  CN: /^G\\d{8}$|^E(?![IO])[A-Z0-9]\\d{7}$/,\n  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/,\n  // CYPRUS\n  CZ: /^\\d{8}$/,\n  // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,\n  // GERMANY\n  DK: /^\\d{9}$/,\n  // DENMARK\n  DZ: /^\\d{9}$/,\n  // ALGERIA\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/,\n  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/,\n  // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/,\n  // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/,\n  // FRANCE\n  GB: /^\\d{9}$/,\n  // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/,\n  // GREECE\n  HR: /^\\d{9}$/,\n  // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/,\n  // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/,\n  // IRELAND\n  IN: /^[A-Z]{1}-?\\d{7}$/,\n  // INDIA\n  ID: /^[A-C]\\d{7}$/,\n  // INDONESIA\n  IR: /^[A-Z]\\d{8}$/,\n  // IRAN\n  IS: /^(A)\\d{7}$/,\n  // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/,\n  // ITALY\n  JP: /^[A-Z]{2}\\d{7}$/,\n  // JAPAN\n  KR: /^[MS]\\d{8}$/,\n  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  LT: /^[A-Z0-9]{8}$/,\n  // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/,\n  // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/,\n  // LATVIA\n  LY: /^[A-Z0-9]{8}$/,\n  // LIBYA\n  MT: /^\\d{7}$/,\n  // MALTA\n  MZ: /^([A-Z]{2}\\d{7})|(\\d{2}[A-Z]{2}\\d{5})$/,\n  // MOZAMBIQUE\n  MY: /^[AHK]\\d{8}$/,\n  // MALAYSIA\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/,\n  // NETHERLANDS\n  PL: /^[A-Z]{2}\\d{7}$/,\n  // POLAND\n  PT: /^[A-Z]\\d{6}$/,\n  // PORTUGAL\n  RO: /^\\d{8,9}$/,\n  // ROMANIA\n  RU: /^\\d{9}$/,\n  // RUSSIAN FEDERATION\n  SE: /^\\d{8}$/,\n  // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/,\n  // SLOVANIA\n  SK: /^[0-9A-Z]\\d{7}$/,\n  // SLOVAKIA\n  TR: /^[A-Z]\\d{8}$/,\n  // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/,\n  // UKRAINE\n  US: /^\\d{9}$/ // UNITED STATES\n\n};\n/**\n * Check if str is a valid passport number\n * relative to provided ISO Country Code.\n *\n * @param {string} str\n * @param {string} countryCode\n * @return {boolean}\n */\n\nfunction isPassportNumber(str, countryCode) {\n  (0, _assertString.default)(str);\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n\n  var normalizedStr = str.replace(/\\s/g, '').toUpperCase();\n  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isPassportNumber","_assertString","_interopRequireDefault","require","obj","__esModule","passportRegexByCountryCode","AM","AR","AT","AU","BE","BG","BR","BY","CA","CH","CN","CY","CZ","DE","DK","DZ","EE","ES","FI","FR","GB","GR","HR","HU","IE","IN","ID","IR","IS","IT","JP","KR","LT","LU","LV","LY","MT","MZ","MY","NL","PL","PT","RO","RU","SE","SL","SK","TR","UA","US","str","countryCode","normalizedStr","replace","toUpperCase","test","module"],"sources":["/Users/aurele/node_modules/validator/lib/isPassportNumber.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPassportNumber;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\nvar passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/,\n  // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/,\n  // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/,\n  // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/,\n  // AUSTRALIA\n  BE: /^[A-Z]{2}\\d{6}$/,\n  // BELGIUM\n  BG: /^\\d{9}$/,\n  // BULGARIA\n  BR: /^[A-Z]{2}\\d{6}$/,\n  // BRAZIL\n  BY: /^[A-Z]{2}\\d{7}$/,\n  // BELARUS\n  CA: /^[A-Z]{2}\\d{6}$/,\n  // CANADA\n  CH: /^[A-Z]\\d{7}$/,\n  // SWITZERLAND\n  CN: /^G\\d{8}$|^E(?![IO])[A-Z0-9]\\d{7}$/,\n  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/,\n  // CYPRUS\n  CZ: /^\\d{8}$/,\n  // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,\n  // GERMANY\n  DK: /^\\d{9}$/,\n  // DENMARK\n  DZ: /^\\d{9}$/,\n  // ALGERIA\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/,\n  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/,\n  // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/,\n  // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/,\n  // FRANCE\n  GB: /^\\d{9}$/,\n  // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/,\n  // GREECE\n  HR: /^\\d{9}$/,\n  // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/,\n  // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/,\n  // IRELAND\n  IN: /^[A-Z]{1}-?\\d{7}$/,\n  // INDIA\n  ID: /^[A-C]\\d{7}$/,\n  // INDONESIA\n  IR: /^[A-Z]\\d{8}$/,\n  // IRAN\n  IS: /^(A)\\d{7}$/,\n  // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/,\n  // ITALY\n  JP: /^[A-Z]{2}\\d{7}$/,\n  // JAPAN\n  KR: /^[MS]\\d{8}$/,\n  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  LT: /^[A-Z0-9]{8}$/,\n  // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/,\n  // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/,\n  // LATVIA\n  LY: /^[A-Z0-9]{8}$/,\n  // LIBYA\n  MT: /^\\d{7}$/,\n  // MALTA\n  MZ: /^([A-Z]{2}\\d{7})|(\\d{2}[A-Z]{2}\\d{5})$/,\n  // MOZAMBIQUE\n  MY: /^[AHK]\\d{8}$/,\n  // MALAYSIA\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/,\n  // NETHERLANDS\n  PL: /^[A-Z]{2}\\d{7}$/,\n  // POLAND\n  PT: /^[A-Z]\\d{6}$/,\n  // PORTUGAL\n  RO: /^\\d{8,9}$/,\n  // ROMANIA\n  RU: /^\\d{9}$/,\n  // RUSSIAN FEDERATION\n  SE: /^\\d{8}$/,\n  // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/,\n  // SLOVANIA\n  SK: /^[0-9A-Z]\\d{7}$/,\n  // SLOVAKIA\n  TR: /^[A-Z]\\d{8}$/,\n  // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/,\n  // UKRAINE\n  US: /^\\d{9}$/ // UNITED STATES\n\n};\n/**\n * Check if str is a valid passport number\n * relative to provided ISO Country Code.\n *\n * @param {string} str\n * @param {string} countryCode\n * @return {boolean}\n */\n\nfunction isPassportNumber(str, countryCode) {\n  (0, _assertString.default)(str);\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n\n  var normalizedStr = str.replace(/\\s/g, '').toUpperCase();\n  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}