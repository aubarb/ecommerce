{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  JoinSQLFragmentsError: () => JoinSQLFragmentsError,\n  joinSQLFragments: () => joinSQLFragments\n});\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\n\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce((_ref, part) => {\n    let {\n      skipNextLeadingSpace,\n      result\n    } = _ref;\n\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: \"\"\n  }).result;\n}\n\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return \"\";\n  const truthyArray = array.filter(x => !!x);\n  const flattenedArray = truthyArray.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n\n    return fragment;\n  });\n\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== \"string\") {\n      throw new JoinSQLFragmentsError(flattenedArray, fragment, `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n    }\n  }\n\n  const trimmedArray = flattenedArray.map(x => x.trim());\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== \"\");\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nclass JoinSQLFragmentsError extends TypeError {\n  constructor(args, fragment, message) {\n    super(message);\n\n    __publicField(this, \"args\");\n\n    __publicField(this, \"fragment\");\n\n    this.args = args;\n    this.fragment = fragment;\n    this.name = \"JoinSQLFragmentsError\";\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;EAAAC;EAAAC;AAAA;;AAEA,iCAAiCC,GAAjC,EAAuD;EACrD,OAAO,SAASC,IAAT,CAAcD,GAAd,CAAP;AAAqB;;AAEvB,kCAAkCA,GAAlC,EAAwD;EACtD,OAAO,MAAMC,IAAN,CAAWD,GAAX,CAAP;AAAkB;;AAcpB,+BAA+BE,KAA/B,EAAwD;EACtD,OAAOA,MAAMC,MAAN,CACL,OAAmCC,IAAnC,KAA4C;IAAA,IAA3C;MAAEC,oBAAF;MAAwBC;IAAxB,CAA2C;;IAC1C,IAAID,wBAAwBE,wBAAwBH,IAAxB,CAA5B,EAA2D;MACzDE,UAAUF,KAAKI,IAAL,EAAV;IAAe,CADjB,MAEO;MACLF,UAAU,IAAIF,KAAKI,IAAL,EAAK,EAAnB;IAAmB;;IAErB,OAAO;MACLH,sBAAsBI,yBAAyBL,IAAzB,CADjB;MAELE;IAFK,CAAP;EAEE,CATC,EAYL;IACED,sBAAsB,IADxB;IAEEC,QAAQ;EAFV,CAZK,EAgBLA,MAhBF;AAgBE;;AAgBG,0BAA0BI,KAA1B,EAAwD;EAC7D,IAAIA,MAAMC,MAAN,KAAiB,CAArB,EAAwB,OAAO,EAAP;EAExB,MAAMC,cAAmCF,MAAMG,MAAN,CACtCC,CAAD,IAAoC,CAAC,CAACA,CADC,CAAzC;EAGA,MAAMC,iBAA2BH,YAAYI,GAAZ,CAC9BC,QAAD,IAAiC;IAC/B,IAAIC,MAAMC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;MAC3B,OAAOlB,iBAAiBkB,QAAjB,CAAP;IAAwB;;IAG1B,OAAOA,QAAP;EAAO,CANsB,CAAjC;;EAWA,WAAWA,QAAX,IAAuBF,cAAvB,EAAuC;IACrC,IAAIE,YAAY,OAAOA,QAAP,KAAoB,QAApC,EAA8C;MAC5C,MAAM,IAAInB,qBAAJ,CACJiB,cADI,EAEJE,QAFI,EAGJ,0EAA0EA,YAHtE,CAAN;IAG4E;EAAA;;EAMhF,MAAMG,eAAeL,eAAeC,GAAf,CAAmBF,KAAKA,EAAEN,IAAF,EAAxB,CAArB;EAGA,MAAMa,sBAAsBD,aAAaP,MAAb,CAAoBC,KAAKA,MAAM,EAA/B,CAA5B;EAEA,OAAOQ,sBAAsBD,mBAAtB,CAAP;AAA6B;;AAGxB,oCAAoCE,SAApC,CAA8C;EAInDC,YAAYC,IAAZ,EAAiCR,QAAjC,EAAgDS,OAAhD,EAAiE;IAC/D,MAAMA,OAAN;;IAJFC;;IACAA;;IAKE,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKR,QAAL,GAAgBA,QAAhB;IACA,KAAKW,IAAL,GAAY,uBAAZ;EAAY;;AATqC","names":["__export","JoinSQLFragmentsError","joinSQLFragments","str","test","parts","reduce","part","skipNextLeadingSpace","result","doesNotWantLeadingSpace","trim","doesNotWantTrailingSpace","array","length","truthyArray","filter","x","flattenedArray","map","fragment","Array","isArray","trimmedArray","nonEmptyStringArray","singleSpaceJoinHelper","TypeError","constructor","args","message","__publicField","name"],"sources":["/Users/aurele/node_modules/sequelize/src/utils/join-sql-fragments.ts"],"sourcesContent":["import { SQLFragment, TruthySQLFragment } from '../generic/sql-fragment';\n\nfunction doesNotWantLeadingSpace(str: string): boolean {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str: string): boolean {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n *\n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n *\n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts: string[]): string {\n  return parts.reduce(\n    ({ skipNextLeadingSpace, result }, part) => {\n      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n        result += part.trim();\n      } else {\n        result += ` ${part.trim()}`;\n      }\n      return {\n        skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n        result\n      };\n    },\n    {\n      skipNextLeadingSpace: true,\n      result: ''\n    }\n  ).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n *\n * Certain elements do not get leading/trailing spaces.\n *\n * @param {SQLFragment[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n *\n * @returns {string} The joined string.\n *\n * @private\n */\nexport function joinSQLFragments(array: SQLFragment[]): string {\n  if (array.length === 0) return '';\n\n  const truthyArray: TruthySQLFragment[] = array.filter(\n    (x): x is string | SQLFragment[] => !!x\n  );\n  const flattenedArray: string[] = truthyArray.map(\n    (fragment: TruthySQLFragment) => {\n      if (Array.isArray(fragment)) {\n        return joinSQLFragments(fragment);\n      }\n\n      return fragment;\n    }\n  );\n\n  // Ensure strings\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== 'string') {\n      throw new JoinSQLFragmentsError(\n        flattenedArray,\n        fragment,\n        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`\n      );\n    }\n  }\n\n  // Trim fragments\n  const trimmedArray = flattenedArray.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nexport class JoinSQLFragmentsError extends TypeError {\n  args: SQLFragment[];\n  fragment: any; // iirc this error is only used when we get an invalid fragment.\n\n  constructor(args: SQLFragment[], fragment: any, message: string) {\n    super(message);\n    \n    this.args = args;\n    this.fragment = fragment;\n    this.name = 'JoinSQLFragmentsError';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}