{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nclass MySQLQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({\n      raw: true\n    }, options));\n\n    if (results.length && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({\n        raw: true\n      }, options))));\n    }\n\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({\n      raw: true\n    }, options));\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":{"version":3,"mappings":"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","names":["sequelizeErrors","require","QueryInterface","QueryTypes","tableName","columnName","options","results","sequelize","query","queryGenerator","getForeignKeyQuery","schema","config","database","__spreadValues","raw","length","constraint_name","Promise","all","map","constraint","dropForeignKeyQuery","removeColumnQuery","insertValues","updateValues","where","type","UPSERT","updateOnDuplicate","Object","keys","upsertKeys","values","model","primaryKeys","item","field","sql","insertQuery","rawAttributes","constraintName","showConstraintsQuery","constraints","__spreadProps","SHOWCONSTRAINTS","constraintType","UnknownConstraintError","message","table","removeIndexQuery","exports","MySQLQueryInterface"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mysql/query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"]},"metadata":{},"sourceType":"script"}