{"ast":null,"code":"\"use strict\";\n\nconst momentTz = require(\"moment-timezone\");\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP\";\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n\n    static parse(value, options) {\n      value = value.string();\n\n      if (value === null) {\n        return value;\n      }\n\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"VARCHAR(36)\";\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return \"TEXT\";\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"mappings":"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","names":["momentTz","require","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","snowflake","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","_stringify","date","options","isMoment","_applyTimezone","_length","format","value","string","tz","zone","timezone","toDate","Date","operation","stringify","JSONTYPE"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/snowflake/data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}