{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = _package;\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst versioning = require('./util/versioning.js');\n\nconst napi = require('./util/napi.js');\n\nconst existsAsync = fs.exists || path.exists;\n\nconst makeDir = require('make-dir');\n\nconst tar = require('tar');\n\nfunction readdirSync(dir) {\n  let list = [];\n  const files = fs.readdirSync(dir);\n  files.forEach(file => {\n    const stats = fs.lstatSync(path.join(dir, file));\n\n    if (stats.isDirectory()) {\n      list = list.concat(readdirSync(path.join(dir, file)));\n    } else {\n      list.push(path.join(dir, file));\n    }\n  });\n  return list;\n}\n\nfunction _package(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const from = opts.module_path;\n  const binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, found => {\n    if (!found) {\n      return callback(new Error('Cannot package because ' + binary_module + ' missing: run `node-pre-gyp rebuild` first'));\n    }\n\n    const tarball = opts.staged_tarball;\n\n    const filter_func = function (entry) {\n      const basename = path.basename(entry);\n\n      if (basename.length && basename[0] !== '.') {\n        console.log('packing ' + entry);\n        return true;\n      } else {\n        console.log('skipping ' + entry);\n      }\n\n      return false;\n    };\n\n    makeDir(path.dirname(tarball)).then(() => {\n      let files = readdirSync(from);\n      const base = path.basename(from);\n      files = files.map(file => {\n        return path.join(base, path.relative(from, file));\n      });\n      tar.create({\n        portable: false,\n        gzip: true,\n        filter: filter_func,\n        file: tarball,\n        cwd: path.dirname(from)\n      }, files, err2 => {\n        if (err2) console.error('[' + package_json.name + '] ' + err2.message);else log.info('package', 'Binary staged at \"' + tarball + '\"');\n        return callback(err2);\n      });\n    }).catch(err => {\n      return callback(err);\n    });\n  });\n}","map":{"version":3,"names":["module","exports","_package","usage","fs","require","path","log","versioning","napi","existsAsync","exists","makeDir","tar","readdirSync","dir","list","files","forEach","file","stats","lstatSync","join","isDirectory","concat","push","gyp","argv","callback","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","from","module_path","binary_module","module_name","found","Error","tarball","staged_tarball","filter_func","entry","basename","length","console","dirname","then","base","map","relative","create","portable","gzip","filter","cwd","err2","error","name","message","info","catch","err"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/node_modules/@mapbox/node-pre-gyp/lib/package.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = _package;\n\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst existsAsync = fs.exists || path.exists;\nconst makeDir = require('make-dir');\nconst tar = require('tar');\n\nfunction readdirSync(dir) {\n  let list = [];\n  const files = fs.readdirSync(dir);\n\n  files.forEach((file) => {\n    const stats = fs.lstatSync(path.join(dir, file));\n    if (stats.isDirectory()) {\n      list = list.concat(readdirSync(path.join(dir, file)));\n    } else {\n      list.push(path.join(dir, file));\n    }\n  });\n  return list;\n}\n\nfunction _package(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const from = opts.module_path;\n  const binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, (found) => {\n    if (!found) {\n      return callback(new Error('Cannot package because ' + binary_module + ' missing: run `node-pre-gyp rebuild` first'));\n    }\n    const tarball = opts.staged_tarball;\n    const filter_func = function(entry) {\n      const basename = path.basename(entry);\n      if (basename.length && basename[0] !== '.') {\n        console.log('packing ' + entry);\n        return true;\n      } else {\n        console.log('skipping ' + entry);\n      }\n      return false;\n    };\n    makeDir(path.dirname(tarball)).then(() => {\n      let files = readdirSync(from);\n      const base = path.basename(from);\n      files = files.map((file) => {\n        return path.join(base, path.relative(from, file));\n      });\n      tar.create({\n        portable: false,\n        gzip: true,\n        filter: filter_func,\n        file: tarball,\n        cwd: path.dirname(from)\n      }, files, (err2) => {\n        if (err2)  console.error('[' + package_json.name + '] ' + err2.message);\n        else log.info('package', 'Binary staged at \"' + tarball + '\"');\n        return callback(err2);\n      });\n    }).catch((err) => {\n      return callback(err);\n    });\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}