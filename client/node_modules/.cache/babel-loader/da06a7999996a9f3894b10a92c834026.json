{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mariadb\");\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n\n        options.transaction.finished = \"rollback\";\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith(\"enum\") ? _result.Type.replace(/^enum/i, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n\n      if (modelField.type instanceof DataTypes.JSON) {\n        rows = rows.map(row => {\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === \"string\" && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === ER_ROW_IS_REFERENCED ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === \"PRIMARY\",\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","constructor","connection","sequelize","options","__spreadValues","showWarnings","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","formatBindParameters","length","parameters","complete","_logQuery","results","errForStack","Error","query","error","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","affectedRows","isUpsertQuery","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","info","hasMinVersion","parse","warningResults","run","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","err","errStack","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports","Query"],"sources":["/Users/aurele/node_modules/sequelize/src/dialects/mariadb/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          // JSON fields for MariaDB server 10.5.2+ already results in JSON format, skip JSON.parse\n          // this is due to this https://jira.mariadb.org/browse/MDEV-17832 and how mysql2 connector interacts with MariaDB and JSON fields\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string' && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}