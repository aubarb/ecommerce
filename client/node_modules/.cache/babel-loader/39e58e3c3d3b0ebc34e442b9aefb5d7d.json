{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = testpackage;\nexports.usage = 'Tests that the staged package is valid';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst existsAsync = fs.exists || path.exists;\n\nconst versioning = require('./util/versioning.js');\n\nconst napi = require('./util/napi.js');\n\nconst testbinary = require('./testbinary.js');\n\nconst tar = require('tar');\n\nconst makeDir = require('make-dir');\n\nfunction testpackage(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, found => {\n    if (!found) {\n      return callback(new Error('Cannot test package because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n\n    const to = opts.module_path;\n\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n\n    makeDir(to).then(() => {\n      tar.extract({\n        file: tarball,\n        cwd: to,\n        strip: 1,\n        onentry: filter_func\n      }).then(after_extract, callback);\n    }).catch(err => {\n      return callback(err);\n    });\n\n    function after_extract() {\n      testbinary(gyp, argv, err => {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}","map":{"version":3,"names":["module","exports","testpackage","usage","fs","require","path","log","existsAsync","exists","versioning","napi","testbinary","tar","makeDir","gyp","argv","callback","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","tarball","staged_tarball","found","Error","to","module_path","filter_func","entry","info","then","extract","file","cwd","strip","onentry","after_extract","catch","err","console","name"],"sources":["/Users/aurele/Desktop/E-Commerce App/views/node_modules/@mapbox/node-pre-gyp/lib/testpackage.js"],"sourcesContent":["'use strict';\n\nmodule.exports = exports = testpackage;\n\nexports.usage = 'Tests that the staged package is valid';\n\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst existsAsync = fs.exists || path.exists;\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst testbinary = require('./testbinary.js');\nconst tar = require('tar');\nconst makeDir = require('make-dir');\n\nfunction testpackage(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, (found) => {\n    if (!found) {\n      return callback(new Error('Cannot test package because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n    const to = opts.module_path;\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n\n    makeDir(to).then(() => {\n      tar.extract({\n        file: tarball,\n        cwd: to,\n        strip: 1,\n        onentry: filter_func\n      }).then(after_extract, callback);\n    }).catch((err) => {\n      return callback(err);\n    });\n\n    function after_extract() {\n      testbinary(gyp, argv, (err) => {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,WAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,wCAAhB;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMG,WAAW,GAAGJ,EAAE,CAACK,MAAH,IAAaH,IAAI,CAACG,MAAtC;;AACA,MAAMC,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,iBAAD,CAA1B;;AACA,MAAMQ,GAAG,GAAGR,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,UAAD,CAAvB;;AAEA,SAASH,WAAT,CAAqBa,GAArB,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;EACxC,MAAMC,YAAY,GAAGH,GAAG,CAACG,YAAzB;EACA,MAAMC,kBAAkB,GAAGR,IAAI,CAACS,wCAAL,CAA8CJ,IAA9C,CAA3B;EACA,MAAMK,IAAI,GAAGX,UAAU,CAACY,QAAX,CAAoBJ,YAApB,EAAkCH,GAAG,CAACM,IAAtC,EAA4CF,kBAA5C,CAAb;EACA,MAAMI,OAAO,GAAGF,IAAI,CAACG,cAArB;EACAhB,WAAW,CAACe,OAAD,EAAWE,KAAD,IAAW;IAC9B,IAAI,CAACA,KAAL,EAAY;MACV,OAAOR,QAAQ,CAAC,IAAIS,KAAJ,CAAU,iCAAiCH,OAAjC,GAA2C,4CAArD,CAAD,CAAf;IACD;;IACD,MAAMI,EAAE,GAAGN,IAAI,CAACO,WAAhB;;IACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;MAC1BvB,GAAG,CAACwB,IAAJ,CAAS,SAAT,EAAoB,gBAAgBD,KAAK,CAACxB,IAAtB,GAA6B,GAAjD;IACD;;IAEDQ,OAAO,CAACa,EAAD,CAAP,CAAYK,IAAZ,CAAiB,MAAM;MACrBnB,GAAG,CAACoB,OAAJ,CAAY;QACVC,IAAI,EAAEX,OADI;QAEVY,GAAG,EAAER,EAFK;QAGVS,KAAK,EAAE,CAHG;QAIVC,OAAO,EAAER;MAJC,CAAZ,EAKGG,IALH,CAKQM,aALR,EAKuBrB,QALvB;IAMD,CAPD,EAOGsB,KAPH,CAOUC,GAAD,IAAS;MAChB,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;IACD,CATD;;IAWA,SAASF,aAAT,GAAyB;MACvB1B,UAAU,CAACG,GAAD,EAAMC,IAAN,EAAawB,GAAD,IAAS;QAC7B,IAAIA,GAAJ,EAAS;UACP,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;QACD,CAFD,MAEO;UACLC,OAAO,CAAClC,GAAR,CAAY,MAAMW,YAAY,CAACwB,IAAnB,GAA0B,yBAAtC;UACA,OAAOzB,QAAQ,EAAf;QACD;MACF,CAPS,CAAV;IAQD;EACF,CA9BU,CAAX;AA+BD"},"metadata":{},"sourceType":"script"}