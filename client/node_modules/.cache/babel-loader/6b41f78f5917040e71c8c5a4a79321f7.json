{"ast":null,"code":"\"use strict\";\n\nconst {\n  classToInvokable\n} = require(\"./utils\");\n\nclass ABSTRACT {\n  static toString() {\n    return new this().toString(...arguments);\n  }\n\n  toString() {\n    return this.toSql(...arguments);\n  }\n\n  toSql() {\n    throw new Error(\"toSql implementation missing\");\n  }\n\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY DEFERRED\";\n  }\n\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return \"DEFERRABLE INITIALLY IMMEDIATE\";\n  }\n\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return \"NOT DEFERRABLE\";\n  }\n\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n\n}\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\nmodule.exports = Deferrable;","map":{"version":3,"mappings":";;AAEA,MAAM;EAAEA;AAAF,IAAuBC,QAAQ,SAAR,CAA7B;;AAEA,eAAe;EACN,kBAAkB;IACvB,OAAO,IAAI,IAAJ,GAAWC,QAAX,CAAoB,YAApB,CAAP;EAA8B;;EAGhCA,WAAkB;IAChB,OAAO,KAAKC,KAAL,CAAW,YAAX,CAAP;EAAqB;;EAGvBA,QAAQ;IACN,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;EAAgB;;AAVL;;AAcf,iCAAiCC,QAAjC,CAA0C;EACxCF,QAAQ;IACN,OAAO,+BAAP;EAAO;;AAF+B;;AAM1C,kCAAkCE,QAAlC,CAA2C;EACzCF,QAAQ;IACN,OAAO,gCAAP;EAAO;;AAFgC;;AAM3C,kBAAkBE,QAAlB,CAA2B;EACzBF,QAAQ;IACN,OAAO,gBAAP;EAAO;;AAFgB;;AAM3B,2BAA2BE,QAA3B,CAAoC;EAClCC,YAAYC,WAAZ,EAAyB;IACvB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EAAmB;;EAGrBJ,MAAMK,cAAN,EAAsB;IACpB,OAAOA,eAAeC,gBAAf,CAAgC,KAAKF,WAArC,CAAP;EAA4C;;AAPZ;;AAWpC,4BAA4BF,QAA5B,CAAqC;EACnCC,YAAYC,WAAZ,EAAyB;IACvB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EAAmB;;EAGrBJ,MAAMK,cAAN,EAAsB;IACpB,OAAOA,eAAeE,iBAAf,CAAiC,KAAKH,WAAtC,CAAP;EAA6C;;AAPZ;;AAiDrC,MAAMI,aAAa;EACjBC,oBAAoBZ,iBAAiBY,kBAAjB,CADH;EAEjBC,qBAAqBb,iBAAiBa,mBAAjB,CAFJ;EAGjBC,KAAKd,iBAAiBc,GAAjB,CAHY;EAIjBC,cAAcf,iBAAiBe,YAAjB,CAJG;EAKjBC,eAAehB,iBAAiBgB,aAAjB;AALE,CAAnB;AAQAC,OAAOC,OAAP,GAAiBP,UAAjB","names":["classToInvokable","require","toString","toSql","Error","ABSTRACT","constructor","constraints","queryGenerator","setDeferredQuery","setImmediateQuery","Deferrable","INITIALLY_DEFERRED","INITIALLY_IMMEDIATE","NOT","SET_DEFERRED","SET_IMMEDIATE","module","exports"],"sources":["/Users/aurele/node_modules/sequelize/src/deferrable.js"],"sourcesContent":["'use strict';\n\nconst { classToInvokable } = require('./utils');\n\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n\n  toString(...args) {\n    return this.toSql(...args);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED    Use when declaring a constraint. Allow and enable by default this constraint's checks to be deferred at the end of transactions.\n * @property INITIALLY_IMMEDIATE   Use when declaring a constraint. Allow the constraint's checks to be deferred at the end of transactions.\n * @property NOT                   Use when declaring a constraint. Set the constraint to not deferred. This is the default in PostgreSQL and makes it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED          Use when declaring a transaction. Defer the deferrable checks involved in this transaction at commit.\n * @property SET_IMMEDIATE         Use when declaring a transaction. Execute the deferrable checks involved in this transaction immediately.\n */\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\n\nmodule.exports = Deferrable;\n"]},"metadata":{},"sourceType":"script"}