{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst Utils = require(\"./../utils\");\n\nconst Helpers = require(\"./helpers\");\n\nconst _ = require(\"lodash\");\n\nconst Association = require(\"./base\");\n\nconst BelongsTo = require(\"./belongs-to\");\n\nconst HasMany = require(\"./has-many\");\n\nconst HasOne = require(\"./has-one\");\n\nconst AssociationError = require(\"../errors\").AssociationError;\n\nconst EmptyResultError = require(\"../errors\").EmptyResultError;\n\nconst Op = require(\"../operators\");\n\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === void 0 || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = \"BelongsToMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = __spreadValues({}, this.options.through);\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError(\"'as' must be defined for many-to-many self-associations\");\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    _.each(this.target.associations, association => {\n      if (association.associationType !== \"BelongsToMany\") return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === \"string\") {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [],\n          paranoid: this.through.paranoid ? this.through.paranoid : false,\n          validate: {}\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\"timestamps\", \"createdAt\", \"updatedAt\", \"deletedAt\", \"paranoid\"]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n\n        this._createForeignAndOtherKeys();\n      }\n\n      if (this.paired.targetKeyDefault) {\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n\n          this.paired._createForeignAndOtherKeys();\n\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n\n      if (this.paired.otherKeyDefault) {\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n    this.associationAccessor = this.as;\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize([this.source.options.name.singular, this.sourceKey].join(\"_\"));\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize([this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular, this.targetKey].join(\"_\"));\n    }\n  }\n\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          attribute.primaryKey = false;\n        } else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n\n    const sourceAttribute = __spreadValues({\n      type: sourceKeyType\n    }, this.foreignKeyAttribute);\n\n    const targetAttribute = __spreadValues({\n      type: targetKeyType\n    }, this.otherKeyAttribute);\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n\n      if (typeof this.options.uniqueKey === \"string\" && this.options.uniqueKey !== \"\") {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, \"unique\"].join(\"_\");\n      }\n\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = \"CASCADE\";\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = \"CASCADE\";\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = \"CASCADE\";\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = \"CASCADE\";\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n    this.through.model.refreshAttributes();\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.options.sequelize.options.dialect === \"db2\" && this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = __spreadValues({}, this.scope);\n    }\n\n    options.where = {\n      [Op.and]: [scopeWhere, options.where]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, \"paranoid\", true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n    options = Utils.cloneDeep(options);\n    options.attributes = [[sequelize.fn(\"COUNT\", sequelize.col([this.target.name, this.targetKeyField].join(\".\"))), \"count\"]];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = __spreadProps(__spreadValues({\n      raw: true\n    }, options), {\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    });\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.targetKey]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [{\n        [Op.or]: instancePrimaryKeys\n      }, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey)\n    }, this.through.scope);\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n      const unassociatedObjects = newAssociatedObjects.filter(obj => !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey)));\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).length) {\n            promises.push(this.through.model.update(attributes, Object.assign(options, {\n              where: {\n                [identifier]: sourceInstance.get(sourceKey),\n                [foreignIdentifier]: newObj.get(targetKey)\n              }\n            })));\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(this.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n          where: __spreadValues({\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier])\n          }, this.through.scope)\n        })));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, defaultAttributes), unassociatedObject[this.through.model.name]), {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey)\n          }), this.through.scope);\n        });\n        promises.push(this.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  async add(sourceInstance, newInstances, options) {\n    if (!newInstances) return Promise.resolve();\n    options = __spreadValues({}, options);\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey))\n    }, association.through.scope);\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n          Object.assign(attributes, association.through.scope);\n          return attributes;\n        });\n        promises.push(association.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n\n        const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, {\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: assoc.get(targetKey)\n          }\n        })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n    options = options || {};\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n    return association.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n      where\n    }));\n  }\n\n  async create(sourceInstance, values, options) {\n    const association = this;\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    const newAssociatedObject = await association.target.create(values, options);\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, [\"fields\"]));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,QAAQC,QAAQ,YAAR,CAAd;;AACA,MAAMC,UAAUD,QAAQ,WAAR,CAAhB;;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;;AACA,MAAMG,cAAcH,QAAQ,QAAR,CAApB;;AACA,MAAMI,YAAYJ,QAAQ,cAAR,CAAlB;;AACA,MAAMK,UAAUL,QAAQ,YAAR,CAAhB;;AACA,MAAMM,SAASN,QAAQ,WAAR,CAAf;;AACA,MAAMO,mBAAmBP,QAAQ,WAAR,EAAqBO,gBAA9C;;AACA,MAAMC,mBAAmBR,QAAQ,WAAR,EAAqBQ,gBAA9C;;AACA,MAAMC,KAAKT,QAAQ,cAAR,CAAX;;AA6CA,4BAA4BG,WAA5B,CAAwC;EACtCO,YAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;IACnC,MAAMF,MAAN,EAAcC,MAAd,EAAsBC,OAAtB;;IAEA,IAAI,KAAKA,OAAL,CAAaC,OAAb,KAAyB,MAAzB,IAAsC,KAAKD,OAAL,CAAaC,OAAb,KAAyB,IAA/D,IAAuE,KAAKD,OAAL,CAAaC,OAAb,KAAyB,IAApG,EAA0G;MACxG,MAAM,IAAIP,gBAAJ,CAAqB,GAAGI,OAAOI,sBAAsBH,OAAOG,gEAA5D,CAAN;IAAkE;;IAGpE,IAAI,CAAC,KAAKF,OAAL,CAAaC,OAAb,CAAqBE,KAA1B,EAAiC;MAC/B,KAAKH,OAAL,CAAaC,OAAb,GAAuB;QACrBE,OAAOH,QAAQC;MADM,CAAvB;IACiB;;IAInB,KAAKG,eAAL,GAAuB,eAAvB;IACA,KAAKC,iBAAL,GAAyB,IAAzB;IACA,KAAKC,SAAL,GAAiBR,OAAOQ,SAAxB;IACA,KAAKL,OAAL,GAAeM,mBAAK,KAAKP,OAAL,CAAaC,OAAlB,CAAf;IACA,KAAKO,kBAAL,GAA0B,IAA1B;IACA,KAAKC,YAAL,GAAoB,KAApB;;IAEA,IAAI,CAAC,KAAKC,EAAN,IAAY,KAAKC,iBAArB,EAAwC;MACtC,MAAM,IAAIjB,gBAAJ,CAAqB,yDAArB,CAAN;IAA2B;;IAG7B,IAAI,KAAKgB,EAAT,EAAa;MACX,KAAKE,SAAL,GAAiB,IAAjB;;MAEA,IAAIvB,EAAEwB,aAAF,CAAgB,KAAKH,EAArB,CAAJ,EAA8B;QAC5B,KAAKV,OAAL,CAAaE,IAAb,GAAoB,KAAKQ,EAAzB;QACA,KAAKA,EAAL,GAAU,KAAKA,EAAL,CAAQI,MAAlB;MAAkB,CAFpB,MAGO;QACL,KAAKd,OAAL,CAAaE,IAAb,GAAoB;UAClBY,QAAQ,KAAKJ,EADK;UAElBK,UAAU7B,MAAM8B,WAAN,CAAkB,KAAKN,EAAvB;QAFQ,CAApB;MAEmC;IAAA,CATvC,MAYO;MACL,KAAKA,EAAL,GAAU,KAAKX,MAAL,CAAYC,OAAZ,CAAoBE,IAApB,CAAyBY,MAAnC;MACA,KAAKd,OAAL,CAAaE,IAAb,GAAoB,KAAKH,MAAL,CAAYC,OAAZ,CAAoBE,IAAxC;IAAwC;;IAG1C,KAAKe,iBAAL,GAAyB/B,MAAMgC,iBAAN,CACvB,KAAKpB,MAAL,CAAYqB,SADW,EAEvB,KAAKR,iBAAL,GAAyB,KAAKD,EAAL,IAAW,KAAKX,MAAL,CAAYoB,SAAhD,GAA4D,KAAKpB,MAAL,CAAYoB,SAFjD,CAAzB;;IAQA,IAAI,KAAKR,iBAAT,EAA4B;MAC1B,KAAKN,iBAAL,GAAyB,IAAzB;IAAyB;;IAM3BhB,EAAE+B,IAAF,CAAO,KAAKrB,MAAL,CAAYsB,YAAnB,EAAiCC,eAAe;MAC9C,IAAIA,YAAYlB,eAAZ,KAAgC,eAApC,EAAqD;MACrD,IAAIkB,YAAYvB,MAAZ,KAAuB,KAAKD,MAAhC,EAAwC;;MAExC,IAAI,KAAKE,OAAL,CAAaC,OAAb,CAAqBE,KAArB,KAA+BmB,YAAYtB,OAAZ,CAAoBC,OAApB,CAA4BE,KAA/D,EAAsE;QACpE,KAAKoB,MAAL,GAAcD,WAAd;QACAA,YAAYC,MAAZ,GAAqB,IAArB;MAAqB;IAAA,CANzB;;IAaA,KAAKC,SAAL,GAAiB,KAAKxB,OAAL,CAAawB,SAAb,IAA0B,KAAK1B,MAAL,CAAY2B,mBAAvD;IACA,KAAKC,cAAL,GAAsB,KAAK5B,MAAL,CAAY6B,aAAZ,CAA0B,KAAKH,SAA/B,EAA0CI,KAA1C,IAAmD,KAAKJ,SAA9E;;IAEA,IAAI,KAAKxB,OAAL,CAAa6B,SAAjB,EAA4B;MAC1B,KAAKA,SAAL,GAAiB,KAAK7B,OAAL,CAAa6B,SAA9B;MACA,KAAKC,cAAL,GAAsB,KAAK/B,MAAL,CAAY4B,aAAZ,CAA0B,KAAKE,SAA/B,EAA0CD,KAA1C,IAAmD,KAAKC,SAA9E;IAA8E,CAFhF,MAGO;MACL,KAAKE,gBAAL,GAAwB,IAAxB;MACA,KAAKF,SAAL,GAAiB,KAAK9B,MAAL,CAAY0B,mBAA7B;MACA,KAAKK,cAAL,GAAsB,KAAK/B,MAAL,CAAY4B,aAAZ,CAA0B,KAAKE,SAA/B,EAA0CD,KAA1C,IAAmD,KAAKC,SAA9E;IAA8E;;IAGhF,KAAKG,0BAAL;;IAEA,IAAI,OAAO,KAAK/B,OAAL,CAAaE,KAApB,KAA8B,QAAlC,EAA4C;MAC1C,IAAI,CAAC,KAAKG,SAAL,CAAe2B,SAAf,CAAyB,KAAKhC,OAAL,CAAaE,KAAtC,CAAL,EAAmD;QACjD,KAAKF,OAAL,CAAaE,KAAb,GAAqB,KAAKG,SAAL,CAAe4B,MAAf,CAAsB,KAAKjC,OAAL,CAAaE,KAAnC,EAA0C,EAA1C,EAA8CgC,OAAOC,MAAP,CAAc,KAAKpC,OAAnB,EAA4B;UAC7FmB,WAAW,KAAKlB,OAAL,CAAaE,KADqE;UAE7FkC,SAAS,EAFoF;UAG7FC,UAAU,KAAKrC,OAAL,CAAaqC,QAAb,GAAwB,KAAKrC,OAAL,CAAaqC,QAArC,GAAgD,KAHmC;UAI7FC,UAAU;QAJmF,CAA5B,CAA9C,CAArB;MAIY,CALd,MAOO;QACL,KAAKtC,OAAL,CAAaE,KAAb,GAAqB,KAAKG,SAAL,CAAeH,KAAf,CAAqB,KAAKF,OAAL,CAAaE,KAAlC,CAArB;MAAuD;IAAA;;IAI3DgC,OAAOC,MAAP,CAAc,KAAKpC,OAAnB,EAA4BX,EAAEmD,IAAF,CAAO,KAAKvC,OAAL,CAAaE,KAAb,CAAmBH,OAA1B,EAAmC,CAC7D,YAD6D,EAC/C,WAD+C,EAClC,WADkC,EACrB,WADqB,EACR,UADQ,CAAnC,CAA5B;;IAIA,IAAI,KAAKuB,MAAT,EAAiB;MACf,IAAIkB,mBAAmB,KAAvB;;MAEA,IAAI,KAAKV,gBAAT,EAA2B;QACzB,KAAKF,SAAL,GAAiB,KAAKN,MAAL,CAAYC,SAA7B;QACA,KAAKM,cAAL,GAAsB,KAAKP,MAAL,CAAYG,cAAlC;;QACA,KAAKM,0BAAL;MAAK;;MAEP,IAAI,KAAKT,MAAL,CAAYQ,gBAAhB,EAAkC;QAGhC,IAAI,KAAKR,MAAL,CAAYM,SAAZ,KAA0B,KAAKL,SAAnC,EAA8C;UAC5C,OAAO,KAAKvB,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKJ,MAAL,CAAYmB,QAA7C,CAAP;UACA,KAAKnB,MAAL,CAAYM,SAAZ,GAAwB,KAAKL,SAA7B;UACA,KAAKD,MAAL,CAAYO,cAAZ,GAA6B,KAAKJ,cAAlC;;UACA,KAAKH,MAAL,CAAYS,0BAAZ;;UACAS,mBAAmB,IAAnB;QAAmB;MAAA;;MAIvB,IAAI,KAAKE,eAAT,EAA0B;QACxB,KAAKD,QAAL,GAAgB,KAAKnB,MAAL,CAAYqB,UAA5B;MAA4B;;MAE9B,IAAI,KAAKrB,MAAL,CAAYoB,eAAhB,EAAiC;QAG/B,IAAI,KAAKpB,MAAL,CAAYmB,QAAZ,KAAyB,KAAKE,UAAlC,EAA8C;UAC5C,OAAO,KAAK3C,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKJ,MAAL,CAAYmB,QAA7C,CAAP;UACA,KAAKnB,MAAL,CAAYmB,QAAZ,GAAuB,KAAKE,UAA5B;UACAH,mBAAmB,IAAnB;QAAmB;MAAA;;MAIvB,IAAIA,gBAAJ,EAAsB;QACpB,KAAKlB,MAAL,CAAYsB,iBAAZ;MAAY;IAAA;;IAIhB,IAAI,KAAK5C,OAAT,EAAkB;MAChB,KAAK6C,YAAL,GAAoB,KAAK7C,OAAL,CAAaE,KAAjC;IAAiC;;IAGnC,KAAKH,OAAL,CAAamB,SAAb,GAAyB,KAAK4B,YAAL,GAAoB,KAAK9C,OAAL,CAAaE,KAAb,KAAuBgC,OAAO,KAAKlC,OAAL,CAAaE,KAApB,CAAvB,GAAoD,KAAKF,OAAL,CAAaE,KAAb,CAAmBgB,SAAvE,GAAmF,KAAKlB,OAAL,CAAaE,KAA7I;IAEA,KAAK6C,mBAAL,GAA2B,KAAKtC,EAAhC;;IAGA,MAAMI,SAASzB,EAAE4D,UAAF,CAAa,KAAKjD,OAAL,CAAaE,IAAb,CAAkBY,MAA/B,CAAf;;IACA,MAAMC,WAAW1B,EAAE4D,UAAF,CAAa,KAAKjD,OAAL,CAAaE,IAAb,CAAkBa,QAA/B,CAAjB;;IAEA,KAAKmC,SAAL,GAAiB;MACfC,KAAK,MAAMrC,QADI;MAEfsC,KAAK,MAAMtC,QAFI;MAGfuC,aAAa,MAAMvC,QAHJ;MAIfwC,KAAK,MAAMvC,UAJI;MAKfwC,QAAQ,SAASxC,UALF;MAMfyC,QAAQ,SAASzC,UANF;MAOf0C,gBAAgB,SAAS3C,QAPV;MAQf4C,WAAW,MAAM3C,UARF;MASf4C,QAAQ,MAAM7C,QATC;MAUf8C,OAAO,QAAQ9C;IAVA,CAAjB;EAUiB;;EAInBkB,6BAA6B;IAI3B,IAAI3C,EAAEwE,QAAF,CAAW,KAAK7D,OAAL,CAAa4C,UAAxB,CAAJ,EAAyC;MACvC,KAAKkB,mBAAL,GAA2B,KAAK9D,OAAL,CAAa4C,UAAxC;MACA,KAAKA,UAAL,GAAkB,KAAKkB,mBAAL,CAAyB5D,IAAzB,IAAiC,KAAK4D,mBAAL,CAAyBC,SAA5E;IAA4E,CAF9E,MAGO;MACL,KAAKD,mBAAL,GAA2B,EAA3B;MACA,KAAKlB,UAAL,GAAkB,KAAK5C,OAAL,CAAa4C,UAAb,IAA2B1D,MAAM8E,QAAN,CAC3C,CACE,KAAKlE,MAAL,CAAYE,OAAZ,CAAoBE,IAApB,CAAyBa,QAD3B,EAEE,KAAKS,SAFP,EAGEyC,IAHF,CAGO,GAHP,CAD2C,CAA7C;IAIS;;IAIX,IAAI5E,EAAEwE,QAAF,CAAW,KAAK7D,OAAL,CAAa0C,QAAxB,CAAJ,EAAuC;MACrC,KAAKwB,iBAAL,GAAyB,KAAKlE,OAAL,CAAa0C,QAAtC;MACA,KAAKA,QAAL,GAAgB,KAAKwB,iBAAL,CAAuBhE,IAAvB,IAA+B,KAAKgE,iBAAL,CAAuBH,SAAtE;IAAsE,CAFxE,MAGO;MACL,IAAI,CAAC,KAAK/D,OAAL,CAAa0C,QAAlB,EAA4B;QAC1B,KAAKC,eAAL,GAAuB,IAAvB;MAAuB;;MAGzB,KAAKuB,iBAAL,GAAyB,EAAzB;MACA,KAAKxB,QAAL,GAAgB,KAAK1C,OAAL,CAAa0C,QAAb,IAAyBxD,MAAM8E,QAAN,CACvC,CACE,KAAKrD,iBAAL,GAAyBzB,MAAM8B,WAAN,CAAkB,KAAKN,EAAvB,CAAzB,GAAsD,KAAKX,MAAL,CAAYC,OAAZ,CAAoBE,IAApB,CAAyBa,QADjF,EAEE,KAAKc,SAFP,EAGEoC,IAHF,CAGO,GAHP,CADuC,CAAzC;IAIS;EAAA;;EAObpB,oBAAoB;IAClB,KAAKsB,UAAL,GAAkB,KAAKvB,UAAvB;IACA,KAAKwB,iBAAL,GAAyB,KAAK1B,QAA9B;;IAIArD,EAAE+B,IAAF,CAAO,KAAKnB,OAAL,CAAaE,KAAb,CAAmBwB,aAA1B,EAAyC,CAAC0C,SAAD,EAAYC,aAAZ,KAA8B;MACrE,IAAID,UAAUE,UAAV,KAAyB,IAAzB,IAAiCF,UAAUG,cAAV,KAA6B,IAAlE,EAAwE;QACtE,IAAI,CAAC,KAAK5B,UAAN,EAAkB,KAAKF,QAAvB,EAAiC+B,QAAjC,CAA0CH,aAA1C,CAAJ,EAA8D;UAG5DD,UAAUE,UAAV,GAAuB,KAAvB;QAAuB,CAHzB,MAKK;UACH,OAAO,KAAKtE,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC2C,aAAjC,CAAP;QAAwC;;QAE1C,KAAKI,iBAAL,GAAyB,IAAzB;MAAyB;IAAA,CAV7B;;IAcA,MAAMlD,YAAY,KAAK1B,MAAL,CAAY6B,aAAZ,CAA0B,KAAKH,SAA/B,CAAlB;IACA,MAAMmD,gBAAgBnD,UAAUoD,IAAhC;IACA,MAAMlD,iBAAiB,KAAKA,cAA5B;IACA,MAAMG,YAAY,KAAK9B,MAAL,CAAY4B,aAAZ,CAA0B,KAAKE,SAA/B,CAAlB;IACA,MAAMgD,gBAAgBhD,UAAU+C,IAAhC;IACA,MAAM9C,iBAAiB,KAAKA,cAA5B;;IACA,MAAMgD,kBAAkBvE;MAAEqE,MAAMD;IAAR,GAA0B,KAAKb,mBAA/B,CAAxB;;IACA,MAAMiB,kBAAkBxE;MAAEqE,MAAMC;IAAR,GAA0B,KAAKX,iBAA/B,CAAxB;;IAEA,IAAI,KAAKQ,iBAAL,KAA2B,IAA/B,EAAqC;MACnCK,gBAAgBR,UAAhB,GAA6BO,gBAAgBP,UAAhB,GAA6B,IAA1D;IAA0D,CAD5D,MAC4D,IACjD,KAAKtE,OAAL,CAAa+E,MAAb,KAAwB,KADyB,EAClB;MACxC,IAAIC,SAAJ;;MACA,IAAI,OAAO,KAAKjF,OAAL,CAAaiF,SAApB,KAAkC,QAAlC,IAA8C,KAAKjF,OAAL,CAAaiF,SAAb,KAA2B,EAA7E,EAAiF;QAC/EA,YAAY,KAAKjF,OAAL,CAAaiF,SAAzB;MAAyB,CAD3B,MAEO;QACLA,YAAY,CAAC,KAAKhF,OAAL,CAAaE,KAAb,CAAmBgB,SAApB,EAA+B,KAAKyB,UAApC,EAAgD,KAAKF,QAArD,EAA+D,QAA/D,EAAyEuB,IAAzE,CAA8E,GAA9E,CAAZ;MAA0F;;MAE5Fc,gBAAgBC,MAAhB,GAAyBF,gBAAgBE,MAAhB,GAAyBC,SAAlD;IAAkD;;IAGpD,IAAI,CAAC,KAAKhF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,CAAL,EAAwD;MACtD,KAAK3C,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,IAAoD;QAClD4B,gBAAgB;MADkC,CAApD;IACkB;;IAIpB,IAAI,CAAC,KAAKvE,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,CAAL,EAAsD;MACpD,KAAKzC,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,IAAkD;QAChD8B,gBAAgB;MADgC,CAAlD;IACkB;;IAIpB,IAAI,KAAKxE,OAAL,CAAakF,WAAb,KAA6B,KAAjC,EAAwC;MACtCJ,gBAAgBK,UAAhB,GAA6B;QAC3BhF,OAAO,KAAKL,MAAL,CAAYsF,YAAZ,EADoB;QAE3BC,KAAK3D;MAFsB,CAA7B;MAKAoD,gBAAgBQ,QAAhB,GAA2B,KAAKtF,OAAL,CAAasF,QAAb,IAAyB,KAAKrF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,EAAkD0C,QAAtG;MACAR,gBAAgBS,QAAhB,GAA2B,KAAKvF,OAAL,CAAauF,QAAb,IAAyB,KAAKtF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,EAAkD2C,QAAtG;MAEA,IAAI,CAACT,gBAAgBQ,QAArB,EAA+BR,gBAAgBQ,QAAhB,GAA2B,SAA3B;MAC/B,IAAI,CAACR,gBAAgBS,QAArB,EAA+BT,gBAAgBS,QAAhB,GAA2B,SAA3B;MAE/BR,gBAAgBI,UAAhB,GAA6B;QAC3BhF,OAAO,KAAKJ,MAAL,CAAYqF,YAAZ,EADoB;QAE3BC,KAAKvD;MAFsB,CAA7B;MAKAiD,gBAAgBO,QAAhB,GAA2B,KAAKrF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,EAAgD4C,QAAhD,IAA4D,KAAKtF,OAAL,CAAasF,QAApG;MACAP,gBAAgBQ,QAAhB,GAA2B,KAAKtF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,EAAgD6C,QAAhD,IAA4D,KAAKvF,OAAL,CAAauF,QAApG;MAEA,IAAI,CAACR,gBAAgBO,QAArB,EAA+BP,gBAAgBO,QAAhB,GAA2B,SAA3B;MAC/B,IAAI,CAACP,gBAAgBQ,QAArB,EAA+BR,gBAAgBQ,QAAhB,GAA2B,SAA3B;IAA2B;;IAG5DpD,OAAOC,MAAP,CAAc,KAAKnC,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,CAAd,EAAiEkC,eAAjE;IACA3C,OAAOC,MAAP,CAAc,KAAKnC,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,CAAd,EAA+DqC,eAA/D;IAEA,KAAK9E,OAAL,CAAaE,KAAb,CAAmBqF,iBAAnB;IAEA,KAAKC,eAAL,GAAuB,KAAKxF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKiB,UAAtC,EAAkDhB,KAAlD,IAA2D,KAAKgB,UAAvF;IACA,KAAK8C,sBAAL,GAA8B,KAAKzF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKe,QAAtC,EAAgDd,KAAhD,IAAyD,KAAKc,QAA5F;;IAKA,IAAI,KAAK1C,OAAL,CAAaM,SAAb,CAAuBN,OAAvB,CAA+B2F,OAA/B,KAA2C,KAA3C,IACA,KAAK7F,MAAL,CAAY6B,aAAZ,CAA0B,KAAKH,SAA/B,EAA0C+C,UAA1C,KAAyD,IAD7D,EACmE;MACjE,KAAKzE,MAAL,CAAY6B,aAAZ,CAA0B,KAAKH,SAA/B,EAA0CwD,MAA1C,GAAmD,IAAnD;IAAmD;;IAGrD,IAAI,KAAKzD,MAAL,IAAe,CAAC,KAAKA,MAAL,CAAYmE,sBAAhC,EAAwD;MACtD,KAAKnE,MAAL,CAAYmE,sBAAZ,GAAqC,KAAKzF,OAAL,CAAaE,KAAb,CAAmBwB,aAAnB,CAAiC,KAAKJ,MAAL,CAAYmB,QAA7C,EAAuDd,KAAvD,IAAgE,KAAKL,MAAL,CAAYmB,QAAjH;IAAiH;;IAGnH,KAAKkD,QAAL,GAAgB,IAAIrG,SAAJ,CAAc,KAAKU,OAAL,CAAaE,KAA3B,EAAkC,KAAKL,MAAvC,EAA+C;MAC7D8C,YAAY,KAAKA;IAD4C,CAA/C,CAAhB;IAGA,KAAKiD,cAAL,GAAsB,IAAIrG,OAAJ,CAAY,KAAKM,MAAjB,EAAyB,KAAKG,OAAL,CAAaE,KAAtC,EAA6C;MACjEyC,YAAY,KAAKA;IADgD,CAA7C,CAAtB;IAGA,KAAKkD,aAAL,GAAqB,IAAIrG,MAAJ,CAAW,KAAKK,MAAhB,EAAwB,KAAKG,OAAL,CAAaE,KAArC,EAA4C;MAC/DyC,YAAY,KAAKA,UAD8C;MAE/DpB,WAAW,KAAKA,SAF+C;MAG/Dd,IAAI,KAAKT,OAAL,CAAaE,KAAb,CAAmBD;IAHwC,CAA5C,CAArB;IAMA,KAAK6F,QAAL,GAAgB,IAAIxG,SAAJ,CAAc,KAAKU,OAAL,CAAaE,KAA3B,EAAkC,KAAKJ,MAAvC,EAA+C;MAC7D6C,YAAY,KAAKF;IAD4C,CAA/C,CAAhB;IAGA,KAAKsD,cAAL,GAAsB,IAAIxG,OAAJ,CAAY,KAAKO,MAAjB,EAAyB,KAAKE,OAAL,CAAaE,KAAtC,EAA6C;MACjEyC,YAAY,KAAKF;IADgD,CAA7C,CAAtB;IAGA,KAAKuD,aAAL,GAAqB,IAAIxG,MAAJ,CAAW,KAAKM,MAAhB,EAAwB,KAAKE,OAAL,CAAaE,KAArC,EAA4C;MAC/DyC,YAAY,KAAKF,QAD8C;MAE/DlB,WAAW,KAAKK,SAF+C;MAG/DnB,IAAI,KAAKT,OAAL,CAAaE,KAAb,CAAmBD;IAHwC,CAA5C,CAArB;;IAMA,IAAI,KAAKqB,MAAL,IAAe,KAAKA,MAAL,CAAYoB,eAA/B,EAAgD;MAC9C,KAAKpB,MAAL,CAAYwE,QAAZ,GAAuB,IAAIxG,SAAJ,CAAc,KAAKgC,MAAL,CAAYtB,OAAZ,CAAoBE,KAAlC,EAAyC,KAAKoB,MAAL,CAAYxB,MAArD,EAA6D;QAClF6C,YAAY,KAAKrB,MAAL,CAAYmB;MAD0D,CAA7D,CAAvB;MAIA,KAAKnB,MAAL,CAAY0E,aAAZ,GAA4B,IAAIxG,MAAJ,CAAW,KAAK8B,MAAL,CAAYxB,MAAvB,EAA+B,KAAKwB,MAAL,CAAYtB,OAAZ,CAAoBE,KAAnD,EAA0D;QACpFyC,YAAY,KAAKrB,MAAL,CAAYmB,QAD4D;QAEpFlB,WAAW,KAAKD,MAAL,CAAYM,SAF6D;QAGpFnB,IAAI,KAAKa,MAAL,CAAYtB,OAAZ,CAAoBE,KAApB,CAA0BD;MAHsD,CAA1D,CAA5B;IAGgC;;IAIlCd,QAAQ8G,oBAAR,CAA6B,IAA7B;IAEA,OAAO,IAAP;EAAO;;EAGTC,MAAMC,GAAN,EAAW;IACT,MAAMC,UAAU,CAAC,KAAD,EAAQ,OAAR,EAAiB,WAAjB,EAA8B,QAA9B,EAAwC,KAAxC,EAA+C,KAA/C,EAAsD,aAAtD,EAAqE,QAArE,EAA+E,gBAA/E,EAAiG,QAAjG,CAAhB;IACA,MAAMC,UAAU;MACd5C,WAAW,KADG;MAEdC,QAAQ,KAFM;MAGdN,aAAa,KAHC;MAIdI,gBAAgB;IAJF,CAAhB;IAOArE,QAAQmH,YAAR,CAAqB,IAArB,EAA2BH,GAA3B,EAAgCC,OAAhC,EAAyCC,OAAzC;EAAyC;;EAmBrC,UAAIE,QAAJ,EAAcxG,OAAd,EAAuB;IAC3BA,UAAUd,MAAMuH,SAAN,CAAgBzG,OAAhB,KAA4B,EAAtC;IAEA,MAAMC,UAAU,KAAKA,OAArB;IACA,IAAIyG,UAAJ;IACA,IAAIC,YAAJ;;IAEA,IAAI,KAAKC,KAAT,EAAgB;MACdF,aAAanG,mBAAK,KAAKqG,KAAV,CAAb;IAAuB;;IAGzB5G,QAAQ6G,KAAR,GAAgB;MAAA,CACbjH,GAAGkH,GADU,GACJ,CACRJ,UADQ,EAER1G,QAAQ6G,KAFA;IADI,CAAhB;;IAOA,IAAI1E,OAAOlC,QAAQE,KAAf,MAA0BF,QAAQE,KAAtC,EAA6C;MAC3CwG,eAAe,EAAf;MACAA,aAAa,KAAK/D,UAAlB,IAAgC4D,SAASrD,GAAT,CAAa,KAAK3B,SAAlB,CAAhC;;MAEA,IAAIvB,QAAQ2G,KAAZ,EAAmB;QACjBzE,OAAOC,MAAP,CAAcuE,YAAd,EAA4B1G,QAAQ2G,KAApC;MAAoC;;MAItC,IAAI5G,QAAQC,OAAR,IAAmBD,QAAQC,OAAR,CAAgB4G,KAAvC,EAA8C;QAC5CF,eAAe;UAAA,CACZ/G,GAAGkH,GADS,GACH,CAACH,YAAD,EAAe3G,QAAQC,OAAR,CAAgB4G,KAA/B;QADG,CAAf;MAC2C;;MAI7C7G,QAAQ+G,OAAR,GAAkB/G,QAAQ+G,OAAR,IAAmB,EAArC;MACA/G,QAAQ+G,OAAR,CAAgBC,IAAhB,CAAqB;QACnB1F,aAAa,KAAK2E,aADC;QAEnBgB,YAAYjH,QAAQkH,mBAFD;QAGnBC,UAAU,IAHS;QAInB7E,UAAUjD,EAAE8D,GAAF,CAAMnD,QAAQC,OAAd,EAAuB,UAAvB,EAAmC,IAAnC,CAJS;QAKnB4G,OAAOF;MALY,CAArB;IAKS;;IAIX,IAAIxG,QAAQ,KAAKJ,MAAjB;;IACA,IAAIoC,OAAOiF,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCtH,OAArC,EAA8C,OAA9C,CAAJ,EAA4D;MAC1D,IAAI,CAACA,QAAQ4G,KAAb,EAAoB;QAClBzG,QAAQA,MAAMoH,QAAN,EAAR;MAAc,CADhB,MAEO;QACLpH,QAAQA,MAAMyG,KAAN,CAAY5G,QAAQ4G,KAApB,CAAR;MAA4B;IAAA;;IAIhC,IAAIzE,OAAOiF,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCtH,OAArC,EAA8C,QAA9C,CAAJ,EAA6D;MAC3DG,QAAQA,MAAMqH,MAAN,CAAaxH,QAAQwH,MAArB,EAA6BxH,QAAQyH,eAArC,CAAR;IAA6C;;IAG/C,OAAOtH,MAAMuH,OAAN,CAAc1H,OAAd,CAAP;EAAqB;;EAajB,YAAMwG,QAAN,EAAgBxG,OAAhB,EAAyB;IAC7B,MAAMM,YAAY,KAAKP,MAAL,CAAYO,SAA9B;IAEAN,UAAUd,MAAMuH,SAAN,CAAgBzG,OAAhB,CAAV;IACAA,QAAQiH,UAAR,GAAqB,CACnB,CAAC3G,UAAUqH,EAAV,CAAa,OAAb,EAAsBrH,UAAUsH,GAAV,CAAc,CAAC,KAAK7H,MAAL,CAAYG,IAAb,EAAmB,KAAK4B,cAAxB,EAAwCmC,IAAxC,CAA6C,GAA7C,CAAd,CAAtB,CAAD,EAA0F,OAA1F,CADmB,CAArB;IAGAjE,QAAQkH,mBAAR,GAA8B,EAA9B;IACAlH,QAAQ6H,GAAR,GAAc,IAAd;IACA7H,QAAQ8H,KAAR,GAAgB,IAAhB;IAEA,MAAMC,SAAS,MAAM,KAAK5E,GAAL,CAASqD,QAAT,EAAmBxG,OAAnB,CAArB;IAEA,OAAOgI,SAASD,OAAOnE,KAAhB,EAAuB,EAAvB,CAAP;EAA8B;;EAY1B,UAAIqE,cAAJ,EAAoBC,SAApB,EAA+BlI,OAA/B,EAAwC;IAC5C,IAAI,CAACmI,MAAMC,OAAN,CAAcF,SAAd,CAAL,EAA+B;MAC7BA,YAAY,CAACA,SAAD,CAAZ;IAAa;;IAGflI,UAAUqI;MACRR,KAAK;IADG,GAEL7H,OAFK;MAGR4G,OAAO,KAHC;MAIRK,YAAY,CAAC,KAAKpF,SAAN,CAJJ;MAKRqF,qBAAqB;IALb,EAAV;IAQA,MAAMoB,sBAAsBJ,UAAUK,GAAV,CAAc/B,YAAY;MACpD,IAAIA,oBAAoB,KAAKzG,MAA7B,EAAqC;QACnC,OAAOyG,SAASK,KAAT,EAAP;MAAgB;;MAElB,OAAO;QAAA,CACJ,KAAKhF,SADD,GACa2E;MADb,CAAP;IACoB,CALM,CAA5B;IASAxG,QAAQ6G,KAAR,GAAgB;MAAA,CACbjH,GAAGkH,GADU,GACJ,CACR;QAAA,CAAGlH,GAAG4I,EAAN,GAAWF;MAAX,CADQ,EAERtI,QAAQ6G,KAFA;IADI,CAAhB;IAOA,MAAM4B,oBAAoB,MAAM,KAAKtF,GAAL,CAAS8E,cAAT,EAAyBjI,OAAzB,CAAhC;IAEA,OAAOX,EAAEqJ,cAAF,CAAiBJ,mBAAjB,EAAsCG,iBAAtC,EACL,CAACE,CAAD,EAAIC,CAAJ,KAAUvJ,EAAEwJ,OAAF,CAAUF,EAAE,KAAK9G,SAAP,CAAV,EAA6B+G,EAAE,KAAK/G,SAAP,CAA7B,CADL,EACsDiH,MADtD,KACiE,CADxE;EACwE;;EAepE,UAAIb,cAAJ,EAAoBc,oBAApB,EAA0C/I,OAA1C,EAAmD;IACvDA,UAAUA,WAAW,EAArB;IAEA,MAAMwB,YAAY,KAAKA,SAAvB;IACA,MAAMK,YAAY,KAAKA,SAAvB;IACA,MAAMsC,aAAa,KAAKA,UAAxB;IACA,MAAMC,oBAAoB,KAAKA,iBAA/B;;IAEA,IAAI2E,yBAAyB,IAA7B,EAAmC;MACjCA,uBAAuB,EAAvB;IAAuB,CADzB,MAEO;MACLA,uBAAuB,KAAKC,eAAL,CAAqBD,oBAArB,CAAvB;IAA4C;;IAE9C,MAAMlC,QAAQtG;MAAA,CACX4D,UADW,GACE8D,eAAe9E,GAAf,CAAmB3B,SAAnB;IADF,GAET,KAAKvB,OAAL,CAAa2G,KAFJ,CAAd;;IAKA,MAAMqC,qBAAqBC,eAAe;MACxC,MAAMC,uBAAuB,EAA7B;MACA,MAAMC,WAAW,EAAjB;MACA,MAAMC,oBAAoBrJ,QAAQC,OAAR,IAAmB,EAA7C;MAEA,MAAMqJ,sBAAsBP,qBAAqBQ,MAArB,CAA4BnD,OACtD,CAAC8C,YAAYM,IAAZ,CAAiBC,cAAcA,WAAWrF,iBAAX,MAAkCgC,IAAIjD,GAAJ,CAAQtB,SAAR,CAAjE,CADyB,CAA5B;;MAIA,WAAW4H,UAAX,IAAyBP,WAAzB,EAAsC;QACpC,MAAMQ,SAASX,qBAAqBY,IAArB,CAA0BvD,OAAOqD,WAAWrF,iBAAX,MAAkCgC,IAAIjD,GAAJ,CAAQtB,SAAR,CAAnE,CAAf;;QAEA,IAAI,CAAC6H,MAAL,EAAa;UACXP,qBAAqBnC,IAArB,CAA0ByC,UAA1B;QAA0B,CAD5B,MAEO;UACL,IAAIG,oBAAoBF,OAAO,KAAKzJ,OAAL,CAAaE,KAAb,CAAmBD,IAA1B,CAAxB;;UAEA,IAAI0J,6BAA6B,KAAK3J,OAAL,CAAaE,KAA9C,EAAqD;YACnDyJ,oBAAoB,EAApB;UAAoB;;UAGtB,MAAM3C,aAAa1G,kCAAK8I,iBAAL,GAA2BO,iBAA3B,CAAnB;;UAEA,IAAIzH,OAAO0H,IAAP,CAAY5C,UAAZ,EAAwB6B,MAA5B,EAAoC;YAClCM,SAASpC,IAAT,CACE,KAAK/G,OAAL,CAAaE,KAAb,CAAmB2J,MAAnB,CAA0B7C,UAA1B,EAAsC9E,OAAOC,MAAP,CAAcpC,OAAd,EAAuB;cAC3D6G,OAAO;gBAAA,CACJ1C,UADI,GACS8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CADT;gBAC4B,CAChC4C,iBADgC,GACZsF,OAAOvG,GAAP,CAAWtB,SAAX;cAFhB;YADoD,CAAvB,CAAtC,CADF;UAIsC;QAAA;MAAA;;MAS5C,IAAIsH,qBAAqBL,MAArB,GAA8B,CAAlC,EAAqC;QACnCM,SAASpC,IAAT,CACE,KAAK/G,OAAL,CAAaE,KAAb,CAAmB4J,OAAnB,CAA2B1B,iCACtBrI,OADsB;UAEzB6G,OAAOtG;YAAA,CACJ4D,UADI,GACS8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CADT;YAC4B,CAChC4C,iBADgC,GACZ+E,qBAAqBZ,GAArB,CAAyByB,uBAAuBA,oBAAoB5F,iBAApB,CAAhD;UAFhB,GAGF,KAAKnE,OAAL,CAAa2G,KAHX;QAFkB,EAA3B,CADF;MAMsB;;MAMxB,IAAI0C,oBAAoBR,MAApB,GAA6B,CAAjC,EAAoC;QAClC,MAAMmB,OAAOX,oBAAoBf,GAApB,CAAwB2B,sBAAsB;UACzD,OAAO3J,+DACF8I,iBADE,GAEFa,mBAAmB,KAAKjK,OAAL,CAAaE,KAAb,CAAmBD,IAAtC,CAFE;YAAA,CAGJiE,UAHI,GAGS8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CAHT;YAG4B,CAChC4C,iBADgC,GACZ8F,mBAAmB/G,GAAnB,CAAuBtB,SAAvB;UAJhB,IAKF,KAAK5B,OAAL,CAAa2G,KALX,CAAP;QAKkB,CANP,CAAb;QAUAwC,SAASpC,IAAT,CAAc,KAAK/G,OAAL,CAAaE,KAAb,CAAmBgK,UAAnB,CAA8BF,IAA9B,EAAoC1J;UAAEgC,UAAU;QAAZ,GAAqBvC,OAArB,CAApC,CAAd;MAAuE;;MAGzE,OAAOoK,QAAQC,GAAR,CAAYjB,QAAZ,CAAP;IAAmB,CAhErB;;IAmEA,IAAI;MACF,MAAMF,cAAc,MAAM,KAAKjJ,OAAL,CAAaE,KAAb,CAAmBuH,OAAnB,CAA2BW,iCAAKrI,OAAL;QAAc6G,KAAd;QAAqBgB,KAAK;MAA1B,EAA3B,CAA1B;MACA,OAAO,MAAMoB,mBAAmBC,WAAnB,CAAb;IAAgC,CAFlC,CAEkC,OACzBoB,KADyB,EAChC;MACA,IAAIA,iBAAiB3K,gBAArB,EAAuC,OAAOsJ,mBAAmB,EAAnB,CAAP;MACvC,MAAMqB,KAAN;IAAM;EAAA;;EAgBJ,UAAIrC,cAAJ,EAAoBsC,YAApB,EAAkCvK,OAAlC,EAA2C;IAE/C,IAAI,CAACuK,YAAL,EAAmB,OAAOH,QAAQI,OAAR,EAAP;IAEnBxK,UAAUO,mBAAKP,OAAL,CAAV;IAEA,MAAMsB,cAAc,IAApB;IACA,MAAME,YAAYF,YAAYE,SAA9B;IACA,MAAMK,YAAYP,YAAYO,SAA9B;IACA,MAAMsC,aAAa7C,YAAY6C,UAA/B;IACA,MAAMC,oBAAoB9C,YAAY8C,iBAAtC;IACA,MAAMiF,oBAAoBrJ,QAAQC,OAAR,IAAmB,EAA7C;IAEAsK,eAAejJ,YAAY0H,eAAZ,CAA4BuB,YAA5B,CAAf;;IAEA,MAAM1D,QAAQtG;MAAA,CACX4D,UADW,GACE8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CADF;MACqB,CAChC4C,iBADgC,GACZmG,aAAahC,GAAb,CAAiBkC,eAAeA,YAAYtH,GAAZ,CAAgBtB,SAAhB,CAAhC;IAFT,GAGTP,YAAYrB,OAAZ,CAAoB2G,KAHX,CAAd;;IAMA,MAAMqC,qBAAqBC,eAAe;MACxC,MAAME,WAAW,EAAjB;MACA,MAAME,sBAAsB,EAA5B;MACA,MAAMoB,sBAAsB,EAA5B;;MACA,WAAWtE,GAAX,IAAkBmE,YAAlB,EAAgC;QAC9B,MAAMI,sBAAsBzB,eAAeA,YAAYS,IAAZ,CAAiBiB,WAAWA,QAAQxG,iBAAR,MAA+BgC,IAAIjD,GAAJ,CAAQtB,SAAR,CAA3D,CAA3C;;QAEA,IAAI,CAAC8I,mBAAL,EAA0B;UACxBrB,oBAAoBtC,IAApB,CAAyBZ,GAAzB;QAAyB,CAD3B,MAEO;UACL,MAAMwD,oBAAoBxD,IAAI9E,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0BD,IAA9B,CAA1B;;UACA,MAAM+G,aAAa1G,kCAAK8I,iBAAL,GAA2BO,iBAA3B,CAAnB;;UAEA,IAAIzH,OAAO0H,IAAP,CAAY5C,UAAZ,EAAwBuC,IAAxB,CAA6BnF,aAAa4C,WAAW5C,SAAX,MAA0BsG,oBAAoBtG,SAApB,CAApE,CAAJ,EAAyG;YACvGqG,oBAAoB1D,IAApB,CAAyBZ,GAAzB;UAAyB;QAAA;MAAA;;MAK/B,IAAIkD,oBAAoBR,MAApB,GAA6B,CAAjC,EAAoC;QAClC,MAAMmB,OAAOX,oBAAoBf,GAApB,CAAwB2B,sBAAsB;UACzD,MAAMN,oBAAoBM,mBAAmB5I,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0BD,IAA7C,CAA1B;;UACA,MAAM+G,aAAa1G,kCAAK8I,iBAAL,GAA2BO,iBAA3B,CAAnB;;UAEA3C,WAAW9C,UAAX,IAAyB8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CAAzB;UACAyF,WAAW7C,iBAAX,IAAgC8F,mBAAmB/G,GAAnB,CAAuBtB,SAAvB,CAAhC;UAEAM,OAAOC,MAAP,CAAc6E,UAAd,EAA0B3F,YAAYrB,OAAZ,CAAoB2G,KAA9C;UAEA,OAAOK,UAAP;QAAO,CATI,CAAb;QAYAmC,SAASpC,IAAT,CAAc1F,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0BgK,UAA1B,CAAqCF,IAArC,EAA2C1J;UAAEgC,UAAU;QAAZ,GAAqBvC,OAArB,CAA3C,CAAd;MAA8E;;MAGhF,WAAW6K,KAAX,IAAoBH,mBAApB,EAAyC;QACvC,IAAId,oBAAoBiB,MAAMvJ,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0BD,IAAhC,CAAxB;;QACA,MAAM+G,aAAa1G,kCAAK8I,iBAAL,GAA2BO,iBAA3B,CAAnB;;QAEA,IAAIA,6BAA6BtI,YAAYrB,OAAZ,CAAoBE,KAArD,EAA4D;UAC1DyJ,oBAAoB,EAApB;QAAoB;;QAGtBR,SAASpC,IAAT,CAAc1F,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0B2J,MAA1B,CAAiC7C,UAAjC,EAA6C9E,OAAOC,MAAP,CAAcpC,OAAd,EAAuB;UAAE6G,OAAO;YAAA,CACxF1C,UADwF,GAC3E8D,eAAe9E,GAAf,CAAmB3B,SAAnB,CAD2E;YACxD,CAChC4C,iBADgC,GACZyG,MAAM1H,GAAN,CAAUtB,SAAV;UAFoE;QAAT,CAAvB,CAA7C,CAAd;MAEiC;;MAInC,OAAOuI,QAAQC,GAAR,CAAYjB,QAAZ,CAAP;IAAmB,CAjDrB;;IAoDA,IAAI;MACF,MAAMF,cAAc,MAAM5H,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0BuH,OAA1B,CAAkCW,iCAAKrI,OAAL;QAAc6G,KAAd;QAAqBgB,KAAK;MAA1B,EAAlC,CAA1B;MACA,MAAM,CAACxG,YAAD,IAAiB,MAAM4H,mBAAmBC,WAAnB,CAA7B;MACA,OAAO7H,YAAP;IAAO,CAHT,CAGS,OACAiJ,KADA,EACP;MACA,IAAIA,iBAAiB3K,gBAArB,EAAuC,OAAOsJ,oBAAP;MACvC,MAAMqB,KAAN;IAAM;EAAA;;EAaV9G,OAAOyE,cAAP,EAAuB6C,oBAAvB,EAA6C9K,OAA7C,EAAsD;IACpD,MAAMsB,cAAc,IAApB;IAEAtB,UAAUA,WAAW,EAArB;IAEA8K,uBAAuBxJ,YAAY0H,eAAZ,CAA4B8B,oBAA5B,CAAvB;IAEA,MAAMjE,QAAQ;MAAA,CACXvF,YAAY6C,UADD,GACc8D,eAAe9E,GAAf,CAAmB7B,YAAYE,SAA/B,CADd;MAC6C,CACxDF,YAAY8C,iBAD4C,GACxB0G,qBAAqBvC,GAArB,CAAyBkC,eAAeA,YAAYtH,GAAZ,CAAgB7B,YAAYO,SAA5B,CAAxC;IAFrB,CAAd;IAKA,OAAOP,YAAYrB,OAAZ,CAAoBE,KAApB,CAA0B4J,OAA1B,CAAkC1B,iCAAKrI,OAAL;MAAc6G;IAAd,EAAlC,CAAP;EAAuD;;EAanD,aAAOoB,cAAP,EAAuB8C,MAAvB,EAA+B/K,OAA/B,EAAwC;IAC5C,MAAMsB,cAAc,IAApB;IAEAtB,UAAUA,WAAW,EAArB;IACA+K,SAASA,UAAU,EAAnB;;IAEA,IAAI5C,MAAMC,OAAN,CAAcpI,OAAd,CAAJ,EAA4B;MAC1BA,UAAU;QACRgL,QAAQhL;MADA,CAAV;IACU;;IAIZ,IAAIsB,YAAYsF,KAAhB,EAAuB;MACrBzE,OAAOC,MAAP,CAAc2I,MAAd,EAAsBzJ,YAAYsF,KAAlC;;MACA,IAAI5G,QAAQgL,MAAZ,EAAoB;QAClBhL,QAAQgL,MAAR,GAAiBhL,QAAQgL,MAAR,CAAeC,MAAf,CAAsB9I,OAAO0H,IAAP,CAAYvI,YAAYsF,KAAxB,CAAtB,CAAjB;MAA+D;IAAA;;IAKnE,MAAMsE,sBAAsB,MAAM5J,YAAYvB,MAAZ,CAAmBwD,MAAnB,CAA0BwH,MAA1B,EAAkC/K,OAAlC,CAAlC;IAEA,MAAMiI,eAAe3G,YAAY4B,SAAZ,CAAsBI,GAArC,EAA0C4H,mBAA1C,EAA+D7L,EAAE8L,IAAF,CAAOnL,OAAP,EAAgB,CAAC,QAAD,CAAhB,CAA/D,CAAN;IACA,OAAOkL,mBAAP;EAAO;;EAGTE,uBAAuBC,KAAvB,EAA8B;IAC5B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAO,KAAK3K,EAAL,KAAY2K,KAAnB;IAAmB;;IAGrB,IAAIA,SAASA,MAAMvK,MAAnB,EAA2B;MACzB,OAAO,KAAKJ,EAAL,KAAY2K,MAAMvK,MAAzB;IAAyB;;IAG3B,OAAO,CAAC,KAAKF,SAAb;EAAa;;AA/vBuB;;AAmwBxC0K,OAAOC,OAAP,GAAiBC,aAAjB;AACAF,OAAOC,OAAP,CAAeC,aAAf,GAA+BA,aAA/B;AACAF,OAAOC,OAAP,CAAeE,OAAf,GAAyBD,aAAzB","names":["Utils","require","Helpers","_","Association","BelongsTo","HasMany","HasOne","AssociationError","EmptyResultError","Op","constructor","source","target","options","through","name","model","associationType","targetAssociation","sequelize","__spreadValues","isMultiAssociation","doubleLinked","as","isSelfAssociation","isAliased","isPlainObject","plural","singular","singularize","combinedTableName","combineTableNames","tableName","each","associations","association","paired","sourceKey","primaryKeyAttribute","sourceKeyField","rawAttributes","field","targetKey","targetKeyField","targetKeyDefault","_createForeignAndOtherKeys","isDefined","define","Object","assign","indexes","paranoid","validate","pick","needInjectPaired","otherKey","otherKeyDefault","foreignKey","_injectAttributes","throughModel","combinedName","associationAccessor","upperFirst","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","isObject","foreignKeyAttribute","fieldName","camelize","join","otherKeyAttribute","identifier","foreignIdentifier","attribute","attributeName","primaryKey","_autoGenerated","includes","primaryKeyDeleted","sourceKeyType","type","targetKeyType","sourceAttribute","targetAttribute","unique","uniqueKey","constraints","references","getTableName","key","onDelete","onUpdate","refreshAttributes","identifierField","foreignIdentifierField","dialect","toSource","manyFromSource","oneFromSource","toTarget","manyFromTarget","oneFromTarget","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instance","cloneDeep","scopeWhere","throughWhere","scope","where","and","include","push","attributes","joinTableAttributes","required","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","findAll","fn","col","raw","plain","result","parseInt","sourceInstance","instances","Array","isArray","__spreadProps","instancePrimaryKeys","map","or","associatedObjects","differenceWith","a","b","isEqual","length","newAssociatedObjects","toInstanceArray","updateAssociations","currentRows","obsoleteAssociations","promises","defaultAttributes","unassociatedObjects","filter","some","currentRow","newObj","find","throughAttributes","keys","update","destroy","obsoleteAssociation","bulk","unassociatedObject","bulkCreate","Promise","all","error","newInstances","resolve","newInstance","changedAssociations","existingAssociation","current","assoc","oldAssociatedObjects","values","fields","concat","newAssociatedObject","omit","verifyAssociationAlias","alias","module","exports","BelongsToMany","default"],"sources":["/Users/aurele/node_modules/sequelize/src/associations/belongs-to-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\nconst EmptyResultError = require('../errors').EmptyResultError;\nconst Op = require('../operators');\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    /*\n    * Default/generated source/target keys\n    */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false, // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n          this.paired._createForeignAndOtherKeys();\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.sourceKey\n        ].join('_')\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize(\n        [\n          this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n          this.targetKey\n        ].join('_')\n      );\n    }\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = { type: sourceKeyType, ...this.foreignKeyAttribute };\n    const targetAttribute = { type: targetKeyType, ...this.otherKeyAttribute };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.through.model.refreshAttributes();\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    // For Db2 server, a reference column of a FOREIGN KEY must be unique\n    // else, server throws SQL0573N error. Hence, setting it here explicitly\n    // for non primary columns.\n    if (this.options.sequelize.options.dialect === 'db2' &&\n        this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope };\n    }\n\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return _.differenceWith(instancePrimaryKeys, associatedObjects,\n      (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).length) {\n            promises.push(\n              this.through.model.update(attributes, Object.assign(options, {\n                where: {\n                  [identifier]: sourceInstance.get(sourceKey),\n                  [foreignIdentifier]: newObj.get(targetKey)\n                }\n              }\n              ))\n            );\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(\n          this.through.model.destroy({\n            ...options,\n            where: {\n              [identifier]: sourceInstance.get(sourceKey),\n              [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n              ...this.through.scope\n            }\n          })\n        );\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return {\n            ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n\n        promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options, where, raw: true });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n\n    options = { ...options };\n\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          Object.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes, ...throughAttributes };\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, { where: {\n          [identifier]: sourceInstance.get(sourceKey),\n          [foreignIdentifier]: assoc.get(targetKey)\n        } })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options, where, raw: true });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n\n    return association.through.model.destroy({ ...options, where });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    const newAssociatedObject = await association.target.create(values, options);\n\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"]},"metadata":{},"sourceType":"script"}